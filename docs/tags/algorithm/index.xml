<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on 拿鐵派的馬克 Blog</title>
    <link>https://mark-lin.com/tags/algorithm/</link>
    <description>Recent content in algorithm on 拿鐵派的馬克 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <managingEditor>h091237557@gmail.com (marklin)</managingEditor>
    <webMaster>h091237557@gmail.com (marklin)</webMaster>
    <lastBuildDate>Tue, 03 Sep 2019 19:51:35 +0800</lastBuildDate>
    
        <atom:link href="https://mark-lin.com/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>30-03 之應用層的運算加速 - 演算法</title>
      <link>https://mark-lin.com/posts/20190903/</link>
      <pubDate>Tue, 03 Sep 2019 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20190903/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://ithelp.ithome.com.tw/upload/images/20190918/20089358YWcXuY0jDd.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;正文開始&lt;/h2&gt;
&lt;p&gt;本篇文章開始，我們將要深入的探討，每一個服務，要如何儘可能的達到高性能呢 ?&lt;/p&gt;
&lt;p&gt;這首先第一部份，我們要探討以下主題 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在應用層，要如何儘可能的使用越少的資源( CPU、Memory )，來做最多的事情呢 ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而這一題的主要的答案就是不少人面試很排斥的『演算法』。&lt;/p&gt;
&lt;p&gt;本篇文章會分為以下幾段 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一個好與不好的演算法性能差距多大呢 ?&lt;/li&gt;
&lt;li&gt;演算法運算時間的分類&lt;/li&gt;
&lt;li&gt;演算法優化建議&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下來正文開始。&lt;/p&gt;
&lt;h2 id=&#34;-&#34;&gt;一個好與不好的演算法性能差距多大呢 ?&lt;/h2&gt;
&lt;p&gt;一個演算法的效能基本上有兩個東東 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;時間複雜度: 你可以把它想成演算法的運行時間。&lt;/li&gt;
&lt;li&gt;空間複雜度: 這個可以想成你這個演算法需要花多少的空間來處理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面只是簡單說明它的代表概念，比較實際的運算方法直接去 wiki 看就夠囉。&lt;/p&gt;
&lt;p&gt;那麼拉回拉，一個好與不好的演算法性能差距有多大呢 ?&lt;/p&gt;
&lt;p&gt;呵 !&lt;/p&gt;
&lt;p&gt;我們以一個最簡單的演算法『費波那契數列』來看看。&lt;/p&gt;
&lt;p&gt;首先這是好的程式碼。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// good
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;;
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;temp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;temp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;temp&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;;
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;timeEnd&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再來這是爛的程式碼。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// bad
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;timeEnd&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後咱們簡單的測試運行時間，你看看這兩個差多少倍，嗯好幾千倍。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;good time: 2.609ms
bad time: 17315.706ms
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這裡應該是有些人會想說，這種費波那契數列演算法或是很多演算法上網抓就好了，工作上又不太會自已寫，學演算法要幹啥呢 ?&lt;/p&gt;
&lt;p&gt;某些方面是沒錯，但這裡問題在於 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你抓成 bad 版本呢 ? 會發生什麼事情呢 ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很多演算法的確不需要自已在寫，但如果有演算法概念與能力，至少不太會抓錯程式碼，抓錯這事咱真看過這慘況。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;~ 小備註 ~&lt;/strong&gt;
原本想順到印出 stack 記憶體使用量，但是好像沒啥方法可以印出……。如果不太分的清楚 stack 與 heap 的差別可以參考此篇文章。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.valentinog.com/blog/memory-usage-node-js/&#34;&gt;How to inspect the memory usage of a process in Node.Js&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading1&#34;&gt;演算法運算時間的分類&lt;/h2&gt;
&lt;p&gt;這裡最重要的重點就在於，你要知道你寫的程式碼時間複雜度是屬於那個分級，如果你分不起來，然後寫到 O(2^n) 分級的演算法，那明眼人應該知道會發生什麼事情。&lt;/p&gt;
&lt;p&gt;比較常見的分類，分為以下幾種，花費時間由小到大 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O ( 1 )&lt;/li&gt;
&lt;li&gt;O ( log n )&lt;/li&gt;
&lt;li&gt;O ( n )&lt;/li&gt;
&lt;li&gt;O ( n log n )&lt;/li&gt;
&lt;li&gt;O ( n ^ 2 )&lt;/li&gt;
&lt;li&gt;O ( 2 ^ n )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://ithelp.ithome.com.tw/upload/images/20190918/20089358qU18wx916P.jpg&#34; alt=&#34;&#34;&gt;
圖 1 : 時間複雜度的分級 (圖片來源: &lt;a href=&#34;https://medium.com/appworks-school/%E5%88%9D%E5%AD%B8%E8%80%85%E5%AD%B8%E6%BC%94%E7%AE%97%E6%B3%95-%E8%AB%87%E4%BB%80%E9%BA%BC%E6%98%AF%E6%BC%94%E7%AE%97%E6%B3%95%E5%92%8C%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6-b1f6908e4b80&#34;&gt;初學者學演算法｜談什麼是演算法和時間複雜度&lt;/a&gt;)&lt;/p&gt;
&lt;h4 id=&#34;o--1-&#34;&gt;O ( 1 )&lt;/h4&gt;
&lt;p&gt;例如這種常見的，兩數交換，就是屬於 O(1) 操作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;temp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;temp&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;o--log-n-&#34;&gt;O ( log n )&lt;/h4&gt;
&lt;p&gt;這個最常見的操作就是所謂的&lt;code&gt;二分搜尋法&lt;/code&gt;，簡單的概念如下圖 2 所示，就是一半一半的找，但這個有個前提假設，那就是數組是要&lt;code&gt;有規則&lt;/code&gt;或&lt;code&gt;已排序&lt;/code&gt;的才能使用這招。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170421-1.png&#34; alt=&#34;&#34;&gt;
圖 2 : 二分搜尋概念圖&lt;/p&gt;
&lt;h4 id=&#34;o--n-&#34;&gt;O ( n )&lt;/h4&gt;
&lt;p&gt;只要有用一個 for 迴圈，那它基本上就屬於 O(n) 的時間複雜度。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
   ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;o--n-log-n-&#34;&gt;O ( n log n )&lt;/h4&gt;
&lt;p&gt;這裡只要記好，不管是任何的語言，你只要用到它內建的排序功能，那基本上就是 O(nlogn) 的時間複雜度，平均而言喔。&lt;/p&gt;
&lt;h4 id=&#34;o--n--2-&#34;&gt;O ( n ^ 2 )&lt;/h4&gt;
&lt;p&gt;這個也非常的常見，就是內外兩個 for 回圈。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;o--2--n-&#34;&gt;O ( 2 ^ n )&lt;/h4&gt;
&lt;p&gt;這種時間複雜度很容易出現在一種情境下，那就是&lt;code&gt;選&lt;/code&gt;與&lt;code&gt;不選&lt;/code&gt;的情境，不過這種情況比較常在考演算法題時看到，實務應該是不常看到。&lt;/p&gt;
&lt;h2 id=&#34;-cpu--memory-&#34;&gt;實務上 CPU 與 Memory 優化建議&lt;/h2&gt;
&lt;p&gt;這裡我覺得要讓應用層以最少的 cpu 與 memory 做最多事情的要幾個要點 :&lt;/p&gt;
&lt;h3 id=&#34;-1--&#34;&gt;小建議 1 : 可以理解你寫的程式碼的時間與空間複雜度&lt;/h3&gt;
&lt;p&gt;簡單的說，你要可以知道你寫的程式碼的時間與空間複雜度，不要寫到了 n^5 的迴圈程式都不知道。然後當寫到這種多層迴圈的情況下，你要仔細的想想兩件事 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是否真的有必要 ? 有沒有其它寫法呢 ?&lt;/li&gt;
&lt;li&gt;如果真的有必要，在多少個數量可能會是臨界點呢 ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-2--&#34;&gt;小建議 2 : 熟悉各種工具所提供的方法&lt;/h3&gt;
&lt;p&gt;例如我們很常使用 redis，它裡面提供了一些資料結構來進行操作，這裡要使用好的要點，就是你要熟悉裡面每個資料結構所提供的操作方法，它的時間複雜度與空間複雜度，這裡如果你選錯了使用方法，那們你可能會耗費不少資源在做事情。&lt;/p&gt;
&lt;h3 id=&#34;-3--&#34;&gt;小建議 3 : 熟悉資料結構&lt;/h3&gt;
&lt;p&gt;現在不少的語言都有提供一些資料結構的操作，但是我相信不少人就是一個陣列幹到底，功能可以出來沒錯，但事實上有些情況下，選擇適當的資料結構使用，你會省下不少力氣並且性能也提升不少。&lt;/p&gt;
&lt;p&gt;如果你不知道要學那些資料結構，就乖乖的買本資料結構的書吧。接下來再搭配你會的語言所提供的資料結構，像如果是 c++ 你就可以參考 STL，然後 Java 可以看看 Collection 等，而 js 呢 ? 你就先理解看看它的 Array 到底是啥鬼，並且看看它所提供的方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;~ 學習小心得 ~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;開始或許會覺得很困難，但久了就覺得還好了，畢竟痛久了，就習慣了。&lt;/p&gt;
&lt;h3 id=&#34;-4--&#34;&gt;小建議 4 : 熟悉一些演算法的套路&lt;/h3&gt;
&lt;p&gt;俗話說的好，不要重複做輪子。&lt;/p&gt;
&lt;p&gt;多去理解一些演算法，或許會有小收穫，有時後你接到一項工作時，有可能事實上，已有人做過相同的事情了，有的人解決這項任務可能已經有 O(logn) 的寫法，但你偏偏自已寫，然後寫出一個 O(n^2) 的寫法，然後當系統快不行了，就和老闆說只能加機器來處理，這樣有點而不是很好呢&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;~ 學習小心得 ~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;演算法學習也是個很困難的一條路，也同時是很容易讓人放棄的路，但是當你想繼續往上時，演算法就是基本了。建議這一條路找個伴一起學，真的比較不容易放棄，如果最後還是和伴一起放棄了，只能說無緣囉 ~&lt;/p&gt;
&lt;p&gt;這裡順到提供一些我的演算法軍火庫，通常在碰到一個問題時，如果沒啥想法就會拿這些方法來思考看看有沒有適合的，而這些方法事實上也可以當成刷題用的分類……&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BFS&lt;/li&gt;
&lt;li&gt;DFS&lt;/li&gt;
&lt;li&gt;Two-Points&lt;/li&gt;
&lt;li&gt;DP&lt;/li&gt;
&lt;li&gt;Binary Search&lt;/li&gt;
&lt;li&gt;Sort&lt;/li&gt;
&lt;li&gt;資料結構 (tree、set、hash、prefix tree、binary tree)&lt;/li&gt;
&lt;li&gt;BitManipulation&lt;/li&gt;
&lt;li&gt;Recursion&lt;/li&gt;
&lt;li&gt;Divid And Conquer&lt;/li&gt;
&lt;li&gt;Greedy&lt;/li&gt;
&lt;li&gt;歸納法 (思考方法)&lt;/li&gt;
&lt;li&gt;演繹法 (思考方法)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;請服用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;~ 小知識 ~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;歸納法&lt;/code&gt;與&lt;code&gt;演繹法&lt;/code&gt;這兩種嚴格來說在 leetcode 沒有這種分門別類，但是它卻是所有演算法的核心思考方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;歸納法 : 就是將相同特性的東西歸納出來，例如這個吃漢堡、吃便當，這就可以歸納出吃東西這個概念&lt;/li&gt;
&lt;li&gt;演繹法 : 就是一種依順序的推導，例如人會死，孔子是人，所以孔子會死。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這裡只是很淺淺的說明，未來有機會希望可以開篇來詳談。&lt;/p&gt;
&lt;h2 id=&#34;heading2&#34;&gt;結論與心得&lt;/h2&gt;
&lt;p&gt;這一篇文章中，咱們討論如何以最少的 CPU 與 Memory 來做最多事情的一個重點，那就是 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;演算法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而且我們也知道，一個好的演算法與爛的算法，運行時間差了幾百倍都有可能，而這個影響在比較大的公司就有可能是百台以上的成本差異，雖然在小公司效果比較不顯著，但是如果寫的爛的話，也有可能少少的使用量下，你的機器就掰了。&lt;/p&gt;
&lt;p&gt;然後這裡建議一般的開發者，演算法可以不用刷的要死要活，但至少要有演算法的概念，這樣才對得起付錢給你的人(不過如果你討厭老闆那就無所謂)，但是如果你追求的對是一般，那就乖乖刷吧。&lt;/p&gt;
&lt;p&gt;最後簡單的淺淡一下面試演算法這東西。基本上普通的公司，我不太贊成考演算法題目(我說題目喔)。主要的原因有下 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工作時用不到(比較準確的說法是，用了也不見得看得到效果)。&lt;/li&gt;
&lt;li&gt;有可能會錯失一些在其它方面很強的人。&lt;/li&gt;
&lt;li&gt;香蕉的問題。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是我覺得可以簡單的考一些演算法的概念當參考評分比較用，但請不要第一關演算法題目沒過就刷人，除非公司是萬人想進那種類型，或是開得起 $$ 的則例外。&lt;/p&gt;
&lt;h2 id=&#34;heading3&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kknews.cc/zh-tw/tech/38yyl3g.html&#34;&gt;時間複雜度 講解- 簡單易懂&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>排序之桶子排序法(Bucket Sort)</title>
      <link>https://mark-lin.com/posts/20170427/</link>
      <pubDate>Thu, 27 Apr 2017 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20170427/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;比較排序法與非比較排序法&lt;/li&gt;
&lt;li&gt;桶子排序法原理&lt;/li&gt;
&lt;li&gt;桶子排序法使用時機&lt;/li&gt;
&lt;li&gt;桶子排序法複雜度&lt;/li&gt;
&lt;li&gt;javascript 演算法實作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading&#34;&gt;比較排序法與非比較排序法&lt;/h2&gt;
&lt;p&gt;前面幾篇我們學的排序演算法都被歸類為&lt;code&gt;比較排序法&lt;/code&gt;，而另一種歸類為&lt;code&gt;非比較排序法&lt;/code&gt;，桶子排序法&lt;code&gt;Bucket Sort&lt;/code&gt;就是屬於該歸類。&lt;/p&gt;
&lt;p&gt;我們這邊簡單的說一下&lt;code&gt;比較排序法&lt;/code&gt;與&lt;code&gt;非比較排序法&lt;/code&gt;的差別，首先比較排序法是透過資料兩兩比較進行排序，而且它在效能上有根本的限制，在最差的情況下，任何一種比較排序法至少需要&lt;code&gt;O(nlogn)&lt;/code&gt;比較操作。&lt;/p&gt;
&lt;p&gt;網上有個簡單的證明，就設我們有3個資料要進行排序，&lt;code&gt;1,4,5&lt;/code&gt;，那們它有幾種排序組合 ?&lt;/p&gt;
&lt;p&gt;答案是 3! = 3 * 2 * 1 = 6，六種排序法，也就是說它六較次數至少為
&lt;code&gt;Log(N!) = O ( N log N )&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;非比較排序法&lt;/code&gt;就沒有效能上的限制，通過非比較操作能在``O(n)`完成，但它缺少了靈活性，比較排序法能對各種數據型態進行排序，而非比較排序則不能，這種靈活性也導致了比較排序被更多的應用在大多數實際工作中。&lt;/p&gt;
&lt;p&gt;像在&lt;code&gt;Mozilla&lt;/code&gt;的&lt;code&gt;javascript&lt;/code&gt;的&lt;code&gt;sort&lt;/code&gt;預設是&lt;code&gt;Merge Sort&lt;/code&gt;，而&lt;code&gt;WebKit&lt;/code&gt;則是&lt;code&gt;Selection Sort&lt;/code&gt;，都是選用比較排序法。&lt;/p&gt;
&lt;h2 id=&#34;heading1&#34;&gt;桶子排序法原理&lt;/h2&gt;
&lt;p&gt;桶子排序法，它的原理是將陣列，分散到有限數量的桶子中，然後每個桶子再個別進行排序，其中每個桶子的個別排序可以運用其它的演算法來進行排序。&lt;/p&gt;
&lt;p&gt;桶子排序法有三個特點&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;桶子排序法是穩定的。&lt;/li&gt;
&lt;li&gt;它是常見的排序法中最快的一種，大多數的情況下。&lt;/li&gt;
&lt;li&gt;它非常快，但缺點是非常的耗空間。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;上面有說到穩定，但穩定是什麼意思呢?例子，假設我們有個數列為3,5,19,3*,10，其中3*只是為了識別它和前面的3是不一樣的。&lt;/p&gt;
&lt;p&gt;穩定排序結果 =&amp;gt; 1,3,3*,5,10,19&lt;/p&gt;
&lt;p&gt;不穩定排序結果 =&amp;gt; 1,3*,3,5,10,19&lt;/p&gt;
&lt;p&gt;從上面結果可知穩定的它的順序會與原資料一樣3在3*前面，而不穩定則會有不同結果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;桶子排序法基本的流程如下。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建立桶子群。&lt;/li&gt;
&lt;li&gt;將資料丟到對應的桶子裡。&lt;/li&gt;
&lt;li&gt;個別桶子進行排序。&lt;/li&gt;
&lt;li&gt;然後在依順序取出結果。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我們來看看下面的圖片說明，假設我們要排序的資料如下。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[ 7 , 5 , 9 , 2 , 10 , 1 , 8 ]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然後首先第一步，我們要將資料分配到&lt;code&gt;Bucket&lt;/code&gt;中，但要著麼分呢 ? 我們會建立個&lt;code&gt;雜湊函式Hash(x)&lt;/code&gt;，然後盡可能讓這個函式可以&lt;code&gt;平均&lt;/code&gt;的分配資料，不然可能會發生最壞的情況。&lt;/p&gt;
&lt;p&gt;我們這邊假設&lt;code&gt;hash(x) = x/3&lt;/code&gt;，並且每個桶子都給予值，來決定誰該放到那個桶子，例如桶子值為&lt;code&gt;1&lt;/code&gt;則，我們只會將&lt;code&gt;x/3&lt;/code&gt;為&lt;code&gt;1開頭&lt;/code&gt;的放至到該桶子，如下圖&lt;code&gt;5/3 = 1.666..&lt;/code&gt;的會放到值為&lt;code&gt;1&lt;/code&gt;的桶子。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170206-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下來各別的桶子進行排序，排序的方法自由決定，可以是選擇排序、快速排序。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170206-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;最後呢再將資料從桶子取出，然後就完成囉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170206-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading2&#34;&gt;桶子排序法使用時機&lt;/h2&gt;
&lt;p&gt;有以下兩點。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;資料均勻分布&lt;/code&gt; : 輸入的資料必須是均勻分布於特別範圍，並依據這個範圍，建立&lt;code&gt;n&lt;/code&gt;個桶子。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;有序的雜湊函&lt;/code&gt; : 桶子必須是有序的。如果沒有順序那取出時又要再排序一次就沒意義了。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;heading3&#34;&gt;桶子排序法時間複雜度&lt;/h2&gt;
&lt;h3 id=&#34;heading4&#34;&gt;最好與平均&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;O ( n+k )&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;heading5&#34;&gt;最壞&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;O ( n^2 )&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading6&#34;&gt;桶子排序法空間複雜度&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;O ( n*k ) &lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;javascript-&#34;&gt;javascript 演算法說明&lt;/h2&gt;
&lt;p&gt;這邊我們根據上面的範例，來建立&lt;code&gt;Bucket Sort&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下列為&lt;code&gt;javascript&lt;/code&gt;說明，而最下面為全部程式碼。不過先仔細看一下會發現，為什麼預設的桶子數為&lt;code&gt;5&lt;/code&gt;，事實上這只是假設，實際上，它應該用其它方法來計算可能的桶子數，我們這邊的&lt;code&gt;Hash function&lt;/code&gt;為&lt;code&gt;x/3&lt;/code&gt;，並且我們是根據計算出的&lt;code&gt;Hash&lt;/code&gt;值，來決定它該丟到那個桶子，例如&lt;code&gt;1.3&lt;/code&gt;，我們就會丟到&lt;code&gt;1&lt;/code&gt;的桶子。&lt;/p&gt;
&lt;p&gt;所以我們總共要設幾個桶子呢，這邊我們可以先找出陣列中的最大值，然後計算它的&lt;code&gt;Hash&lt;/code&gt;值，並用該值來決定我們總共要建立多少個桶子。&lt;/p&gt;
&lt;p&gt;我們的最大值為&lt;code&gt;10&lt;/code&gt;，所以根據&lt;code&gt;Hash function&lt;/code&gt;計算出的結果為&lt;code&gt;3&lt;/code&gt;，所以我們至少要建立&lt;code&gt;4&lt;/code&gt;個桶子，因為陣列從&lt;code&gt;0&lt;/code&gt;開始所以要加一個。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;桶子數嚴格來說要根據你的&lt;code&gt;Hash function&lt;/code&gt;來進行決定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我們簡單的說明一下程式碼。首先我們先看&lt;code&gt;Hash function&lt;/code&gt;，假設我們的&lt;code&gt;x&lt;/code&gt;為&lt;code&gt;10&lt;/code&gt;，則&lt;code&gt;hash&lt;/code&gt;值為&lt;code&gt;3&lt;/code&gt;，而假設為&lt;code&gt;2&lt;/code&gt;，則出來的結果為&lt;code&gt;0&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hashFun&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;){
	&lt;span style=&#34;color:#75715e&#34;&gt;// 取最小整數
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;floor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後我們建立桶子，並且每個桶子為陣列型式。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// create buckets 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bucketsCount&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;buckets&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [];
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下來我們會根據&lt;code&gt;hash function&lt;/code&gt;計算出的&lt;code&gt;hash&lt;/code&gt;值，來決定各資料要丟到那個桶子內。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// According to hashFun, we can distruibute data to buckets
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;buckets&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;hashFun&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;])].&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;]);
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再來我們將各別桶子內的值進行排序，我們直接使用&lt;code&gt;javascript&lt;/code&gt;的預設排序，由於它的排序是依字母排序所以我們自訂排序規則&lt;code&gt;(a,b)=&amp;gt;{return a-b}&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;最後我們將每個排序好的桶子內資料，一個一個取出，然後就產生出已排序資料。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;  Object.&lt;span style=&#34;color:#a6e22e&#34;&gt;keys&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;buckets&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;forEach&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;) =&amp;gt; {
 &lt;span style=&#34;color:#75715e&#34;&gt;// By default the sort in js is elements alphabetically. so we must add sort function.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;buckets&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;) =&amp;gt; {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;
    });
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;buckets&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;]);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;buckets&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;forEach&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;) =&amp;gt; {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;)
    });
  })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading7&#34;&gt;全部程式碼&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * bucketSort
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * bucketSort and hash function is x/3;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param datas
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @returns {undefined}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bucketSort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bucketsCount&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;buckets&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {},
		 	&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;,
		 	&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [];

  &lt;span style=&#34;color:#75715e&#34;&gt;// create hash function
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hashFun&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;floor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
  }

  &lt;span style=&#34;color:#75715e&#34;&gt;// create buckets 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bucketsCount&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;buckets&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [];
  }

	&lt;span style=&#34;color:#75715e&#34;&gt;// According to hashFun, we can distruibute data to buckets
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;buckets&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;hashFun&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;])].&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;]);
  }

  Object.&lt;span style=&#34;color:#a6e22e&#34;&gt;keys&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;buckets&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;forEach&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;) =&amp;gt; {
 &lt;span style=&#34;color:#75715e&#34;&gt;// By default the sort in js is elements alphabetically. so we must add sort function.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;buckets&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;) =&amp;gt; {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;
    });
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;buckets&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;]);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;buckets&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;forEach&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;) =&amp;gt; {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;)
    });
  })

  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;);
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;bucketSort&lt;/span&gt;([&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading8&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%A1%B6%E6%8E%92%E5%BA%8F&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%A1%B6%E6%8E%92%E5%BA%8F&#34;&gt;https://zh.wikipedia.org/wiki/%E6%A1%B6%E6%8E%92%E5%BA%8F&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Bucket_sort&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Bucket_sort&#34;&gt;https://en.wikipedia.org/wiki/Bucket_sort&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>排序之合併排序法(Merge Sort)</title>
      <link>https://mark-lin.com/posts/20170426/</link>
      <pubDate>Wed, 26 Apr 2017 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20170426/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;合併排序法的原理&lt;/li&gt;
&lt;li&gt;合併排序法的速度效能&lt;/li&gt;
&lt;li&gt;合併排序法的空間效能&lt;/li&gt;
&lt;li&gt;javascript 演算法實作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading&#34;&gt;合併排序法原理&lt;/h2&gt;
&lt;p&gt;合併排序法，它也是與上一篇提到的快速排序法一樣，使用分治法的概念，也就是將問題拆分為子問題，各別解決後，再將結果進行合併。&lt;/p&gt;
&lt;p&gt;大部份的排序演算法中，都不太需要額外(大量)的儲存空間，而合併排序法，會需要使用到空間，但相對的它在時間複雜度的表現，比其它幾個演算法優質些。&lt;/p&gt;
&lt;p&gt;合併排序法實作的概念基本上有分為兩個，&lt;code&gt;Top Down&lt;/code&gt;與&lt;code&gt;Bottom Up&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;首先請看下圖，它是&lt;code&gt;Top Down&lt;/code&gt;的概念，它會先將資料拆分開來，然後再進行組合、排序，直到資料全部排序完成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170205-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然後我們在看下圖，它為&lt;code&gt;Bottom Up&lt;/code&gt;的概感，將資料以最小單位&lt;code&gt;2&lt;/code&gt;為限制，拆分，然後進行排序，再組合成下一個單位&lt;code&gt;4&lt;/code&gt;，再進行排序，以此類推，直到排序完成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170205-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading1&#34;&gt;合併排序法的速度效能&lt;/h2&gt;
&lt;h3 id=&#34;heading2&#34;&gt;平均&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;O(nlogn)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;heading3&#34;&gt;最好&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;O(n)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;heading4&#34;&gt;最壞&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;O(nlogn)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading5&#34;&gt;合併排序法的空間效能&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;O(n)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;javascript&#34;&gt;&lt;code&gt;javascript&lt;/code&gt;演算法實作&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，基本上只有在拆分時作法不一樣，但在&lt;code&gt;merge&lt;/code&gt;時，這邊都是呼叫它一個方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;top-down&#34;&gt;&lt;code&gt;Top Down實作&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;debugger&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * mergeSort_TopDown 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param datas
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @returns {undefined}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mergeSort_TopDown&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;floor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [];

    &lt;span style=&#34;color:#75715e&#34;&gt;//將datas陣列分兩左子陣列與右子陣列
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]);
      } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]);
      }
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leftSort&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mergeSort_TopDown&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rightSort&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mergeSort_TopDown&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;merge&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftSort&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;rightSort&lt;/span&gt;);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;;
}


&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * merge
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 將已排序的左與右子陣列，進行合併
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param left
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param right
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @returns {Array} sortedData
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;merge&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sortedData&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [],
    &lt;span style=&#34;color:#a6e22e&#34;&gt;leftLen&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;rightLen&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;leftIndex&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;rightIndex&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leftLen&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rightLen&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {

    &lt;span style=&#34;color:#75715e&#34;&gt;// 如果left陣列已比較完，則都輸入right陣列
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;leftIndex&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leftLen&lt;/span&gt;) {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;sortedData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;rightIndex&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;]);

      &lt;span style=&#34;color:#75715e&#34;&gt;// 如果right陣列已比較完，則都輸入left陣列 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;rightIndex&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rightLen&lt;/span&gt;) {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;sortedData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;leftIndex&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;]);

      &lt;span style=&#34;color:#75715e&#34;&gt;// 如果left陣列資料小於right陣列資料，則將資料放置sortedData	
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;leftIndex&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;rightIndex&lt;/span&gt;]) {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;sortedData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;leftIndex&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;]);

      &lt;span style=&#34;color:#75715e&#34;&gt;// 相反的，則將right資料存放至sortedData
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;sortedData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;rightIndex&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;]);
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sortedData&lt;/span&gt;;
}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;bottom-up&#34;&gt;&lt;code&gt;Bottom Up&lt;/code&gt;實作&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * mergeSort_BottomUp
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param datas
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @returns {undefined}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mergeSort_BottomUp&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;;

	&lt;span style=&#34;color:#75715e&#34;&gt;//2、4、8 這邊跑
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//例如 [1,2,3,4,5,6,7,8] 第一圈會跑[1,2]、[3,4]、[5,6]、[7,8]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//第二圈會跑 [1,2,3,4]、[5,6,7,8
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//第三圈會跑 [1,2,3,4,5,6,7,8]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sortedDatas&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;merge&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt;),&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt;))	
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sortedDatas&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;;&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
				&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sortedDatas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;];	
			}	
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;);
			}
  }
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * merge
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 將已排序的左與右子陣列，進行合併
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param left
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param right
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @returns {Array} sortedData
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;merge&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sortedData&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [],
    &lt;span style=&#34;color:#a6e22e&#34;&gt;leftLen&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;rightLen&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;leftIndex&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;rightIndex&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leftLen&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rightLen&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {

    &lt;span style=&#34;color:#75715e&#34;&gt;// 如果left陣列已比較完，則都輸入right陣列
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;leftIndex&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leftLen&lt;/span&gt;) {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;sortedData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;rightIndex&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;]);

      &lt;span style=&#34;color:#75715e&#34;&gt;// 如果right陣列已比較完，則都輸入left陣列 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;rightIndex&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rightLen&lt;/span&gt;) {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;sortedData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;leftIndex&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;]);

      &lt;span style=&#34;color:#75715e&#34;&gt;// 如果left陣列資料小於right陣列資料，則將資料放置sortedData	
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;leftIndex&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;rightIndex&lt;/span&gt;]) {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;sortedData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;leftIndex&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;]);

      &lt;span style=&#34;color:#75715e&#34;&gt;// 相反的，則將right資料存放至sortedData
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;sortedData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;rightIndex&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;]);
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sortedData&lt;/span&gt;;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading6&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Merge_sort&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Merge_sort&#34;&gt;https://en.wikipedia.org/wiki/Merge_sort&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/10153393/mergesort-is-bottom-up-faster-than-top-down&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/10153393/mergesort-is-bottom-up-faster-than-top-down&#34;&gt;http://stackoverflow.com/questions/10153393/mergesort-is-bottom-up-faster-than-top-down&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com.tw/search?q=merge+sort+bottom+up+vs+top+down&amp;amp;oq=merge+sort+bottom+up+vs+top+down&amp;amp;aqs=chrome.0.69i59.1675j0j4&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&#34;&gt;&lt;a href=&#34;https://www.google.com.tw/search?q=merge+sort+bottom+up+vs+top+down&amp;amp;oq=merge+sort+bottom+up+vs+top+down&amp;amp;aqs=chrome.0.69i59.1675j0j4&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&#34;&gt;https://www.google.com.tw/search?q=merge+sort+bottom+up+vs+top+down&amp;amp;oq=merge+sort+bottom+up+vs+top+down&amp;amp;aqs=chrome.0.69i59.1675j0j4&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>排序之快速排序法(Quick Sort)</title>
      <link>https://mark-lin.com/posts/20170425/</link>
      <pubDate>Tue, 25 Apr 2017 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20170425/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;快速排序法的原理&lt;/li&gt;
&lt;li&gt;快速排序法的速度效能&lt;/li&gt;
&lt;li&gt;快速排序法的空間效能&lt;/li&gt;
&lt;li&gt;基準點的選擇&lt;/li&gt;
&lt;li&gt;javascript 演算法實作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading&#34;&gt;快速排序法的原理&lt;/h2&gt;
&lt;p&gt;快速排序法，又稱為&lt;code&gt;分割排序法(partioion exchange sort)&lt;/code&gt;，是一種最快的排序法之一，它使用分治法的概念，將問題拆分成兩個獨立的問題來進行解決，再將兩個結果合成原問題的答案，這就是說所謂的&lt;code&gt;分治法&lt;/code&gt;&lt;a href=&#34;http://marklin-blog.logdown.com/posts/1636923&#34;&gt;(傳送門)&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;快速排序的過程有四個步驟。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意以下皆以由小排到大的流程來進行說明。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假設我們總共要排序的資料有&lt;code&gt;n&lt;/code&gt;個，&lt;code&gt;D1,D2,D3,...,Dn&lt;/code&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;選定一個基準值&lt;code&gt;(privot)&lt;/code&gt;，並假設為&lt;code&gt;D&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;由左至右尋找 &lt;code&gt;i=2,3,4,..,n&lt;/code&gt;，一直到&lt;code&gt;Di &amp;gt; D&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;由右至左尋找 &lt;code&gt;j=n,n-1,n-2,...&lt;/code&gt;，一直到&lt;code&gt;Dj &amp;lt; D&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;當&lt;code&gt;i&amp;lt;j&lt;/code&gt;時，&lt;code&gt;Di與Dj互換&lt;/code&gt;，而當&lt;code&gt;i&amp;gt;j&lt;/code&gt;時&lt;code&gt;D與Dj互換&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;heading1&#34;&gt;範例&lt;/h3&gt;
&lt;p&gt;我們下面來看看這個範例。&lt;/p&gt;
&lt;p&gt;假設我們的&lt;code&gt;基準值設為最左邊的值，也就是陣列的初始值&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基準值的選擇後面會說明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而我們要排序的陣列如下。&lt;/p&gt;
&lt;p&gt;[ 39 , 15 , 37 , 89 , 45 , 20 , 32 , 51 ]&lt;/p&gt;
&lt;p&gt;然後我們開始進行快速排序法，首先我們選定的基準值為&lt;code&gt;39&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;[ &lt;code&gt;39&lt;/code&gt; , 15 , 37 , 89 , 45 , 20 , 32 , 51 ]&lt;/p&gt;
&lt;p&gt;然後開始由左至右尋找，直到比&lt;code&gt;39&lt;/code&gt;大的值，選擇&lt;code&gt;89&lt;/code&gt;。接下來由右至左找，直到比&lt;code&gt;39&lt;/code&gt;小的值，選擇&lt;code&gt;32&lt;/code&gt;。因&lt;code&gt;i (3) &amp;lt; j (6)&lt;/code&gt;，所以&lt;code&gt;89&lt;/code&gt;與&lt;code&gt;32&lt;/code&gt;位置進行互換，如下。&lt;/p&gt;
&lt;p&gt;[ &lt;code&gt;39&lt;/code&gt; , 15 , 37 , &lt;code&gt;32&lt;/code&gt; , 45 , 20 , &lt;code&gt;89&lt;/code&gt; , 51 ]&lt;/p&gt;
&lt;p&gt;再繼續同樣的步驟，由左至右我們尋找到&lt;code&gt;45&lt;/code&gt;，由右至左我們尋找到&lt;code&gt;20&lt;/code&gt;。因&lt;code&gt;i (4) &amp;lt; j (5)&lt;/code&gt;，所以&lt;code&gt;20&lt;/code&gt;與&lt;code&gt;45&lt;/code&gt;互換，結果如下。&lt;/p&gt;
&lt;p&gt;[ &lt;code&gt;39&lt;/code&gt; , 15 , 37 , 32 , &lt;code&gt;20&lt;/code&gt; , &lt;code&gt;45&lt;/code&gt; , 89 , 51 ]&lt;/p&gt;
&lt;p&gt;再來左至右尋找到&lt;code&gt;45&lt;/code&gt;，然後由右至左尋找到&lt;code&gt;20&lt;/code&gt;，這時因&lt;code&gt;i (5) &amp;gt; j(4)&lt;/code&gt;，所以&lt;code&gt;39&lt;/code&gt;與&lt;code&gt;20&lt;/code&gt;進行互換，結果如下。&lt;/p&gt;
&lt;p&gt;[ &lt;code&gt;20&lt;/code&gt; , 15 , 37 , 32 , &lt;code&gt;39&lt;/code&gt; , &lt;code&gt;45&lt;/code&gt; , 89 , 51 ]&lt;/p&gt;
&lt;p&gt;現在我們看看上面的陣列，我們發現在&lt;code&gt;39&lt;/code&gt;左邊的都是比它小的，而在右邊的都是比它大的，這時咱們就在將&lt;code&gt;39&lt;/code&gt;左邊與右邊的陣列，繼續進行上述步驟。&lt;/p&gt;
&lt;h4 id=&#34;--20--15--37--32-&#34;&gt;左邊子陣列排序 [ 20 , 15 , 37 , 32 ]&lt;/h4&gt;
&lt;p&gt;首先我們先看&lt;code&gt;左邊的子陣列&lt;/code&gt;，並且一樣選擇最左邊的資料為基準點。&lt;/p&gt;
&lt;p&gt;[ &lt;code&gt;20&lt;/code&gt; , 15 , 37 , 32 ]&lt;/p&gt;
&lt;p&gt;然後從左至右開始尋找，直到比&lt;code&gt;20&lt;/code&gt;還大的值&lt;code&gt;37&lt;/code&gt;。接下來由右至左找，直到比&lt;code&gt;20&lt;/code&gt;還小的值，選擇&lt;code&gt;15&lt;/code&gt;，因&lt;code&gt;i (2) &amp;gt; j (1)&lt;/code&gt;，所以將基準點&lt;code&gt;20&lt;/code&gt;與&lt;code&gt;15&lt;/code&gt;進行交換，結果如下。&lt;/p&gt;
&lt;p&gt;[ 15 , 20 , 37 , 32 ]&lt;/p&gt;
&lt;p&gt;我們一樣又將&lt;code&gt;左邊的子陣列&lt;/code&gt;根據基準點&lt;code&gt;20&lt;/code&gt;，又分割成兩個陣列&lt;code&gt;[15]&lt;/code&gt;與&lt;code&gt;[37,32]&lt;/code&gt;，由於&lt;code&gt;[15]&lt;/code&gt;只有一個值不需進行排序，因此只要再將&lt;code&gt;[37,32]&lt;/code&gt;進行排序好，就完成&lt;code&gt;左邊子陣列的排序囉&lt;/code&gt;，&lt;code&gt;左邊子陣列&lt;/code&gt;結果如下。&lt;/p&gt;
&lt;p&gt;[ 15 , 20 , 32 , 37 ]&lt;/p&gt;
&lt;h4 id=&#34;--45--89--51-&#34;&gt;右邊子陣列排序 [ 45 , 89 , 51 ]&lt;/h4&gt;
&lt;p&gt;我們選擇&lt;code&gt;45&lt;/code&gt;為基準點。&lt;/p&gt;
&lt;p&gt;[ &lt;code&gt;45&lt;/code&gt; , 89 , 51 ]&lt;/p&gt;
&lt;p&gt;然後從右至左尋找，直到比&lt;code&gt;45&lt;/code&gt;還大的值&lt;code&gt;89&lt;/code&gt;。接下來由左至右找，直到比&lt;code&gt;45&lt;/code&gt;還小值，沒有~ 這時我們的&lt;code&gt;j&lt;/code&gt;事實上就是&lt;code&gt;0&lt;/code&gt;這個位置，這時&lt;code&gt;i(1) &amp;gt; j(0)&lt;/code&gt;，所以基準點&lt;code&gt;45&lt;/code&gt;與&lt;code&gt;j(0)&lt;/code&gt;的值互換，這時注意，因為都是基準點，所以結果還是長的一樣。&lt;/p&gt;
&lt;p&gt;[ &lt;code&gt;45&lt;/code&gt; , 89 , 51 ]&lt;/p&gt;
&lt;p&gt;這時要著麼處理呢 ? 記好，只要完全上述的步驟我們就可以拆分成兩個子陣列，所以上述的陣列會拆分為&lt;code&gt;[]&lt;/code&gt;與&lt;code&gt;[ 89 , 51 ]&lt;/code&gt;，沒錯，空陣列那個就可以不用做囉，我們只要繼續做右邊的那個陣列就行囉，結果如下。&lt;/p&gt;
&lt;p&gt;[ 51 , 89 ]&lt;/p&gt;
&lt;p&gt;然後再將這個主題的右邊子陣列內的子陣列全部合體，結果如下。&lt;/p&gt;
&lt;p&gt;[ 45 , 51 , 89 ]&lt;/p&gt;
&lt;h4 id=&#34;39&#34;&gt;然後將左子陣列與右子陣列排序的結果進行合體，不過別忘了最開始拆分的基準點&lt;code&gt;39&lt;/code&gt;。&lt;/h4&gt;
&lt;p&gt;左子陣列結果。&lt;/p&gt;
&lt;p&gt;[ 15 , 20 , 32 , 37 ]&lt;/p&gt;
&lt;p&gt;右子陣列結果。&lt;/p&gt;
&lt;p&gt;[ 45 , 51 , 89 ]&lt;/p&gt;
&lt;p&gt;基準點。&lt;/p&gt;
&lt;p&gt;[ 39 ]&lt;/p&gt;
&lt;p&gt;合體為。&lt;/p&gt;
&lt;p&gt;[ 15 , 20 , 32 ,37 , 39 , 45 , 51 , 89 ]&lt;/p&gt;
&lt;p&gt;結束 ~&lt;/p&gt;
&lt;h2 id=&#34;heading2&#34;&gt;快速排序法的速度效能&lt;/h2&gt;
&lt;h3 id=&#34;heading3&#34;&gt;最好情況&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;O(n log n)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;heading4&#34;&gt;最壞情況&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;O(n^2)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;heading5&#34;&gt;平均情況&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;O(n log n)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading6&#34;&gt;快速排序法的空間效能&lt;/h2&gt;
&lt;p&gt;快速排序法的空間複雜度會依實作的方式而有所不同，例如下述範例程式碼，它有兩個快速排序的方法&lt;code&gt;quickSort_space&lt;/code&gt;與&lt;code&gt;quickSort_inPlace&lt;/code&gt;，其中&lt;code&gt;quickSort_space&lt;/code&gt;，這種寫法比較簡單，但缺點就是需要比較多的空間。&lt;/p&gt;
&lt;p&gt;快速排序法還有一個東西會影響到空間複雜度，那就是遞迴的深度，深度越多，需要空間越大。&lt;/p&gt;
&lt;h3 id=&#34;heading7&#34;&gt;最好情況&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;O(log n)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;遞迴深度為 &lt;code&gt;log n&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;heading8&#34;&gt;最壞情況&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;O(n)&lt;/code&gt;
遞迴深度為 &lt;code&gt;n-1&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading9&#34;&gt;基準點的選擇&lt;/h2&gt;
&lt;p&gt;通常有三種選擇。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;選擇第一個或最後一個元素&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;但注意，這種選擇在排序的資料，會跑出最壞情況&lt;code&gt;O(n^2)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;隨機亂數&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;使用它會題供平均情況的效能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;三數中位數&lt;code&gt;(median-of-three)&lt;/code&gt;，也就是第一、最後、中間的資料的中位數&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;根據&lt;code&gt;Sedgewick&lt;/code&gt;描述，這作法會有&lt;code&gt;5%&lt;/code&gt;的效能提升，但些情況會不佳，想知細節請參考&lt;code&gt;(Musser,1997)&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;javascript-&#34;&gt;javascript 演算法實作&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;debugger&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * quickSort
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * This method is easy , but it need more space , not good ~
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param datas
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @returns {undefined}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;quickSort_space&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [],
    &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [],
    &lt;span style=&#34;color:#a6e22e&#34;&gt;privot&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]];

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;privot&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]);
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]);
    }
  }
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;right : &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;left :&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;quickSort_space&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;privot&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;quickSort_space&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;)));
}

&lt;span style=&#34;color:#75715e&#34;&gt;//console.log(quickSort_space([5, 3, 7, 4, 1, 9, 8, 6, 2]));
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;swap&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;temp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;];
  &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;];
  &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;temp&lt;/span&gt;;
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * quickSort_inPlace
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * This method is better than quickSort_space
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param datas
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param left
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param right
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @returns {undefined}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;quickSort_inPlace&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;,
      &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
      &lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;) {

      &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;]) {};

      &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;]);

      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;swap&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;swap&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;quickSort_inPlace&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;quickSort_inPlace&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);
  }
}

&lt;span style=&#34;color:#75715e&#34;&gt;//quickSort_inPlace([39, 15, 37, 89, 45, 20, 32, 51], 0, 7);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;quickSort_inPlace&lt;/span&gt;([&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading10&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F&#34;&gt;https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Quicksort&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Quicksort&#34;&gt;https://en.wikipedia.org/wiki/Quicksort&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://notepad.yehyeh.net/Content/Algorithm/Sort/Quick/Quick.php&#34;&gt;&lt;a href=&#34;http://notepad.yehyeh.net/Content/Algorithm/Sort/Quick/Quick.php&#34;&gt;http://notepad.yehyeh.net/Content/Algorithm/Sort/Quick/Quick.php&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>排序之堆積排序法(Heap Sort)</title>
      <link>https://mark-lin.com/posts/20170424/</link>
      <pubDate>Mon, 24 Apr 2017 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20170424/</guid>
      <description>&lt;p&gt;本篇文章分成以下幾個章節 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;堆積樹(Heap tree)。&lt;/li&gt;
&lt;li&gt;堆積排序法的原理。&lt;/li&gt;
&lt;li&gt;堆積排序法的執行效能。&lt;/li&gt;
&lt;li&gt;javascript 演算法實作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-heap-tree&#34;&gt;堆積樹 Heap Tree&lt;/h2&gt;
&lt;p&gt;再說明堆積排序排序前，我們需要先知道一個東西，那就是&lt;code&gt;Heap Tree&lt;/code&gt;，它是二元樹(&lt;a href=&#34;http://marklin-blog.logdown.com/posts/1526463&#34;&gt;不知道的可以看筆者的這篇文章，不過我們在這篇中還是會簡單的複習&lt;/a&gt;)的一種，
那二元樹是啥 ? 就是長的和下圖一樣的東西，而二元樹有兩個比較嚴謹的定義如下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1 . 每個節點最多有兩個子節點
2 . 子節點有左右之分&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170127-6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;而其中，我們在這邊需要用的是完全二元樹&lt;code&gt;Complete Binary Tree&lt;/code&gt;，它就是&lt;code&gt;Heap Tree&lt;/code&gt;，它除了上面的定義外，還有第三個定義。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3 . 除了最後一階層之外的階層，都必預完全有左與右節點&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;它的樣子如下圖。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170127-7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;-max-heap&#34;&gt;最大堆積 Max Heap&lt;/h3&gt;
&lt;p&gt;在了解完&lt;code&gt;Heap Tree&lt;/code&gt;後，我們就要來知道，&lt;code&gt;Max Heap&lt;/code&gt;是啥，它也是種堆積樹一種，不過它有個條件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1 . 父節點的值大於子節點
2 . 樹根(root)一定是所有節點的最大值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根據以上的條件畫出的圖，大概如下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170127-8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我們這邊來看看下面幾張&lt;code&gt;Max Heap&lt;/code&gt;產生過程的圖解。&lt;/p&gt;
&lt;p&gt;首先我們會先將陣列轉換成&lt;code&gt;Heap Tree&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170127-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然後我們會從&lt;code&gt;最後的父節點&lt;/code&gt;，開始進行&lt;code&gt;Max Heap&lt;/code&gt;判斷，然後再往前遞回。我們會先從&lt;code&gt;09&lt;/code&gt;該節點進行判斷，由於&lt;code&gt;09小於16&lt;/code&gt;，因此進行互換，結果如下圖。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170127-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下來，我們在往回前一個父節點，&lt;code&gt;11&lt;/code&gt;來進行判斷，因為該父節點值都大於子節點&lt;code&gt;02與10&lt;/code&gt;因此不需要進行互換。結果如下圖。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170127-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;最後再來判斷&lt;code&gt;root&lt;/code&gt;，也就是最後一個父節點&lt;code&gt;08&lt;/code&gt;，它下面兩個子節點&lt;code&gt;11與16&lt;/code&gt;都比它大，因此，它選擇最大值&lt;code&gt;16&lt;/code&gt;進行交換，然後&lt;code&gt;08&lt;/code&gt;再於&lt;code&gt;09&lt;/code&gt;進行比較，再進行交換，結果如下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170127-4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;最後產生出的&lt;code&gt;Max Heap&lt;/code&gt;結果如下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170127-5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;堆積排序法的原理&lt;/h2&gt;
&lt;p&gt;在了解完上面的預備知識後，我們就可以開始了解堆積排序法的做法囉，它的流程如下。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;前置作業&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;將陣列轉換成&lt;code&gt;Heap Tree&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在將&lt;code&gt;Heap Tree&lt;/code&gt;轉換成&lt;code&gt;Max Heap&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;重複作業&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;將最上面的節點&lt;code&gt;root&lt;/code&gt;與最後面的節點交換位置。&lt;/li&gt;
&lt;li&gt;再將&lt;code&gt;Tree&lt;/code&gt;轉換成&lt;code&gt;Max Heap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然後一直&lt;code&gt;re re re re&lt;/code&gt;這流程，直到完全排序完成。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面我們將簡單用個範例，來說明他如下排序。首先我們有個要排序的陣列。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[08,14,16,10,9]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然後根據上述的&lt;code&gt;前置作業&lt;/code&gt;先將它轉換成&lt;code&gt;Max Heap&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[16,14,10,8,9]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下來我們將要開始進行&lt;code&gt;重複作業&lt;/code&gt;的步驟。首先，先將&lt;code&gt;16(root)&lt;/code&gt;與&lt;code&gt;09(最後結點)&lt;/code&gt;進行交換。其中下圖中的&lt;code&gt;Swap(0,4)&lt;/code&gt;，代表著陣列位置為&lt;code&gt;0&lt;/code&gt;與&lt;code&gt;4&lt;/code&gt;的進資料進行交換。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170127-9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然後接下來我們進行&lt;code&gt;Max Heap&lt;/code&gt;的步驟，我們將從陣列位置&lt;code&gt;0&lt;/code&gt;的資料&lt;code&gt;9&lt;/code&gt;進行&lt;code&gt;Max Heap&lt;/code&gt;，因為&lt;code&gt;9&lt;/code&gt;小於&lt;code&gt;14與10&lt;/code&gt;因此選擇較大者&lt;code&gt;14&lt;/code&gt;進行交換。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170127-10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;再將&lt;code&gt;14(root)&lt;/code&gt;與&lt;code&gt;8(最後結點)&lt;/code&gt;進行交換，注意這時最後結點是&lt;code&gt;8&lt;/code&gt;了喔。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170127-11.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然後在進行&lt;code&gt;Max Heap&lt;/code&gt;，&lt;code&gt;8&lt;/code&gt;小於&lt;code&gt;9與10&lt;/code&gt;，選擇&lt;code&gt;10&lt;/code&gt;進行換位。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170127-12.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;進行&lt;code&gt;10(root)&lt;/code&gt;與&lt;code&gt;8(最後結點)&lt;/code&gt;交換。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170127-13.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;再進行&lt;code&gt;Max Heap&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170127-14.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;最後在進行交換，然後完成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170127-15.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，上述範例都是由小排到大，如果是要由大排到小的，需要將&lt;code&gt;Max Heap&lt;/code&gt;修改為&lt;code&gt;Min Heap&lt;/code&gt;，也就是每個父元素值要小於子元素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;heading1&#34;&gt;堆積排序法的執行效能&lt;/h2&gt;
&lt;h3 id=&#34;heading2&#34;&gt;最好與最壞情況&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;O(nlogn)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;javascript&#34;&gt;javascript演算法實作&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;debugger&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * swap
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * swap datas location , ex [1,2] =&amp;gt; swap(datas,0,1) =&amp;gt; [2,1] 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param datas
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param i
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param j
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @returns {undefined}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;swap&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;temp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;];
  &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;];
  &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;temp&lt;/span&gt;;
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * maxHeapIfy
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Create the max heap like this 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 		6
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 	4		5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 1 2  3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param datas
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param root
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param length
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @returns {undefined}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxHeapIfy&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leftChild&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rightChild&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxNode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

  &lt;span style=&#34;color:#75715e&#34;&gt;// 如果左邊的子節點，大於父節點，則最大node設為左邊子節點
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;leftChild&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;leftChild&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;])) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;maxNode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leftChild&lt;/span&gt;;
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;maxNode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;;
  }

  &lt;span style=&#34;color:#75715e&#34;&gt;// 如果右邊的子節點，大於父節點，則最大node設為右邊子節點
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;rightChild&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;rightChild&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;maxNode&lt;/span&gt;])) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;maxNode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rightChild&lt;/span&gt;;
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;maxNode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;swap&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;maxNode&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;maxHeapIfy&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;maxNode&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;);
  }
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * heapSort
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * heap sort datas
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param datas
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @returns {undefined}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;heapSort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;floor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;maxHeapIfy&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;);
  }

	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;){
		&lt;span style=&#34;color:#a6e22e&#34;&gt;swap&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;);	
		&lt;span style=&#34;color:#a6e22e&#34;&gt;maxHeapIfy&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;);
		&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;);
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;];

&lt;span style=&#34;color:#a6e22e&#34;&gt;heapSort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading3&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com.tw/search?q=heapsort&amp;amp;oq=heapsort&amp;amp;aqs=chrome..69i57j0j69i60j0l3.1495j0j4&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&#34;&gt;&lt;a href=&#34;https://www.google.com.tw/search?q=heapsort&amp;amp;oq=heapsort&amp;amp;aqs=chrome..69i57j0j69i60j0l3.1495j0j4&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&#34;&gt;https://www.google.com.tw/search?q=heapsort&amp;amp;oq=heapsort&amp;amp;aqs=chrome..69i57j0j69i60j0l3.1495j0j4&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>排序之選擇排序法(Selection Sort)</title>
      <link>https://mark-lin.com/posts/20170423/</link>
      <pubDate>Sun, 23 Apr 2017 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20170423/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;選擇排序法的原理&lt;/li&gt;
&lt;li&gt;插入排序法的執行效能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javascript&lt;/code&gt;演算法實作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading&#34;&gt;選擇排序法的原理&lt;/h2&gt;
&lt;p&gt;選擇排序法，它基本的觀念為 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;將資料分成已排序與未排序，然後在未排序的資料中尋找最小(大)值，並將它移置已排序資料的右邊。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我們以下圖來簡單的進行說明。注意，下列的 A[0] 代表陣列的第一個位置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一行 : 已排序資料為空，然後尋找未排序資料中最小值&lt;code&gt;8&lt;/code&gt;，並將它移至已排序資料的右邊，也就是&lt;code&gt;A[0]&lt;/code&gt;，結果如第二行。&lt;/li&gt;
&lt;li&gt;第二行 : 已排序資料為&lt;code&gt;8&lt;/code&gt;，尋找未排序資料中最小值&lt;code&gt;23&lt;/code&gt;，並將它移至已排序資料的尾端&lt;code&gt;A[1]&lt;/code&gt;，結果如第三行。&lt;/li&gt;
&lt;li&gt;以此類推，最後可得到從小到大的排序資料。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170124-1.JPG&#34; alt=&#34;&#34;&gt;
&lt;a href=&#34;http://enelia90.blogspot.tw/2011/02/types-of-sorting-and-sorting-algorithms.html&#34;&gt;圖片來源&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading1&#34;&gt;插入排序法的執行效能&lt;/h2&gt;
&lt;p&gt;那這個排序演算法效能如何 ? 我們會分成最好與最壞與平均來看。&lt;/p&gt;
&lt;h3 id=&#34;heading2&#34;&gt;最好、最壞、平均狀況&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;O(n^2)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;對都是一樣的，就算是排序好的，也是&lt;code&gt;O(n^2)&lt;/code&gt;的時間複雜度，我們來看個例子。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[1,2,3,4,5]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我們有上面的陣列，它需要進行排序，我們知道它排序好了，但演算法不知，所以還是要跑。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一行 : 已排序資料為空，然後尋找未排序資料最小值，因為演算法不知道最小值是啥，所以還是要從頭找到尾，然後找出&lt;code&gt;1&lt;/code&gt;，並將它放到&lt;code&gt;A[0]&lt;/code&gt;位置。&lt;/li&gt;
&lt;li&gt;然後接下來，每一行還是要從未排序資料中，從頭掃到尾來尋找資料，不管你有沒有排序好。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;heading3&#34;&gt;建議使用情況&lt;/h3&gt;
&lt;p&gt;根據Wiki的說法，嗯……。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原地操作幾乎是選擇排序的唯一優點，當空間複雜度要求較高時，可以考慮選擇排序；實際適用的場合非常罕見。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;javascript&#34;&gt;javascript演算法實作&lt;/h2&gt;
&lt;p&gt;我們來看看它的演算法，我們採用&lt;code&gt;javascript&lt;/code&gt;來進行撰寫。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * selectionSort
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Selection Sort Algorithmic
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param arr
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @returns {Array} , Thie return&amp;#39;s array has been Sorted.   
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;selectionSort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt;;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
		&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;;	
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt;;&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] ){
				&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;;
			}
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;swap&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;);
		&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;);
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;;
}


&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * swap
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Swap the min element and now element location.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param arr , array
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param min , the min element&amp;#39;s postion 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param pos , now postion
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @returns {undefined}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;swap&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt;){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;temp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;];
	&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt;];
	&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;temp&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;簡單的測試一下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;selectionSort&lt;/span&gt;([&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170124-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading4&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F&#34;&gt;https://zh.wikipedia.org/wiki/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.books.com.tw/products/0010741391&#34;&gt;&lt;a href=&#34;http://www.books.com.tw/products/0010741391&#34;&gt;http://www.books.com.tw/products/0010741391&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>排序之插入排序法 ( Insertion Sort )</title>
      <link>https://mark-lin.com/posts/20170422/</link>
      <pubDate>Sat, 22 Apr 2017 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20170422/</guid>
      <description>&lt;p&gt;插入排序法是我們第一個學習到的排序方法，我們本篇會針對它來詳細的介紹一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入排序法的原理&lt;/li&gt;
&lt;li&gt;插入排序法的執行效能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javascript&lt;/code&gt;演算法實作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading&#34;&gt;插入排序法的原理&lt;/h2&gt;
&lt;p&gt;我們先來看看下圖，來理論一下它是著麼進行排序，該圖來源為此&lt;a href=&#34;https://www.google.com.tw/search?q=insertion+sort&amp;amp;source=lnms&amp;amp;tbm=isch&amp;amp;sa=X&amp;amp;ved=0ahUKEwiYobap6dfRAhUGjZQKHXgLBJ8Q_AUICSgC&amp;amp;biw=1280&amp;amp;bih=703#imgrc=PJ68QwsZAj6I-M%3A&#34;&gt;interactivepython&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;首先，我們會將資料分成兩部份，已排序與未排序，然後我們會進行以下作業&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;將已排序資料與後一個資料進行比較，如果已排序資料大於它，則進行位移&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我們下面將以前四行來進行說明。注意，下列的 A[0] 代表陣列的第一個位置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一行 : 已排序資料為&lt;code&gt;54&lt;/code&gt;，然後我們與後一個&lt;code&gt;26&lt;/code&gt;進行比較，&lt;code&gt;54大於26&lt;/code&gt;因此我們會將&lt;code&gt;26&lt;/code&gt;的位置替換成&lt;code&gt;54&lt;/code&gt;，並將&lt;code&gt;26&lt;/code&gt;插入至&lt;code&gt;54的原位&lt;/code&gt;，結果為第二行。&lt;/li&gt;
&lt;li&gt;第二行 : 已排序資料為&lt;code&gt;26、54&lt;/code&gt;，然後我們與後一個&lt;code&gt;93&lt;/code&gt;進行比較，&lt;code&gt;54小於93&lt;/code&gt;因此不用進行位移，因為&lt;code&gt;26、54&lt;/code&gt;為已排序資料，因此只需要比較&lt;code&gt;54&lt;/code&gt;就好，結果為第三行。&lt;/li&gt;
&lt;li&gt;第三行 : 已排序資料為&lt;code&gt;26、54、93&lt;/code&gt;，然後與&lt;code&gt;17&lt;/code&gt;進行比較，首先&lt;code&gt;93大於17&lt;/code&gt;因此將&lt;code&gt;93&lt;/code&gt;位移置&lt;code&gt;A[3]&lt;/code&gt;，則時還沒插入喔，還要繼續比較，接下來&lt;code&gt;54大於17&lt;/code&gt;因此將&lt;code&gt;54&lt;/code&gt;位移至&lt;code&gt;A[2]&lt;/code&gt;，然後&lt;code&gt;26大於17&lt;/code&gt;，因此將&lt;code&gt;26&lt;/code&gt;位移至&lt;code&gt;A[1]&lt;/code&gt;，最後在將&lt;code&gt;17&lt;/code&gt;插入剩餘的空間&lt;code&gt;A[0]&lt;/code&gt;，結果為第四行。&lt;/li&gt;
&lt;li&gt;第四行 : 已排序資料為&lt;code&gt;17、26、54、93&lt;/code&gt;，開始與&lt;code&gt;77&lt;/code&gt;進行比較，&lt;code&gt;93大於77&lt;/code&gt;因此將&lt;code&gt;93&lt;/code&gt;位移至&lt;code&gt;A[4]&lt;/code&gt;的位置，然後&lt;code&gt;54小於77&lt;/code&gt;，因此&lt;code&gt;54&lt;/code&gt;不需要位移，最後將&lt;code&gt;77&lt;/code&gt;插入至空缺的位置&lt;code&gt;A[3]&lt;/code&gt;，當果為第五行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170123-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading1&#34;&gt;插入排序法的執行效能&lt;/h2&gt;
&lt;p&gt;那這個排序演算法效能如何 ? 我們會分成最好與最壞與平均來看。&lt;/p&gt;
&lt;h3 id=&#34;heading2&#34;&gt;最好狀況&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;O(n)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;該演算法最好的情況是時間複雜度為&lt;code&gt;O(n)&lt;/code&gt;，假設我們有下列陣列要排序。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[ 1 , 2 , 3 , 4 ] 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我們一看就知道，他不用進行排序，但演算法還不知道，所以它至少還是要跑個&lt;code&gt;for迴圈&lt;/code&gt;，跑個&lt;code&gt;4&lt;/code&gt;次，才知道它不用排序，因為我們這時最好的狀況就是只要跑&lt;code&gt;4&lt;/code&gt;次，也就是陣列的大小。&lt;/p&gt;
&lt;h3 id=&#34;heading3&#34;&gt;最壞狀況&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;O(n^2)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;假設我們要下列陣列要排序。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[ 4 , 3 , 2 , 1 ] 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;對就是完全相反的，我們首先要跑&lt;code&gt;for迴圈&lt;/code&gt;，然後裡面還要一個&lt;code&gt;while比較&lt;/code&gt;，而且因為我們的陣列是完全相反的。&lt;/p&gt;
&lt;h3 id=&#34;heading4&#34;&gt;平均狀況&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;O(n^2)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我也不知道為啥平均是&lt;code&gt;O(n^2)&lt;/code&gt;，真的。&lt;/p&gt;
&lt;h3 id=&#34;heading5&#34;&gt;建議使用情況&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;要排序的資料數量不大 : 平均是時間複雜度是&lt;code&gt;O(n^2)&lt;/code&gt;，如果來個1百萬個 n，你看看會如何。&lt;/li&gt;
&lt;li&gt;大部份的資料已排序 : 上面有說過，該演算法會將資料分成已排序與未排序的來進行比較，也就是說如果已排序的資料越多，你就可以少做越少的比較。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;javascript&#34;&gt;javascript演算法實作&lt;/h2&gt;
&lt;p&gt;我們來看看它的演算法，我們採用&lt;code&gt;javascript&lt;/code&gt;來進行撰寫。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;insertionSort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;Array.&lt;span style=&#34;color:#a6e22e&#34;&gt;isArray&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;elements is not array&amp;#39;&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt;];  &lt;span style=&#34;color:#75715e&#34;&gt;//正在處理的值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		
	&lt;span style=&#34;color:#75715e&#34;&gt;//判斷是否移位
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;) { 
      &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;];
      &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
    }
    
    &lt;span style=&#34;color:#75715e&#34;&gt;// 插入新值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    
      &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;簡單的測試一下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;insertionSort&lt;/span&gt;([&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170123-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading6&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F&#34;&gt;https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.books.com.tw/products/0010741391&#34;&gt;&lt;a href=&#34;http://www.books.com.tw/products/0010741391&#34;&gt;http://www.books.com.tw/products/0010741391&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>搜尋之二元搜尋法 Binary search</title>
      <link>https://mark-lin.com/posts/20170421/</link>
      <pubDate>Fri, 21 Apr 2017 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20170421/</guid>
      <description>&lt;p&gt;基本上如果我們要在陣列中搜尋一個元素，最簡單的方法就是跑個迴圈一個一個跑，它有個專有名詞叫&lt;code&gt;線性搜尋&lt;/code&gt;，這在未排序的資料中，效果還算可以，但是如果在&lt;code&gt;已排序&lt;/code&gt;的資料中，要來進行搜尋，就不太有效率了，本篇文章說明的二元搜尋法就是用來搜尋&lt;code&gt;已排序&lt;/code&gt;的資料集。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二元搜尋法原理&lt;/li&gt;
&lt;li&gt;程式碼實作(資料結構:陣列)&lt;/li&gt;
&lt;li&gt;程式碼實作(二元搜尋樹實作)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading&#34;&gt;二元搜尋法原理&lt;/h2&gt;
&lt;p&gt;它的基本搜尋概念，是將資料切兩半，然後比較搜尋目標在這兩半的左邊還右邊，如果在左邊，則將左邊的資料再切兩半，以此類推，至到尋找到目標。&lt;/p&gt;
&lt;p&gt;我們簡單的用下圖來說明，假設我們有個陣列，資料 1 至 9，並且已經排序，然後我們要搜尋&lt;code&gt;2&lt;/code&gt;，首先我們會先比較目標值( 2 )與中位數( 5 )，由於 5 大於 2 ，所以我們接下來只將搜尋左邊 1 至 4 的資料，然後我們再將目標值( 2 )與中位數( 3 )進行比較，由於 3 大於 2 ，因此再來也只搜尋左邊的 1 至 2 的資料，將目標值( 2 )與中位數( 2 )比較，相等，尋找到目標值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170421-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下來我們簡單的使用&lt;code&gt;js&lt;/code&gt;來實現二分搜尋法。&lt;/p&gt;
&lt;h2 id=&#34;heading1&#34;&gt;效能&lt;/h2&gt;
&lt;h3 id=&#34;--o-1&#34;&gt;最佳時間複雜度 : O (1)&lt;/h3&gt;
&lt;h3 id=&#34;--o-log-n&#34;&gt;平均時間複雜度 : O (log n)&lt;/h3&gt;
&lt;h3 id=&#34;--o-log-n1&#34;&gt;最差時間複雜度 : O (log n)&lt;/h3&gt;
&lt;h3 id=&#34;--o-11&#34;&gt;空間複雜度 : O (1)&lt;/h3&gt;
&lt;h2 id=&#34;heading2&#34;&gt;程式碼實作(資料結構:陣列)&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binarySearch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;low&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;heigh&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;ceil&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;low&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;heigh&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) ;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;];
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binarySearch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;);
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binarySearch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;);
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;];

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binarySearch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading3&#34;&gt;二元搜尋樹實作&lt;/h2&gt;
&lt;p&gt;二元搜尋樹是一種資料結構，假設你的資料本來就存儲成二元搜尋樹而不是陣列，那這樣你要使用二元搜尋法來尋找元素會更方便。下列筆者的文章中，有簡單的說明二元搜尋樹的概念。&lt;a href=&#34;http://marklin-blog.logdown.com/posts/1526463&#34;&gt;傳送門-樹與二元樹資料結構&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二元搜尋樹的基本條件就是&lt;code&gt;左邊的子樹一定小於右邊的子樹&lt;/code&gt;，我們這邊來簡單的建立&lt;code&gt;binary search tree&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;首先我們要先建立節點類別與二元樹類別。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;(){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BinaryTree&lt;/span&gt;(){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後我們要建立一個&lt;code&gt;add&lt;/code&gt;方法，它可以新增節點至二元樹裡，它的撰寫邏輯為，首先每次要新增節點時，你要先判斷它是放在左邊子陣列，還是右邊子陣列，接下來在判斷是否有空，如果為空則新增，而有貨的話則往下到孫節點建立。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BinarySearchTree&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;) {

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;;
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;insertNode&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;insertNode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;newNode&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newNode&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newNode&lt;/span&gt;;
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;insertNode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;newNode&lt;/span&gt;);
			}
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newNode&lt;/span&gt;;
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;insertNode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;newNode&lt;/span&gt;);
			}
		}
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後我們就可以建立二元搜尋樹了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tree&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BinarySearchTree&lt;/span&gt;();
&lt;span style=&#34;color:#a6e22e&#34;&gt;tree&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;));
&lt;span style=&#34;color:#a6e22e&#34;&gt;tree&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));
&lt;span style=&#34;color:#a6e22e&#34;&gt;tree&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;));
&lt;span style=&#34;color:#a6e22e&#34;&gt;tree&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;));
&lt;span style=&#34;color:#a6e22e&#34;&gt;tree&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
&lt;span style=&#34;color:#a6e22e&#34;&gt;tree&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;));
&lt;span style=&#34;color:#a6e22e&#34;&gt;tree&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;產生出來的二元搜尋樹長這樣。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	    	5
	     /   \
	    2	  9
	   / \   /  \
  1   4  8   10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然後接下來我們來寫&lt;code&gt;search&lt;/code&gt;，它的基本觀念就是二元搜尋法，更確切的說，在二元搜尋樹裡做搜尋，本身就是二元搜尋法，我們只要判斷目標值是在左子樹還右子樹，然後在往下去找就夠了。程式碼非常的簡單。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BinarySearchTree&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_search&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;);
	
	&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_search&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;){
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;;
		}&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;){
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_search&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;);
		}&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_search&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;);
		}
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading4&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Binary_search_algorithm&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Binary_search_algorithm&#34;&gt;https://en.wikipedia.org/wiki/Binary_search_algorithm&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>演算法策略---動態規畫法</title>
      <link>https://mark-lin.com/posts/20170325/</link>
      <pubDate>Sat, 25 Mar 2017 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20170325/</guid>
      <description>&lt;p&gt;動態規劃法 Dynamic programming ; DP，它與分治法很像，都是將大問題分割成小問題，而它和分治法不同的地方在於，它會將處理過的子問題解答，將它記憶起來，為了避免重複的計算。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;費波那西數列&lt;/h2&gt;
&lt;p&gt;最簡單說明動態規畫法的問題就是&lt;code&gt;費波那西數列&lt;/code&gt;，它的定義如下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;F0 = 0&lt;/p&gt;
&lt;p&gt;F1 = 1&lt;/p&gt;
&lt;p&gt;Fn = Fn-1 + Fn-2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是說&lt;code&gt;F2&lt;/code&gt;所代表的意思為&lt;code&gt;F2 = F1 + F0&lt;/code&gt;，也就等於&lt;code&gt;F2 = 1 + 0&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我們直接來看程式碼，首先先看沒有用&lt;code&gt;cache&lt;/code&gt;的費波那西數列。非常的簡單就只用遞迴來計算每個數列的值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我們這邊使用個例子，來說明它的計算流程，我們執行&lt;code&gt;fib(5)&lt;/code&gt;，然後我們直接看下面這張圖來了解它的過程，首先是項點&lt;code&gt;fib(5)&lt;/code&gt;，它就是由&lt;code&gt;fib(4)、fib(3)&lt;/code&gt;組成，然後再將之分解，就會如下圖的結果。其中我們有用綠色底來上色的地方，它就代表我們有重複的數字，像&lt;code&gt;fib(2)&lt;/code&gt;就被計算了&lt;code&gt;3次&lt;/code&gt;，所以上面這個演算法事實上做了很多重複的事情。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170331-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;而接下來，我們就將它改良一下，也就是用動態規畫法的概念下修改而成，它每次計算過一個數字後，就會先存起來，然後有需要時，就在將它拿出來。&lt;/p&gt;
&lt;p&gt;程式碼如下，它會將每個有計算過的數列儲放在記憶體內，有用到它時，就將它拿出來用。
下面就是簡單的使用&lt;code&gt;動態規畫法&lt;/code&gt;概念實作的費波南西數列。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//有用Cache
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;memo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [];
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib_cache&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;memo&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;memo&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;];
	}&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;memo&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib_cache&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib_cache&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;memo&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;];
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;knapsack-problem&#34;&gt;背包問題（Knapsack Problem）&lt;/h2&gt;
&lt;p&gt;這個問題的定義如下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假設一個背包最多放10公斤的物品，要如選擇那些物品，才可以使背包的總價值最高呢?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這個問題我們事實上有很多解法，我們也可以用之前學的&lt;code&gt;貪婪法&lt;/code&gt;來解，但我們這篇文章將要用&lt;code&gt;動態規畫法&lt;/code&gt;來解決這問題。&lt;/p&gt;
&lt;p&gt;要解決這個問題，我們的演算法邏輯如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;當物品重量大於限制重量時，該物品不放入，進行下個物品的比較。&lt;/li&gt;
&lt;li&gt;當物品重量小於限制重量時，考慮兩種狀況 (1) 將該商品放入後的情況 (2) 不將該商品放入後的情況。再取兩者間最大的價值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我們簡單的用例子來說明一下。&lt;/p&gt;
&lt;p&gt;假設可選擇物品如下。並且限重量為&lt;code&gt;3&lt;/code&gt;。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;物品&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;重量&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;價值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2KG&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3KG&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;然後我們看看下圖的執行流程，首先我們先看最上面長方形，先不要看紅色的數字，先看&lt;code&gt;(3)&lt;/code&gt;，這代表這限重量，就是我們最多可以選擇的產品，然後我們會開始跑上面有提到的演算法邏輯的流程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170331-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;注意在開始前，先不要看紅紅的方塊&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;首先我們會先將產品 A ，拿來決定要不要選擇，產品A重量&lt;code&gt;(2)&lt;/code&gt;小於限制重量&lt;code&gt;3&lt;/code&gt;，可以選擇，但要不要選呢 ? 我們要考慮兩種狀況的後果 (1) 不選擇產品 A (2) 選擇產品 A ，接下來，下圖左邊的分支，就是如果選擇第一種情況會如何。&lt;/p&gt;
&lt;p&gt;我們先來看不選擇產品A的情況，因為它有沒有拿產品A，所以限重還是一樣&lt;code&gt;(3)&lt;/code&gt;，接下來這邊也要考慮兩種情況 (1) 不選擇產品 B (2) 選擇產品 B，由於後面沒有可選擇，所以就不需要在往下深入，直接在這層決定要選B，還是不選B ; 因為不選擇產品B總價值為&lt;code&gt;0&lt;/code&gt;而選擇產品B的總價值為&lt;code&gt;2&lt;/code&gt;因此，這層我們選擇產品B，也就是&lt;code&gt;左邊不選擇產品A上面紅色塊塊的價值&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;然後我們在來看右手邊，一開始選擇產品A這分支，因為它選擇了A，所以限重量只剩&lt;code&gt;(1)&lt;/code&gt;，所以這邊我們不沒辦法在選&lt;code&gt;B&lt;/code&gt;，所以這層的總價值為&lt;code&gt;3&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;最後我們在來看決定要選擇 &lt;code&gt;A&lt;/code&gt;還是選擇&lt;code&gt;B&lt;/code&gt;，上述的流程都已經計算出這兩個選項的結果，因此我們選擇&lt;code&gt;選擇產品A&lt;/code&gt;這個結果&lt;code&gt;(3&amp;gt;2)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;接下來我們來實作程式碼。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;debugger&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [{
	&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
}, {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
}, {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
}, {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
}];

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Array2DVar&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;) { &lt;span style=&#34;color:#75715e&#34;&gt;// 定義二維陣列原型
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// x 維度長度
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// y 維度長度
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 建立個元素陣列
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Array(&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// this 代表物件本身
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;temp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Array2DVar&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dpProcess&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;temp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;temp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt;];
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;) {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt;) {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dpProcess&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt;);
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;dpProcess&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;dpProcess&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;);
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;temp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;;
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;dpProcess&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;));

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中下面這段程式碼，是要產生一個矩陣，用來存放我們曾經計算過的值，當然也不一定要用矩陣，只要可以存放就好，至於為什麼這裡要用矩陣等等會說明。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Array2DVar&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;) { &lt;span style=&#34;color:#75715e&#34;&gt;// 定義二維陣列原型
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// x 維度長度
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// y 維度長度
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 建立個元素陣列
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Array(&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// this 代表物件本身
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;temp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Array2DVar&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後下面這段程式碼是判斷，如果有已經計算過的值，則直接從記憶體取出。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;temp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;temp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt;];
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下來這段是重點，它有三個區塊，首先第一個區塊，當&lt;code&gt;items.length == index&lt;/code&gt;時，也就代表這，它已經沒有item可以繼續選擇下去了，再來第二個區塊，這塊是在說明如果&lt;code&gt;某產品的重量&lt;/code&gt;大於&lt;code&gt;剩於限重量&lt;/code&gt;，則往下一個產品繼續選擇，再來最後一個區塊就是我們上面所提到的過程，如下，它會將狀況分成兩種，然後再深入的去選擇。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;當物品重量小於限制重量時，考慮兩種狀況 (1) 將該商品放入後的情況 (2) 不將該商品放入後的情況。再取兩者間最大的價值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;) {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt;) {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dpProcess&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt;);
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;dpProcess&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;dpProcess&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;);
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>演算法策略---分治法</title>
      <link>https://mark-lin.com/posts/20170324/</link>
      <pubDate>Fri, 24 Mar 2017 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20170324/</guid>
      <description>&lt;p&gt;在解決一個問題時，有一種很常見的方法，那就是將這個問題，分成很多個小問題，然後將所以小問題全部解決，最後可以合成一個解答。這種將問題分割變小，再將小變回大的方法，在計算機科學中成為&lt;code&gt;分治法&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;分治法適用的情況&lt;/h2&gt;
&lt;p&gt;但並不是所有問題都適合分治法，有以下特性的問題才可以使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;問題的規模可小到一定的程式就可以容易解決。&lt;/li&gt;
&lt;li&gt;問題可以分解為若干個規模較小的相同問題，該問題有最優子結構性質，最優子結構的意思就是局部最優解能決定全局最優解。(同貪心法)&lt;/li&gt;
&lt;li&gt;可使用這個問題分解出的子問題的解，合併成該問題的解。&lt;/li&gt;
&lt;li&gt;這個問題的子問題都是獨立的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading1&#34;&gt;分治法的方法&lt;/h2&gt;
&lt;p&gt;要用分治法來解決一個問題，通常會有以下的步驟。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分解 : 將大問題分解成小問題。&lt;/li&gt;
&lt;li&gt;解決 : 將每個小問題解決。&lt;/li&gt;
&lt;li&gt;合併 : 將每個子問題的解合併為原問題的解。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;分治法基本上的手段是『遞迴』，也就是自已呼叫自已的意思。&lt;/p&gt;
&lt;h2 id=&#34;heading2&#34;&gt;實作練習&lt;/h2&gt;
&lt;p&gt;以下的問題都出自於&lt;code&gt;培養與鍛鍊程式設計的邏輯腦&lt;/code&gt;這個本書裡或leetcode中找到的，但我們這邊的都會使用&lt;code&gt;JS&lt;/code&gt;來進行實作。&lt;/p&gt;
&lt;h3 id=&#34;--maximum-subarray-&#34;&gt;最大子序列問題 ( Maximum Subarray )&lt;/h3&gt;
&lt;p&gt;最大子序列是個經典的問題，它的問題定義如下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在一個包含正負值的陣列中，尋找一段連續的元素總合『最大』的區間。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如假設我們有陣列&lt;code&gt;[1,5,-8,7,4,1,-9,6]&lt;/code&gt;，所以這時我們的最大子序列就為&lt;code&gt;7、4、1&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;這邊的解法基本概念如下圖，它會將陣列分成兩塊，並且最大子區塊有可能會落在左邊區塊、中間跨陣列區塊、右邊區塊，而每個區塊又可以在繼續切分成三塊，這樣就可以使用遞回取出，每塊最大子區間，最後再將結果組合起來就ok囉。以下是程式碼。&lt;code&gt;maxCrossover&lt;/code&gt;是用來尋找中間那塊的最大子區塊值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170324-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxSubarrary&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;];
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;middle&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;floor&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
		&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;startM:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; middleM:&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;middle&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; end :&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;maxSubarrary&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;middle&lt;/span&gt;),&lt;span style=&#34;color:#a6e22e&#34;&gt;maxSubarrary&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;middle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;),&lt;span style=&#34;color:#a6e22e&#34;&gt;maxCrossover&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;middle&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;));		
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxCrossover&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;middle&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;currentLeftSum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leftSum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;currentRightSum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rightSum&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;middle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
		&lt;span style=&#34;color:#a6e22e&#34;&gt;currentRightSum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;];
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;currentRightSum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rightSum&lt;/span&gt;){
			&lt;span style=&#34;color:#a6e22e&#34;&gt;rightSum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;currentRightSum&lt;/span&gt;;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;middle&lt;/span&gt;;&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;;&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;){
		&lt;span style=&#34;color:#a6e22e&#34;&gt;currentLeftSum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;];
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;currentLeftSum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leftSum&lt;/span&gt;){
			&lt;span style=&#34;color:#a6e22e&#34;&gt;leftSum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;currentLeftSum&lt;/span&gt;;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rightSum&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;leftSum&lt;/span&gt;;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!!!! start:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; end:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; middle&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;middle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; : &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rightSum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leftSum&lt;/span&gt;;
}


&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;];
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;maxSubarrary&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後我們來研究看看輸出的結果和他的過程。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;startM:0 middleM:3 end :7
startM:0 middleM:1 end :3
startM:0 middleM:0 end :1
!!!! start:0 end:1 middle0 : 6
startM:2 middleM:2 end :3
!!!! start:2 end:3 middle2 : 7
!!!! start:0 end:3 middle1 : 6
startM:4 middleM:5 end :7
startM:4 middleM:4 end :5
!!!! start:4 end:5 middle4 : 5
startM:6 middleM:6 end :7
!!!! start:6 end:7 middle6 : 6
!!!! start:4 end:7 middle5 : 5
!!!! start:0 end:7 middle3 : 12
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;前三行就是說明程式碼會先將左半邊的&lt;code&gt;1、5、-8、7&lt;/code&gt;一直進行切割，也就是下面這段程式碼的第一個&lt;code&gt;maxSubarrary(datas,start,middle)&lt;/code&gt;，它會一直遞回進去，然後直到切分到&lt;code&gt;1、5&lt;/code&gt;時，會執行到&lt;code&gt;maxCrossover&lt;/code&gt;，它會輸出最大交互子區塊&lt;code&gt;6&lt;/code&gt;，也就是第四行的結果。所以在&lt;code&gt;1、5&lt;/code&gt;這兩個陣列的最大子區間為&lt;code&gt;1、5&lt;/code&gt;，因為相加為&lt;code&gt;6&lt;/code&gt;大於個別的&lt;code&gt;1&lt;/code&gt;與&lt;code&gt;5&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;middle&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;floor&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;maxSubarrary&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;middle&lt;/span&gt;),&lt;span style=&#34;color:#a6e22e&#34;&gt;maxSubarrary&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;middle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;),&lt;span style=&#34;color:#a6e22e&#34;&gt;maxCrossover&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;datas&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;middle&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後處理完&lt;code&gt;1、5&lt;/code&gt;後，就來處理&lt;code&gt;-8、7&lt;/code&gt;，根據上述的流程，它會取得最大子取間為&lt;code&gt;7&lt;/code&gt;，因為它比&lt;code&gt;-8&lt;/code&gt;和&lt;code&gt;-8、7&lt;/code&gt;這兩個還大。&lt;/p&gt;
&lt;p&gt;在來處理&lt;code&gt;1、5、-8、7&lt;/code&gt;，由於上述流程，我們已經計算出兩邊&lt;code&gt;1、5&lt;/code&gt;與&lt;code&gt;-8、7&lt;/code&gt;的最大子區間分別為&lt;code&gt;1、5&lt;/code&gt;與&lt;code&gt;7&lt;/code&gt;，這時我們還要計算誇兩邊的子區間，這邊我們計算出的結果為&lt;code&gt;1、5&lt;/code&gt;，這時我們可以根據這三個區間&lt;code&gt;[1,5]、[7]、[1,5]&lt;/code&gt;，取這三個中最大值的那個，來當做&lt;code&gt;1,5,-8,7&lt;/code&gt;區間的最大子區間，因為我們取了&lt;code&gt;[7]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;右邊區塊的&lt;code&gt;[4,1,-9,6]&lt;/code&gt;也可以用上述方法，一樣求出最大子區塊為&lt;code&gt;[6]&lt;/code&gt;，最後我們左邊最大子區間為&lt;code&gt;[7]&lt;/code&gt;，右邊最大子區間為&lt;code&gt;[6]&lt;/code&gt;，而我們這邊還要計算交互區間的最大子區間，我們取出&lt;code&gt;[7,4,1]&lt;/code&gt;，然後再將這三個區間進行比較，因為我們這個陣列的最大子區間為&lt;code&gt;[7,4,1]&lt;/code&gt;。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>