<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nodejs on 拿鐵派的馬克 Blog</title>
    <link>https://mark-lin.com/tags/nodejs/</link>
    <description>Recent content in nodejs on 拿鐵派的馬克 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <managingEditor>h091237557@gmail.com (marklin)</managingEditor>
    <webMaster>h091237557@gmail.com (marklin)</webMaster>
    <lastBuildDate>Fri, 08 Mar 2019 19:51:35 +0800</lastBuildDate>
    
        <atom:link href="https://mark-lin.com/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nodejs 之運行機制原理</title>
      <link>https://mark-lin.com/posts/20190308/</link>
      <pubDate>Fri, 08 Mar 2019 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20190308/</guid>
      <description>&lt;p&gt;Nodejs 出來時它的官網寫這以下的描述 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Node.js is a JavaScript runtime built on Chrome’s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js’ package ecosystem, npm, is the largest ecosystem of open source libraries in the world.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;簡而言之 Nodejs 是運行在 V8 javascript 引擎，並且使用 Event driven 與 non-blocking I/O 模式所建立出來的東東。&lt;/p&gt;
&lt;p&gt;而這裡我們就要深入的來理解 Nodejs 的運行機制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nodejs 核心設計 - 非阻塞 I/O 模式&lt;/li&gt;
&lt;li&gt;Nodejs 架構與運行&lt;/li&gt;
&lt;li&gt;Nodejs 為什麼需要使用 thread ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nodejs----io-&#34;&gt;Nodejs 核心設計 - 非阻塞 I/O 模式&lt;/h2&gt;
&lt;p&gt;上面介紹文有提到，它是以 非阻塞 non-blocking I/O 模式所建立出來的，但為什麼它要選用非阻塞 I/O 呢 ?&lt;/p&gt;
&lt;p&gt;它想解決什麼問題呢 ?&lt;/p&gt;
&lt;p&gt;它最原始想解決的就是 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;阻塞 I/O 模式在大併發請求下的貧頸。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先我們先來看看傳統的阻塞 blocking I/O 模式問題&lt;/p&gt;
&lt;h3 id=&#34;-io-blocking-io-bio-&#34;&gt;阻塞 I/O (Blocking I/O BIO) 伺服器的運行&lt;/h3&gt;
&lt;p&gt;首先我們先說明一下 I/O 這東西，I/O 是指輸入與輸出，只要是與外部記憶體或設置的溝通都算是 I/O 操作，像進行 http 請求或是讀檔案這種，都算是 I/O 操作。&lt;/p&gt;
&lt;p&gt;而所謂的&lt;code&gt;阻塞 I/O&lt;/code&gt;就是指，當執行 I/O 的操作會阻塞，也就是直到操作完成後，才會執行下一段指令，更準備的說法是，&lt;code&gt;阻塞就是指這個 thread 或 process 無法處理其它事情&lt;/code&gt;，就算它 CPU 閒閒的也是一樣。&lt;/p&gt;
&lt;p&gt;下面為一段模擬碼，process 或 thread 會在執行完 socket.read() 取得完資料後，才會執行下一段，這就是阻塞 I/O，而大部份的 I/O 在沒有特別處理的話，都是阻塞 I/O。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 直到讀取完資料後，才會執行下一段。
var data = socket.read();

console.log(data);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而傳統阻塞 I/O 伺服器在收到一個 http(I/O) 後，每一個 http 會開啟一個 thread 或 process 來處，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20190308_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;為什麼呢 ?&lt;/p&gt;
&lt;p&gt;因為每當建立一個連線，一定需要一個 process 來監聽 socket，然後那個 process 就阻塞住。如下程式碼，這一段在建立連線前，就需要先執行，而等到資料進來時，才會往下做。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;request &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; socket.read(); &lt;span style=&#34;color:#75715e&#34;&gt;// 這裡會阻塞住
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;doSomething(request); &lt;span style=&#34;color:#75715e&#34;&gt;//有資料時才執行
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此大部份的傳統阻塞 I/O 伺服器在收到一個 http 請求後，都會開啟一個 thread 或 process 來進行處理，因為這樣就不會卡住了。&lt;/p&gt;
&lt;h3 id=&#34;-io-&#34;&gt;阻塞 I/O 伺服器的問題&lt;/h3&gt;
&lt;p&gt;上面有提到傳統的阻塞 I/O 伺服器每收到一個 http 請求就會開啟一個 thread 來運行。&lt;/p&gt;
&lt;p&gt;這就是問題。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因為 thread 是很貴的資源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主要有以下的原因 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 linux 系統下 thread 本質就是 process 創建和銷毀都非常的耗成本。&lt;/li&gt;
&lt;li&gt;它會暫用不少的 memory。&lt;/li&gt;
&lt;li&gt;thread 的切換上下文成本很高。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以當如果連線數來個十萬或上百萬的，那麼阻塞式 I/O 一定會倒給你看。&lt;/p&gt;
&lt;p&gt;而這也是為什麼 Nodejs 要以&lt;code&gt;非阻塞 I/O (Non-Blocking)&lt;/code&gt;為核心來進行設計。&lt;/p&gt;
&lt;h3 id=&#34;-io--nonblocking-io-nio&#34;&gt;非阻塞 I/O 模式 (Non-Blocking I/O NIO)&lt;/h3&gt;
&lt;p&gt;由於阻塞 I/O 有以下所提到的問題，因此後來就發展出所謂的非阻塞 I/O 模式 (Non-Blocking I/O NIO) 模式，他想完成的事情如下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20190308_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;而實作 NIO 的設計模式有以下兩個 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reactor&lt;/li&gt;
&lt;li&gt;proactor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我們此篇的主軸為&lt;code&gt;Reactor&lt;/code&gt;，主要的原因為 Nodejs 主要就是使用 Reactor 來建立它的架構。( proactor 會開另一篇 )&lt;/p&gt;
&lt;p&gt;它主要的概念圖就是咱們所謂的 event loop 機制，如下圖 :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20190308_3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;簡單的說它有一個 Event loop 會一直不斷的去 Event Queue 中 check 是否有 I/O 事件，如果有的話就將它丟到指定的 handler 去，如下概念碼。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(true){

    events &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sockets.fetchIOEvents();
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (var i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; events.length; i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(events[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;write&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;){
            writeHandler(event[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].data);
        }
        
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(events[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;read&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;){
            readHandler(event[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].data);
        }
        
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(events[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;accept&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;){
            acceptHandler(event[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].dadta);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但這裡有問題想問問。&lt;/p&gt;
&lt;h4 id=&#34;-io--&#34;&gt;為什麼可以取得到 I/O 事件呢 ?&lt;/h4&gt;
&lt;p&gt;上面不是有提到要從 socket 中取得資料，需要使用 linux 底層的 socket.read() 阻塞方法，那為什麼概念碼的 fetchIOEvents 可以取得到所有 socket 的事件呢 ? 不是一個 process 只能監聽一個 socket 嗎 ?&lt;/p&gt;
&lt;p&gt;主要的答案在於 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;多路複用（ Multiplexing ) 技術，而各系統的實作為 epoll(linux)、kqueue(Mac)、IOCP(Window)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這幾個方法的功用就是，它們可以幫我們監控所有 socket 的 I/O 操作，當某些 socket 有事件產生時(ex. 有資料進來時)會自動的將它相關資料推送到一個 event queue 中，然後你可以使用它提供的方法，來取得事件相關資料。&lt;/p&gt;
&lt;p&gt;我們這裡以 epoll 來說明它的使用方法，基本上它提供三個方法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;epoll_create&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size); 
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;epoll_ctl&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; epfd, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; op, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fd, &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;epoll_event&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;event); 
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;epoll_wait&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; epfd, &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;epoll_event&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;events,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; maxevents, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; timeout);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;epoll_create : 它就是建立一個 epoll 對像，然後它的 size 就是 kernal 保証可以監控的最大 file descitpor 數。&lt;/li&gt;
&lt;li&gt;epoll_ctl : 它就是將 socket 加入到 epoll 的監控中的方法。&lt;/li&gt;
&lt;li&gt;epoll_wait : 它在給定的 timeout 時間內，如果監控的 socket有產生事件，則會返回事件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面為我們使用它的範例碼，這個範例的功用就是讓 epoll 監聽你有註冊的 socket，然後當有事件產生時，就可能從 epoll_wait 取得相對應的 socket 與事件，最後再將此事件執行到對應的 event handler。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;events&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;];

&lt;span style=&#34;color:#75715e&#34;&gt;// 建立一個 epoll 用 file descriptor
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;epollfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; epoll_create();

&lt;span style=&#34;color:#75715e&#34;&gt;// 註冊讓 epoll 監聽某 socket 的 EPOLLIN 事件
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;epoll_ctl(epollfd, EPOLL_CTL_ADD, socket, EPOLLIN);

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(true){

    &lt;span style=&#34;color:#75715e&#34;&gt;// 如果 epoll queue 中有事件產生，則會回傳產生事件的 socket 與 events。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    have_events_fds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; epoll_wait( epollfd, events, MAX_EVENTS, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; );

    &lt;span style=&#34;color:#75715e&#34;&gt;// 讀取每個有產生事件的 socket，並執行對應的 eventHandler。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; have_events_fds; i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;){
        eventHandler(events[n]);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;-io--io-&#34;&gt;阻塞 I/O 與非阻塞 I/O 的比較圖&lt;/h3&gt;
&lt;p&gt;這章節最後，我們來看看阻塞 I/O 與非阻塞 I/O 的比較圖。&lt;/p&gt;
&lt;p&gt;阻塞 : 監控 socket，然後就開始卡住整個 process，直到有資料進來後才結束。
非阻塞 : 不斷的去問 socket 有沒有資料。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20190308_4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;-&#34;&gt;問個問題，非阻塞不斷的去尋問有沒有資料不會很耗資源嗎 ?&lt;/h4&gt;
&lt;p&gt;嗯對會，所以你實際上看 libuv 程式碼 event loop 這個地方，你會發現注意到，它事實上有給一個 timeout 參數，它會根據某些條件阻塞在那裡，不會一直重複的去問。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(true){
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;…&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;…&lt;/span&gt;

timeout &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((mode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UV_RUN_ONCE &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;ran_pending) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; mode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UV_RUN_DEFAULT)
      timeout &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uv_backend_timeout(loop);

    uv__io_poll(loop, timeout); &lt;span style=&#34;color:#75715e&#34;&gt;// 這裡
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;…&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;…&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;nodejs-&#34;&gt;Nodejs 架構與基本運行&lt;/h2&gt;
&lt;p&gt;Nodejs 的基本組合與運行如下。其中 libuv 就是實現非阻塞 I/O 的核心庫，它讓我們可以跨平台的實現非阻塞 I/O。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20190308_6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;根據上圖如果有一段程式碼執行下去，那它的運行流程如下 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 V8 引擎解析 javascript 語法。&lt;/li&gt;
&lt;li&gt;解析後呼叫對應對 node C++ 程式碼。&lt;/li&gt;
&lt;li&gt;將所有同步的程式碼運行完。&lt;/li&gt;
&lt;li&gt;libuv 建立起 event loop 並且不斷的去輪詢 event queue 來執行那些可以呼叫的異步操作 callback。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我們簡單的看一下範例&lt;/p&gt;
&lt;p&gt;假設我們有一段程式碼如下 :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hi&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;setTimeout&lt;/span&gt;(() =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fuck u&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Mark&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它的運行流程為:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;執行同步程式碼 console.log(&amp;lsquo;Hi&amp;rsquo;)。&lt;/li&gt;
&lt;li&gt;將 setTimeout 事件與 callback 丟到 Event Queue 中。&lt;/li&gt;
&lt;li&gt;執行同步程式碼 console.log(&amp;lsquo;Mark&amp;rsquo;)。&lt;/li&gt;
&lt;li&gt;開啟執行 event loop。&lt;/li&gt;
&lt;li&gt;發現 event queue 中有需要執行的 time 事件，執行 console.log(&amp;lsquo;fuck u&amp;rsquo;)。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以最後輸出的結果為 :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Hi
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Mark
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// fuck u
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;--nodejs--worker-thread--&#34;&gt;這裡問個問題 ~ Nodejs 是單進程的架構，可是為什麼架構圖中最後有 worker thread 的東西呢 ?&lt;/h4&gt;
&lt;p&gt;這就是我們接下來要章節要說明的東西。&lt;/p&gt;
&lt;h2 id=&#34;nodejs--thread-&#34;&gt;Nodejs 為什麼需要使用 thread ?&lt;/h2&gt;
&lt;p&gt;根據&lt;a href=&#34;https://nodejs.org/en/docs/guides/dont-block-the-event-loop/#what-code-runs-on-the-worker-pool&#34;&gt;官方文件&lt;/a&gt;，可以知道，有以下幾個東西需要使用 thread 來處理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU-intensive : &lt;a href=&#34;https://nodejs.org/api/crypto.html&#34;&gt;Crypto&lt;/a&gt;、&lt;a href=&#34;https://nodejs.org/api/zlib.html#zlib_threadpool_usage&#34;&gt;Zlib&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;I/O-intensive : &lt;a href=&#34;https://nodejs.org/api/dns.html&#34;&gt;DNS&lt;/a&gt;、&lt;a href=&#34;https://nodejs.org/api/fs.html#fs_threadpool_usage&#34;&gt;FileSystem&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先來說說 cpu 密集的這兩個&lt;code&gt;Crypto&lt;/code&gt;與&lt;code&gt;Zlib&lt;/code&gt;加密與壓縮套件，為什麼需要丟到 thread 做呢 ? 主要的原因為，基本上正常的運算都是屬於同步程式碼，也就是說會在 event loop 前執行，如果這時運算太花時間，那就代表他會卡住 event loop 運行，那如果是 callback 的呢 ? 它應該是在 event loop 內執行吧 ? 嗯沒錯，但問題就是，當它執行時，它就會卡 event loop，不要忘了 event loop 只是一個 while，然裡面執行的東西還是同步，包含 epoll 操作也是同步且阻塞的。&lt;/p&gt;
&lt;p&gt;那接下來看 I/O-intensive 的&lt;code&gt;DNS&lt;/code&gt;與&lt;code&gt;FileSystem&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我們先來說說&lt;code&gt;FileSystem&lt;/code&gt;的情況。&lt;/p&gt;
&lt;p&gt;首先基本上 I/O 阻塞來源為 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I/O 阻塞來源 = Network I/O + File I/O&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那為什麼在 Nodejs 中，可以做到非阻塞呢 ?&lt;/p&gt;
&lt;p&gt;因為他們兩個都有解法可處理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;libuv 解決 I/O 阻塞方法 = Network I/O (epoll) + File I/O (thread)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Network I/O 可以用 epoll 來處理&lt;/p&gt;
&lt;h4 id=&#34;-file-io--epoll--&#34;&gt;但重點是為什麼 File I/O 無法用 epoll 來處理呢 ?&lt;/h4&gt;
&lt;p&gt;目前筆者只知道，如果你將檔案的 file descriptor 註冊到 epoll 中，會發生以下的錯誤:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EPERM  The target file fd does not support epoll.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;簡單來說就是 epoll 不支援檔案類型的 file descriptor 監控。&lt;/p&gt;
&lt;p&gt;這也是為什麼 Nodejs 實際上會偷偷的開幾個 worker thread 來處理 file system 這件事情。&lt;/p&gt;
&lt;h4 id=&#34;file-io--dns--network-io----thread-&#34;&gt;file I/O 可以理解，但為什麼 dns 他不是 network I/O 嗎 ? 那為什麼它還需要 thread 來處理呢。&lt;/h4&gt;
&lt;p&gt;筆者覺得主要的原因在於，DNS 的操作事實上為 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Network I/O + File I/O&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這或需就是為什麼它需使用 thread 來完成非阻塞 I/O。&lt;/p&gt;
&lt;p&gt;不過以上只是推測，不代表是正確答案。&lt;/p&gt;
&lt;h3 id=&#34;-nodejs-&#34;&gt;注意 nodejs 只能說架構是非阻塞，但不代表不會阻塞&lt;/h3&gt;
&lt;p&gt;我們有以下兩個假設:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thread number: 3&lt;/li&gt;
&lt;li&gt;test.txt 讀檔時間: 2 sec&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那你執行以下的程式碼。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hrtime&lt;/span&gt;();

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
  ((&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;) =&amp;gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;fs&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readdir&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test.txt&amp;#39;&lt;/span&gt;, () =&amp;gt; {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hrtime&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;);
      &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;util&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;read file %d finished in %ds&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e9&lt;/span&gt;));
    });
  })(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後你就會發結果如下，實際上在讀三個檔案時，就已經阻塞了，原因在於我們只有三個 thread，它們都在忙錄，因此第四個才會需要花 4 秒才完成。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;read file 1 finished in 2 sec
read file 2 finished in 2 sec
read file 3 finished in 2 sec
read file 4 finished in 4 sec
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;heading&#34;&gt;參考資料&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5a5e03eef265da3e5033c5b9&#34;&gt;Node.js design pattern : Reactor (Event Loop)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000003063859&#34;&gt;Linux IO模式及 select、poll、epoll详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.libuv.org/en/v1.x/design.html&#34;&gt;libuv 官方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/35039878&#34;&gt;Node.js源码解析：深入Libuv理解事件循环&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tsy77/blog/issues/11&#34;&gt;libuv源码-Event Loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.eebreakdown.com/2016/09/nodejs-eventemitter.html&#34;&gt;非同步程式碼之霧：Node.js 的事件迴圈與 EventEmitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.future-processing.pl/blog/on-problems-with-threads-in-node-js/&#34;&gt;&lt;a href=&#34;https://www.future-processing.pl/blog/on-problems-with-threads-in-node-js/&#34;&gt;https://www.future-processing.pl/blog/on-problems-with-threads-in-node-js/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Node設計模式之命令模式 ( Command )</title>
      <link>https://mark-lin.com/posts/20170611/</link>
      <pubDate>Sun, 11 Jun 2017 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20170611/</guid>
      <description>&lt;p&gt;本文中我們將會知道兩件事件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;為什麼要使用命令模式呢 ? 
什麼是命令模式呢?
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;-&#34;&gt;為什麼要使用命令模式呢 ?&lt;/h2&gt;
&lt;p&gt;我們先來想想，假設我們要做一個簡單的計算機的功能，然後他有提供以下方法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;加&lt;/li&gt;
&lt;li&gt;減&lt;/li&gt;
&lt;li&gt;乘&lt;/li&gt;
&lt;li&gt;除&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然後實際上執行大概會長這樣 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;add(5) =&amp;gt; current = 5
sub(3) =&amp;gt; current = 2
mul(3) =&amp;gt; current = 6
div(3) =&amp;gt; current = 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這樣我們大概會寫個最簡單的程式碼，大概會長成下面這樣:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Calculator&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;(){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sub&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;mul&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;getCurrent&lt;/span&gt;(){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;;
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Calculator&lt;/span&gt;();
&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sub&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;mul&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getCurrent&lt;/span&gt;());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;-1&#34;&gt;這有啥問題呢 ?&lt;/h3&gt;
&lt;p&gt;如果我們這時要增加一個&lt;code&gt;undo&lt;/code&gt;的功能呢 ? 上面的程式碼的結構就無法做這種功能了，因為它的&lt;code&gt;緊偶合&lt;/code&gt;了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;緊耦合白話文就是你們(模組和類別)關係太好囉 ~ 要修理 A 的話 B 也要先打一頓才行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而我們上面範例關係太好的兩位可以定義為『行為請求者』與『行為實現者』，行為請求就是指我們外面指接&lt;code&gt;client.add(5)&lt;/code&gt;，而行為實現者則為&lt;code&gt;add&lt;/code&gt;方法裡面的實作。&lt;/p&gt;
&lt;p&gt;也因為上面這種狀況，所以我們無法做&lt;code&gt;undo&lt;/code&gt;功能，如果我們想要奇耙一點在這案例做排程或是記錄請求日誌的話，也都很難實現。&lt;/p&gt;
&lt;p&gt;所以解法就是 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;將『行為請求者』與『行為實現者』的解耦合，也就是所謂的『命令模式』。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;heading&#34;&gt;什麼是命令模式呢?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;就是將『行為請求者』與『行為實現者』分開模式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下圖中，我們會在請求者與實現者的中間增加一個東西，叫作&lt;code&gt;呼叫者&lt;/code&gt;，你也可以稱為&lt;code&gt;Invoker&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;這張圖的概念你可以簡單的想成，你去一間餐館食飯，然後你就是『請求者』，負責接受點菜的服務生就是『呼叫者』，而最後實際做飯的就是『實現者』。&lt;/p&gt;
&lt;p&gt;那為什麼這叫命令模式呢 ? 因為我們會將所有的請求，都封成一個『命令 command 』物件，接下來的服務生，會將這此命令寫在紙上，然後再由他來決定什麼時後要丟給廚師，而客戶如果要取消命令時，也都會由服務生這裡來經手。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20180228-01-command.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;heading1&#34;&gt;程式碼實作&lt;/h3&gt;
&lt;p&gt;接下來我們要將上面的程式碼來進行修改，首先我們會多增加上面那張圖中的&lt;code&gt;Invoker&lt;/code&gt;類別，記好他就是服務生，用來叫廚師做飯的。&lt;/p&gt;
&lt;p&gt;這段程式碼中，&lt;code&gt;execute&lt;/code&gt;就是用來實際叫廚師做飯的方法，而&lt;code&gt;undo&lt;/code&gt;就是用來執行取消這命令的方法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Invoker&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;commands&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [];
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;commands&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;);

        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Execute command : &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; , and result : &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;undo&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;commands&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;undo&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;);

        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Execute undo and result : &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;getCurrent&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後下面是我們每一個命令，這裡每一個都是廚師，然後裡面都有定義好這個命令實際要做的事情與取消時要做的事情，由於我是用 JS 這種語言來撰寫範例，所以沒有個抽象類別或 介面，不然每一個命令應該都會繼承一個叫 Command 的類別或介面。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AddCommand&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Add&amp;#34;&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;undo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SubCommand&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sub&amp;#34;&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;undo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MulCommand&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mul&amp;#34;&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;undo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DivCommand&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Div&amp;#34;&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;undo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最後執行時，我們會麻煩 invoker (服務生)，叫實際執行者 (廚師) 進行工作，並且服務生那裡都有記住我們要點的菜，如果臨時想取消，就很簡單囉。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;invoker&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Invoker&lt;/span&gt;();
&lt;span style=&#34;color:#a6e22e&#34;&gt;invoker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AddCommand&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)); &lt;span style=&#34;color:#75715e&#34;&gt;// current =&amp;gt; 5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;invoker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SubCommand&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)); &lt;span style=&#34;color:#75715e&#34;&gt;// current =&amp;gt; 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;invoker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MulCommand&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)); &lt;span style=&#34;color:#75715e&#34;&gt;// current =&amp;gt; 6
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;invoker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DivCommand&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)); &lt;span style=&#34;color:#75715e&#34;&gt;// current =&amp;gt; 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;invoker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;undo&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;// current =&amp;gt; 6
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;invoker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getCurrent&lt;/span&gt;());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading2&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;今天我們學習了『命令模式』，它主要的功能與目的如下 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;就是將『行為請求者』與『行為實現者』分開的模式，為了更彈性操作命令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你只要記得餐廳的概念就可以理解命令模式的實作了。&lt;/p&gt;
&lt;p&gt;再來我們談談它的優缺點。&lt;/p&gt;
&lt;p&gt;它最主要的優點是，可讓我們將『行為要求者』與『行為執行者』分開，使得我們可以做更多的運用，例如取消、寫日誌、交易事務 (就是要麻所有命令都執行要麻不要執行)。&lt;/p&gt;
&lt;p&gt;但缺點呢 ?
不能否認程式碼的複雜度增加與變長，這也代表，不是所有類似這種命令的功能都需要用到這種模式，在設計一個系統時最怕『過度設計』，所以如果你們確定你的系統是需要『對命令進行特殊的動作時(ex: undo)』時，才需要使用到這種模式。&lt;/p&gt;
&lt;p&gt;像我剛剛的計算機範例，如果不需要&lt;code&gt;undo&lt;/code&gt;，那用最一開始的範例就夠了 ~~&lt;/p&gt;
&lt;h2 id=&#34;heading3&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;大話設計模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;Node.js設計模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.jikexueyuan.com/project/java-design-pattern/command-pattern.html&#34;&gt;極客學院-命令模式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Node設計模式之策略模式 ( Stratgey )</title>
      <link>https://mark-lin.com/posts/20170610/</link>
      <pubDate>Sat, 10 Jun 2017 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20170610/</guid>
      <description>&lt;p&gt;本篇文章中，我們想要知道以下兩件事情 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;為什麼要使用它呢 ?&lt;/li&gt;
&lt;li&gt;什麼是策略模式呢 ?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;-&#34;&gt;為什麼要使用策略模式呢 ?&lt;/h2&gt;
&lt;p&gt;我們簡單的寫一下，一個多需要用不同方法的登入方法，它可以選擇使用&lt;code&gt;google&lt;/code&gt;、&lt;code&gt;facebook&lt;/code&gt;的方法，來進行登入。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google&amp;#34;&lt;/span&gt;) {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;doGoogleLoginSomething&lt;/span&gt;();
            &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google login process&amp;#34;&lt;/span&gt;);
        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;facebook&amp;#34;&lt;/span&gt;) {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;doFbLoginSomething&lt;/span&gt;();
            &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;facebook login process&amp;#34;&lt;/span&gt;);
        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;doSomething&lt;/span&gt;();
            &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;custom login process&amp;#34;&lt;/span&gt;);
        }
    }
}


&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那上面這段程式碼中，有那些缺點呢 ?&lt;/p&gt;
&lt;p&gt;首先第一個，它包含了很多的 if else 判斷，這樣反而增加了該函數的邏輯分支。&lt;/p&gt;
&lt;p&gt;第二個為該函數缺泛彈性，如果你想增加&lt;code&gt;twitter&lt;/code&gt;的登入，那就必須修改這函數的內部實作，這樣違反了&lt;code&gt;開放封閉原則&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;開放封閉原則 : 白話文就是當你增加新功能時，盡量不修改原有的程式碼。&lt;/p&gt;
&lt;p&gt;好處 : &lt;code&gt;較好維護&lt;/code&gt;、&lt;code&gt;較好測試&lt;/code&gt;、&lt;code&gt;可重複使用&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以說，當碰到這種情況時，就可以使用策略模式囉 ~&lt;/p&gt;
&lt;p&gt;策略模式簡單的來說，就是為了處理以下的情況 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;當使用者有相同的行為，但不同的場景時，有不同的方法。&lt;/p&gt;
&lt;p&gt;例如 : 使用者想要進行登入，但我們可以使用&lt;code&gt;google&lt;/code&gt;、&lt;code&gt;facebook&lt;/code&gt;等不同的方法來登入。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在白話文一點就是 : 當你有大量的&lt;code&gt;if else&lt;/code&gt;或&lt;code&gt;switch&lt;/code&gt;就可以使用策略模式了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;-1&#34;&gt;策略模式是什麼 ?&lt;/h2&gt;
&lt;p&gt;接下來我們就要使用策略模式來修改上面的程式碼，但在開始前，我們要先知道策略模式是什麼。&lt;/p&gt;
&lt;p&gt;簡單的說，它的定義如下 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;定義一系列的演算法，把它們一個個封裝起來，並且可以相互替換。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以我們上面登入的範例來看，&lt;code&gt;login&lt;/code&gt;裡面的每一種登入方法就是一種演算法，但他都丟在裡面，所以我們策略模式就是要將他，一個一個封裝起來，並且可以相互的替換。&lt;/p&gt;
&lt;p&gt;如下面的程式碼，我們將每一個登入的演算法都封裝起來，然後在需要那個的時後，就使用那個。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;stragtegy&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;stragtegy&lt;/span&gt;();
    }
}


&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;loginStrategy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;fb&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){
        &lt;span style=&#34;color:#a6e22e&#34;&gt;doFbLoginSomething&lt;/span&gt;();
    },
    &lt;span style=&#34;color:#a6e22e&#34;&gt;google&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){
        &lt;span style=&#34;color:#a6e22e&#34;&gt;doGoogleLoginSomething&lt;/span&gt;();
    },
    &lt;span style=&#34;color:#a6e22e&#34;&gt;custom&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){
        &lt;span style=&#34;color:#a6e22e&#34;&gt;doSomething&lt;/span&gt;();
    }
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;loginStrategy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fb&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先我們先來看看&lt;code&gt;可維護性&lt;/code&gt;，上面的程式碼中，我們假設要新增一個&lt;code&gt;twitter&lt;/code&gt;，那你只需要在&lt;code&gt;loginStrategy&lt;/code&gt;裡新增一個&lt;code&gt;twitter&lt;/code&gt;的策略，這樣就不會動到主題的&lt;code&gt;login&lt;/code&gt;函數，以防止，當你修改了&lt;code&gt;login&lt;/code&gt;會影響到其它登入方法的問題。&lt;/p&gt;
&lt;p&gt;再來來看看&lt;code&gt;可測試性&lt;/code&gt;，我們只需要&lt;code&gt;mock&lt;/code&gt;你要測試的策略，然後在將他丟到&lt;code&gt;login&lt;/code&gt;裡面，進行測試，非常的簡單，如果是沒用策略模式的程式碼，我還真的要動腦想一下著麼寫&lt;code&gt;單元測試&lt;/code&gt;了。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;上面我們簡單的用登入系統的例子，來說明策略模式，在 node 中，有一個叫&lt;code&gt;passport js&lt;/code&gt;的東西，就是使用策略模式，來實作登入系統的實例，筆上之前就有寫過一篇關於 passport 的文章，可參考參考。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mark-lin.com/posts/20170609/&#34;&gt;Passport.js 之 Hello 你好嗎 ~&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading1&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dickeylth.github.io/2013/10/30/JavaScriptDesignPatterns-StrategyPattern/&#34;&gt;JavaScript中的设计模式(4)——策略模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;Nodejs設計模式-Mario Casciaro 著&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Node之可擴展性 --- 訊息佇列 Message queue (RabbitMQ)</title>
      <link>https://mark-lin.com/posts/20170607/</link>
      <pubDate>Wed, 07 Jun 2017 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20170607/</guid>
      <description>&lt;p&gt;在前幾篇文章中，我們說明了如何將系統進行&lt;code&gt;擴展&lt;/code&gt;，而接下來呢，我們將要說明如何使用&lt;code&gt;訊息佇列&lt;/code&gt;來進行整合，事實上之前的每篇文章中都要提到一個名稱&lt;code&gt;IPC通信&lt;/code&gt;，其中裡面就包含了&lt;code&gt;訊息佇列 (message queue)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;訊息佇列基本上是用來&lt;code&gt;行程間溝通&lt;/code&gt;或是&lt;code&gt;同行程內不同執行序溝通&lt;/code&gt;，他提供了&lt;code&gt;異步&lt;/code&gt;的溝通協定，這個意思就是指當你傳送一堆訊息給 A 時，A 可以不用即時的來處理這些訊息，這也代表這訊息可堆積再處理，白話文就是 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;訊息接受者如果爆了，我訊息發送者還是可以一直發送訊息，等你好了，你還是可以取得完整的訊息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我們可以想想&lt;code&gt;http協定&lt;/code&gt;他是一個&lt;code&gt;同步協定&lt;/code&gt;，這也代表你傳送一個&lt;code&gt;request&lt;/code&gt;必須等待伺服器發送&lt;code&gt;response&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;至於我們為什麼要用&lt;code&gt;message queue&lt;/code&gt;請參考下面這篇文章，他真的已經寫的很完整了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.oschina.net/translate/top-10-uses-for-message-queue&#34;&gt;使用訊息佇列的十個理由&amp;mdash;簡中&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然後我們先簡單的說明一下&lt;code&gt;訊息系統&lt;/code&gt;的基礎。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;訊息系統架構&lt;/h2&gt;
&lt;p&gt;基本上分為以下兩種 :&lt;/p&gt;
&lt;h3 id=&#34;-peertopeer&#34;&gt;對等式 (peer-to-peer)&lt;/h3&gt;
&lt;p&gt;在對等式的架構下，每一個節點都直接將訊息傳送給接受者，這種方法基本上會比較複雜，因為他還要決定各自結點的的通訊協定，但還是有一些優點 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免單點故障。&lt;/li&gt;
&lt;li&gt;和中介者模式比較來少了中間一層，速度應該是比較快。&lt;/li&gt;
&lt;li&gt;彈性較高。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下為&lt;code&gt;對等式架構的圖示&lt;/code&gt; :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170722-6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;zeroMQ 他可以幫助我們建立&lt;code&gt;對等式架構&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;-message-broker&#34;&gt;中介者模式 (message broker)&lt;/h3&gt;
&lt;p&gt;而&lt;code&gt;中介者模式&lt;/code&gt;就是所有的節點，都會連結到某個&lt;code&gt;broker&lt;/code&gt;，一切都由&lt;code&gt;broke&lt;/code&gt;來處理，每個節點不需要知道，我和誰溝通，只需要知道要傳送的訊息內容即可。但缺點就是上面對等式的優點。&lt;/p&gt;
&lt;p&gt;以下為&lt;code&gt;中介者架構&lt;/code&gt;的圖示 :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170722-5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RabbitMQ 就是專門用來建立這個架構的東東。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接下來的文章中，我們將要先來實作一些&lt;code&gt;rabbitmq&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;rabbit-mq&#34;&gt;Rabbit MQ&lt;/h2&gt;
&lt;p&gt;在上面的章節中，我們應該有說到，分佈式架構除了&lt;code&gt;對等式架構&lt;/code&gt;外，還有一個是&lt;code&gt;中介者架構&lt;/code&gt;，中介者的主要作用就是讓訊息接受者與傳送者之間完全的解偶，而&lt;code&gt;rabbitmq&lt;/code&gt;就是一個支援&lt;code&gt;AMQP (Advanced Message Queuing Protocol)協議&lt;/code&gt;的中間介者。&lt;/p&gt;
&lt;p&gt;如下圖所示，它就是中間綠綠那個，我們稱他為&lt;code&gt;中介者 broker&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170722-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;amqp-&#34;&gt;那&lt;code&gt;AMQP&lt;/code&gt;是什麼 ?&lt;/h3&gt;
&lt;p&gt;它是一種&lt;code&gt;協議&lt;/code&gt;，AMQP 是一個提供統一訊息服務的應用層標準協議(osi第七層)，也就是設定於其它應用軟體之間的通訊，像 http、https、ftp 等都是應用層協議。&lt;/p&gt;
&lt;p&gt;根據該協議，客戶端與訊息中間件(broker)可傳送訊息，不受客戶端/中間件不同產品，不同開發語言的條件限制。&lt;/p&gt;
&lt;h3 id=&#34;heading1&#34;&gt;它有三個總要概念&lt;/h3&gt;
&lt;h4 id=&#34;-queue-&#34;&gt;佇列 (queue) :&lt;/h4&gt;
&lt;p&gt;這東東它是儲存訊息的架構，然後裡面的訊息它會被客戶端拿走。一個佇列可能會推多個客戶端取走訊息，這時處理的方式和我們之前說的負載平衡差不多。&lt;/p&gt;
&lt;p&gt;佇列它還有以下三種特性 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可延續性 : 意即若 broker 重新啟動時，則佇列也自動重新建立。那裡面的訊息著麼辦呢 ? 只有被示為需保訊的訊息，才會存入磁碟，並於重啟時還原。&lt;/li&gt;
&lt;li&gt;專用性 : 一個佇列可綁定特定的訂閱著，若彼此連線關閉時，則該佇列會說掰掰。&lt;/li&gt;
&lt;li&gt;自動刪除 : 當有沒任何訂閱者連線時，便刪除佇列。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;--exchange--&#34;&gt;交換器 ( exchange ) :&lt;/h4&gt;
&lt;p&gt;他主要的功能是&lt;code&gt;將訊息傳輸送到一個或多個佇列&lt;/code&gt;，這個東西就是放在&lt;code&gt;producer&lt;/code&gt;與&lt;code&gt;queue&lt;/code&gt;之間，架構大概長的如下圖 :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170722-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這邊我們會有一個問題，那就是為什麼需要這個 exchange 而不是直接&lt;code&gt;producer&lt;/code&gt;與&lt;code&gt;quenu&lt;/code&gt;間溝通就好呢 ? 這點我們後面在來說明。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;--bind--&#34;&gt;綁定器 ( bind ) :&lt;/h4&gt;
&lt;p&gt;這個就是上面的交換器與佇列之間的連結&lt;/p&gt;
&lt;p&gt;以上的東西都會被中介者管理，它會建立一個抽象的&lt;code&gt;通道&lt;/code&gt;，用於維護與中介者之間的通訊狀態。&lt;/p&gt;
&lt;h2 id=&#34;-rabiit-mq-mac&#34;&gt;使用 Rabiit MQ (mac)&lt;/h2&gt;
&lt;p&gt;首先我們要先安裝 rabbitmq :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew update 
brew install rabbitmq
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然後安裝好後，我們需要去系統的&lt;code&gt;.zsrch&lt;/code&gt;或&lt;code&gt;.bashrc&lt;/code&gt;設置路徑，這樣我們才能在 terminal 上執行他的指令。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PATH=$PATH:/usr/local/sbin
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然後我們就可以執行下列指令開啟&lt;code&gt;rabbitmq server&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rabbitmq-server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果看到下列的出輸結果，則代表開啟成功。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
              RabbitMQ 3.6.9. Copyright (C) 2007-2016 Pivotal Software, Inc.
  ##  ##      Licensed under the MPL.  See http://www.rabbitmq.com/
  ##  ##
  ##########  Logs: /usr/local/var/log/rabbitmq/rabbit@localhost.log
  ######  ##        /usr/local/var/log/rabbitmq/rabbit@localhost-sasl.log
  ##########
              Starting broker...
 completed with 10 plugins.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果要關啟請執行下列指令，而不要使用&lt;code&gt;alt + c&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rabbitmqctl stop
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下來我們就安裝 node 的 rabbitmq 的 lib &lt;code&gt;ampqplib&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save amqplib
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;rabiitmq-producer--queue-&#34;&gt;使用rabiitmq實作一個 Producer =&amp;gt; Queue 的架構&lt;/h3&gt;
&lt;p&gt;接下來我們從最簡單的使用開始，我們會簡單的實作如下圖的架構，共有三個實體&lt;code&gt;producer&lt;/code&gt;、&lt;code&gt;queue&lt;/code&gt;、&lt;code&gt;consume&lt;/code&gt;，其中&lt;code&gt;queue&lt;/code&gt;現階段就是我們的&lt;code&gt;rabbitmq server&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170722-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先我們會先建立一個&lt;code&gt;producer&lt;/code&gt;來負責產生訊息，從下面的程式碼我們可以知道，它需要先連線到我們的&lt;code&gt;rabbitmq server&lt;/code&gt;，並且建立一個通道，然後，我們可以指定要將資料送到&lt;code&gt;特定的queue&lt;/code&gt;，而我們 queue 取名為&lt;code&gt;mark&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;其中，下面的程式碼中，比較需要注意的下面這行，這行是會判斷該 queue 是否存在，如果不存在則建立，並且&lt;code&gt;durable : false&lt;/code&gt;代表的意思為&lt;code&gt;當 queue 重開裡面的資料會消失&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ch.assertQueue(quenu_name, {durable: false});
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;amqp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;amqplib/callback_api&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;amqp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;amqp://127.0.0.1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;conn&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;connect amqp server !&amp;#34;&lt;/span&gt;);

    &lt;span style=&#34;color:#a6e22e&#34;&gt;conn&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;createChannel&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;quenu_name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mark&amp;#34;&lt;/span&gt;;

        &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;assertQueue&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;quenu_name&lt;/span&gt;, {&lt;span style=&#34;color:#a6e22e&#34;&gt;durable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;});

        &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendToQueue&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;quenu_name&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello Mark&amp;#39;&lt;/span&gt;));
        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Send a message&amp;#39;&lt;/span&gt;);
    })
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再來我們來實作&lt;code&gt;consumer&lt;/code&gt;來當作我們訊息的接受者，一樣也是需要去連線到&lt;code&gt;radditmq server&lt;/code&gt;和通道，然後會監聽這個通道所傳下來的訊息。&lt;/p&gt;
&lt;p&gt;其中我們的 &lt;code&gt;ch.consume&lt;/code&gt;有個參數是&lt;code&gt;{noAck: true}&lt;/code&gt;，代表這如果該&lt;code&gt;channel&lt;/code&gt;不會使用&lt;code&gt;act&lt;/code&gt;來進行確認，而如果是 false 它代表的意思為，如果中介者未收到 ack (確認)，則訊息就會被保留在佇列裡以待再次處理。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;amqp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;amqplib/callback_api&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;amqp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;amqp://127.0.0.1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;conn&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;conn&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;createChannel&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;queue_name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mark&amp;#34;&lt;/span&gt;;

        &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;assertQueue&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;queue_name&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;durable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; });
        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Waitting the meesages&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;consume&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;queue_name&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt;) {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Received the msg : &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);

        }, {&lt;span style=&#34;color:#a6e22e&#34;&gt;noAck&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;});
    })
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最後我們來執行兩次&lt;code&gt;producer&lt;/code&gt;，然後再打開&lt;code&gt;consumer&lt;/code&gt;來接受資料，你會發現，他還是接受的得，而且二次傳的資料都有收到，這就是我們前面有提供的&lt;code&gt;message quenue&lt;/code&gt;的優點 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;consumer 如果爆了，我 producer 還是一直可以發送資料，等你好了，你還是可以取得完整的資料。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這邊我們提出一個問題。&lt;/p&gt;
&lt;h4 id=&#34;-quenue--&#34;&gt;那 quenue 應該有最大值吧，不然一直沒有訊息流出，遲早會爆的吧 ?&lt;/h4&gt;
&lt;p&gt;嗯沒錯，所以&lt;code&gt;radditmq&lt;/code&gt;它有提供兩個方法來設定每個&lt;code&gt;queue&lt;/code&gt;的最大值 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 policy 來進行設定。&lt;/li&gt;
&lt;li&gt;使用參數來設定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我們簡單的使用參數來限定，下面指令設定 quenue 最大為&lt;code&gt;10 byte&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ch.assertQueue(queue_name, { durable: false, maxLength: 10  });
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那如果 queue 超過&lt;code&gt;10 byte&lt;/code&gt;後會如何呢 ?&lt;/p&gt;
&lt;p&gt;我們實際執行看看就知道，首先每 0.5 秒傳送一個數字給 queue 結果如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Send a message:1
Send a message:2
Send a message:3
Send a message:4
Send a message:5
Send a message:6
Send a message:7
Send a message:8
Send a message:9
Send a message:10
Send a message:11
Send a message:12
Send a message:13
Send a message:14
Send a message:15
Send a message:16
Send a message:17
Send a message:18
Send a message:19
Send a message:20
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然後我們 consumer 接收的結果如下 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Received the msg : 11
Received the msg : 12
Received the msg : 13
Received the msg : 13
Received the msg : 14
Received the msg : 15
Received the msg : 16
Received the msg : 17
Received the msg : 18
Received the msg : 19
Received the msg : 20
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;從上面的結果可知，因為每個單字為 1 byte，所以當 queue 儲放了前十個數字後，就超過 10 byte了，然後它將先進來的就先把他刪除，所以結果才能如上面所示，只收到 11 以後的數字。&lt;/p&gt;
&lt;h3 id=&#34;rabiitmq-producer--exchange--queue-&#34;&gt;使用rabiitmq實作一個 Producer =&amp;gt; Exchange =&amp;gt; Queue 的架構&lt;/h3&gt;
&lt;p&gt;實際上在 rabbitmq 中，我們的 producer 完全不會直接傳送訊息給 queue，producer 完全不知道會傳給那個 queue ，而是透過 exchange 來進行處理，而這邊就準備回答我們上面問的一個問題。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;為什麼要有 exchange 呢 ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我在 quora 發現也有人有相同的問題 (&lt;a href=&#34;https://www.quora.com/Why-does-RabbitMQ-have-both-exchanges-and-queues&#34;&gt;Why does RabbitMQ have both exchanges and queues?&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;然後我發現有一個老兄的說明很傳神，我簡單的說明一下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;想像一下你在 app store ，當你進入店內後，有一位服務員問你說 &amp;ldquo;你需要什麼呢 ? &amp;quot; ，然我回答說 &amp;ldquo;我要尋找耳機&amp;rdquo;，然後該名服務員就將你引導到處理耳機的 queue ，接下來下一客人進來服務員就問 &amp;ldquo;你需要什麼呢 ?&amp;rdquo; ，然後該名客人回答 &amp;ldquo;我要修理我的電腦&amp;rdquo;，然後服務員就將它引導到處理修改電腦的 queue 去處理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以根據那位老兄的說明，你可以發現&lt;code&gt;服務員&lt;/code&gt;就是我們的&lt;code&gt;Exchange&lt;/code&gt;，如果沒有了它，那就代表這每一位進來店裡的老兄，只能自已去尋找所需要的 queue ，而且還可能找錯，那是不是很浪費時間呢 ?&lt;/p&gt;
&lt;p&gt;在理解了&lt;code&gt;exchange&lt;/code&gt;功用後，我們就開始來它的實作。&lt;/p&gt;
&lt;p&gt;我們先來畫張圖，你應該會更容易理解，我們等一下做的東西，其中我們先實作 error 那條線，其它的線事實上大同小異。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170722-4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先我們來建立&lt;code&gt;producer&lt;/code&gt;，下面的程式碼中，可以看到我們會建立一個&lt;code&gt;exchange&lt;/code&gt;而不在是&lt;code&gt;queue&lt;/code&gt;，並且我們發送訊息的對像也改為&lt;code&gt;exchange&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;還有我們在發送訊息時，有指定&lt;code&gt;routing_key&lt;/code&gt;，這也代表我們有指定發送到的綁定 routing key 為&lt;code&gt;error&lt;/code&gt;的 queue 。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;amqp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;amqplib/callback_api&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;amqp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;amqp://127.0.0.1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;conn&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;connect amqp server !&amp;#34;&lt;/span&gt;);

    &lt;span style=&#34;color:#a6e22e&#34;&gt;conn&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;createChannel&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exchange_name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;logs&amp;#34;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello mark&amp;#34;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;routing_key&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;;

        &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;assertExchange&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;exchange_name&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;direct&amp;#39;&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;durable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; });
        &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;publish&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;exchange_name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;routing_key&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt;));
        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;send msg: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);
    })
})

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中下面這段程式碼中的&lt;code&gt;direct &lt;/code&gt;代表這個 exchange 的種類，我們必須給定這個 exchange 的類型，用來決定要如何將訊息從 exchange 發送出。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ch.assertExchange(exchange_name, &#39;direct&#39;, { durable:false });
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;它主要有四種類型 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;direct : 會需要設定一個叫&lt;code&gt;routing key&lt;/code&gt;的參數綁定 queue，然後在發送訊息時指定&lt;code&gt;routing key&lt;/code&gt;，exchange 就會將該訊息傳送到指定的 queue (上面範例所使用的)。&lt;/li&gt;
&lt;li&gt;topic : 大至上和 direct 相同，但這裡的&lt;code&gt;routing key&lt;/code&gt;可以用匹配的方式。&lt;/li&gt;
&lt;li&gt;fanout : 此類型的路由規則最簡單，就是收到訊息後，將它發送到所有綁定的佇列中。&lt;/li&gt;
&lt;li&gt;header : 它的路由規則是由&lt;code&gt;header&lt;/code&gt;來判斷，如果要做一些複雜的路由規則，那就用他。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下來我們來看看&lt;code&gt;consumer&lt;/code&gt;的程式碼，如下，我們在綁定 queue 時有指定 routing_key ，就代表這個 consume 只能收到指定的 queue 的訊息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;amqp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;amqplib/callback_api&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;amqp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;amqp://127.0.0.1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;conn&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;conn&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;createChannel&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exchange_name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;logs&amp;#34;&lt;/span&gt;;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;assertExchange&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;exchange_name&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;direct&amp;#39;&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;durable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; });

        &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;assertQueue&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;exclusive&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; }, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;) {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Waiting for messages&amp;#39;&lt;/span&gt;);

            &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;routing_key&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;;
            &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;bindQueue&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;exchange_name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;routing_key&lt;/span&gt;);
            &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;consume&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt;) {
                &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Received msg:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);
                &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;routing key is:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fields&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;routingKey&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);
            }, { &lt;span style=&#34;color:#a6e22e&#34;&gt;noAck&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; });
        })
    })
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後我們就來執行看看，結果如下 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// producer
connect amqp server !
send msg: Hello mark

// consumer
Waiting for messages
Received msg:Hello mark
routing key is:error
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;heading2&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;本篇文章中，我們先簡單的說明了&lt;code&gt;message queue&lt;/code&gt;的概念，它是我們跨進程與執行緒的溝通工具之一，並且它是屬於&lt;code&gt;異步&lt;/code&gt;的架構。&lt;/p&gt;
&lt;p&gt;接下來我們也說明了訊息系統架構，它基本上可分兩類，一種為&lt;code&gt;對等式架構&lt;/code&gt;，而另一種為&lt;code&gt;中介者架構&lt;/code&gt;，前者可以使用&lt;code&gt;zeromq&lt;/code&gt;來建立，而後者可使用&lt;code&gt;rabbitmq&lt;/code&gt;來建立。&lt;/p&gt;
&lt;p&gt;最後呢，我們就開始使用&lt;code&gt;rabbitmq&lt;/code&gt;來進行實作，本文中只簡單的介紹一些基本的使用方式。&lt;/p&gt;
&lt;h2 id=&#34;heading3&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quora.com/Why-does-RabbitMQ-have-both-exchanges-and-queues&#34;&gt;quora-Why does RabbitMQ have both exchanges and queues?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;rabbit 官網&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.gtwang.org/programming/rabbitmq-work-queues-in-python/&#34;&gt;以 RabbitMQ 實作工作佇列（Work Queues）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;Node.js設計模式-著:Mario Casciaro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Node之可擴展性 --- 訊息佇列 Message queue (ZeroMQ)</title>
      <link>https://mark-lin.com/posts/20170608/</link>
      <pubDate>Wed, 07 Jun 2017 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20170608/</guid>
      <description>&lt;p&gt;上一章節中我們有提到&lt;code&gt;rabbitmq&lt;/code&gt;，它是用來建立&lt;code&gt;中介式架構&lt;/code&gt;的&lt;code&gt;broker&lt;/code&gt;，但這種架構有什麼問題呢 ? 那就是分散式架構的頭號公敵單點失效(single point of failure)。&lt;/p&gt;
&lt;p&gt;所以後來就有人提出使用&lt;code&gt;對等式架構&lt;/code&gt;來解決這個問題，這個架構就是會將&lt;code&gt;broker&lt;/code&gt;給移除掉，每一個用戶端同時也是伺服器端，像&lt;code&gt;比特幣&lt;/code&gt;這種應用就是用該結構來處理。&lt;/p&gt;
&lt;p&gt;但相對的，它也有缺點，那就是要建置起來較為複雜，用在大規模的網路上，管理較難、安全性較低。&lt;/p&gt;
&lt;h2 id=&#34;-zeromq--peertopeer&#34;&gt;使用 ZEROMQ 進行對等式架構 (peer-to-peer)實作&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;zeromq&lt;/code&gt;它是一套網路通訊函式庫，記得他不是一個伺服器，而是一個lib，它在&lt;code&gt;socket api&lt;/code&gt;之上做了一層封裝，將網路、通訊、進程等抽象化為統一的 API 接口，它和 socket 的區別是 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;socket : 點對對的關係(一對一)&lt;/li&gt;
&lt;li&gt;zeromq : 多點對多點的關係(多對多)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那 zeromq 有什麼特點呢 ? 它有以下四個特點 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;去中心化 (無 broker)&lt;/li&gt;
&lt;li&gt;強調訊息收發模式&lt;/li&gt;
&lt;li&gt;以統一的接口支持多種底層通信方式&lt;/li&gt;
&lt;li&gt;異步&lt;/li&gt;
&lt;li&gt;速度飛快 (&lt;a href=&#34;http://www.oschina.net/news/17973/message-queue-shootout&#34;&gt;請參考這篇比較&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不過有一點要注意一下，zeromq 它不是一個獨立的伺服器進程 (rabbitmq 是)，所以嚴格來說它不是 mq ，它沒有 mq 這種在中間解耦合的能力，事實上他的名命也說了 zero mq 。&lt;/p&gt;
&lt;p&gt;zeromq 主要提供三種類型的通訊模式分別如下 :&lt;/p&gt;
&lt;h3 id=&#34;req-request--rep-reply-&#34;&gt;REQ (request) / REP (reply) 模式&lt;/h3&gt;
&lt;p&gt;這模式就是傳統的一個 reuest 配一個 response 的模式，非常的簡單。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170723-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;下面這段程式碼是發送請求(request)的程式碼。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zmq&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zeromq&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;requester&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zmq&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;req&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;requester&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;reply&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Received reply: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;reply&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;)
})

&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Send msg&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;requester&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello Mark&amp;#39;&lt;/span&gt;);


&lt;span style=&#34;color:#a6e22e&#34;&gt;requester&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tcp://localhost:5555&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SIGINT&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;requester&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;();
})

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後下面這段程式碼為收到請求後，進行回傳的程式碼，這也可以理解成一個 server，它會一直等待 request 的 loop，然後針對每次的請求都進行回覆(Reply)。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zmq&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zeromq&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;responder&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zmq&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rep&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;responder&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Received request : &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);

    &lt;span style=&#34;color:#a6e22e&#34;&gt;setTimeout&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
       &lt;span style=&#34;color:#a6e22e&#34;&gt;responder&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ok ~ I Received your msg&amp;#34;&lt;/span&gt;); 
    },&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;);
})

&lt;span style=&#34;color:#a6e22e&#34;&gt;responder&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tcp://127.0.0.1:5555&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;){
        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;);
    }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Listening on 5555&amp;#39;&lt;/span&gt;);
    }
})

&lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SIGINT&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;responder&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;();
    
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不過這邊有二點要注意，當你將 server 進行重啟時，client 不會自動的重新連上 server ，如果想要建立一個高可靠性的 server 請參考官網該篇文章，它說明的很詳細囉 ~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://zguide.zeromq.org/page:all#reliable-request-reply&#34;&gt;reliable-request-reply&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而另外一點就是，不論先開啟 client 或 server 都沒關係，在傳統觀念上 server 就是要先開，然後 client 才連的上，但在這裡，它們的關係是節點對節點，也就是說沒有主或從的關係，只有誰發誰送的問題。&lt;/p&gt;
&lt;h3 id=&#34;pub--sub-&#34;&gt;Pub / Sub 模式&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170723-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;它基本上是一種很常見的設計模式，像我們在使用&lt;code&gt;jquery&lt;/code&gt;時的事件機制就很常看到它，如下 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$(&amp;quot;.test&amp;quot;).on(&#39;click&#39;, function(){
    /do something...
})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的程式碼中，當頁面獨發了&lt;code&gt;click&lt;/code&gt;事件後，就會&lt;code&gt;發佈(pub)&lt;/code&gt;一個訊息，給有&lt;code&gt;訂閱(sub)&lt;/code&gt;的使用者說，我獨發了 click 了喔，然後使用者在來處理獨發後的事情。&lt;/p&gt;
&lt;p&gt;這種模式的優點就在於&lt;code&gt;解耦合&lt;/code&gt;，發佈者無須預先知道訊息的接受者，則也使得這種模式很適合用在變化多端的分佈式架構中。&lt;/p&gt;
&lt;p&gt;我們簡單的用一句話來說明 zeromq 的 pub/sub 模式，就是下面這句 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;當訊息透過 pub socket 傳送後，便會擴播至所有已連線的 sub socket&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這種類型的模式，很適合用來處理股價報價，每個 subscriber 都會去和 publisher 訂閱事件，當有新個報價時，就會通知所有有訂閱報價的 subscriber。&lt;/p&gt;
&lt;p&gt;接下來我們來開使實作程式碼。&lt;/p&gt;
&lt;p&gt;首先我們下面這段程式碼是用來建立 zeromq 的&lt;code&gt;publisher&lt;/code&gt;，也就是會將訊息從這邊發送出去給已連線的&lt;code&gt;subscriber&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// pub.js
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zmq&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zeromq&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pubSocket&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zmq&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pub&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;pubSocket&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;bindSync&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tcp://127.0.0.1:3000&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Publisher bound to port 3000&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;setInterval&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){
    &lt;span style=&#34;color:#a6e22e&#34;&gt;pubSocket&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mar&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Date()]);
},&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而下面這段程式碼就是&lt;code&gt;subscriber&lt;/code&gt;，它用來訂閱訊息來源，然後會使用&lt;code&gt;on&lt;/code&gt;這監聽器，來收得 pub 過來的訊息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// sub.js
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zmq&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zeromq&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;subSocket&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zmq&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sub&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3000&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#a6e22e&#34;&gt;subSocket&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;tcp://127.0.0.1:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;subSocket&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;subscribe&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mark&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Subscriber connected to port &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;subSocket&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;topic&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;){
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;topic&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;());
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;());
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我們可以看你心情來決定要先開啟&lt;code&gt;publisher&lt;/code&gt;或&lt;code&gt;subscriber&lt;/code&gt;，zeromq 它有提供一個機制，他會自動重新連線，也就是說，當然二個都開啟後，如果將&lt;code&gt;publisher&lt;/code&gt;關掉在重啟，你的&lt;code&gt;subscriber&lt;/code&gt;還是可以繼續收到資料。&lt;/p&gt;
&lt;p&gt;然後我們來執行程式碼看看。我們會開啟一個&lt;code&gt;publisher&lt;/code&gt;和二個&lt;code&gt;subscriber&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node pub.js
node sub.js
node sub.js
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然後我們應該是會看到如下的結果，兩個&lt;code&gt;subscriber&lt;/code&gt;每隔十秒鐘會收到一次從&lt;code&gt;publisher&lt;/code&gt;來的資料。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mark
Thu Jul 20 2017 17:18:58 GMT+0800 (CST)

mark
Thu Jul 20 2017 17:18:59 GMT+0800 (CST)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;push--pull&#34;&gt;Push / Pull&lt;/h3&gt;
&lt;p&gt;這種模式又被稱為&lt;code&gt;管道(pipe)模式&lt;/code&gt;，它是單向的，從 push 單向推送到 pull 端，這種模式和上面的&lt;code&gt;pub/sub&lt;/code&gt;最模式最大的差別在於 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;push 傳送的一堆資料，會被&lt;code&gt;平均&lt;/code&gt;分散至多個 pull 端，就像是 load balance的機制一樣。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下的程式碼為 pull 端的建立。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// pull.js 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zmq&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zeromq&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pullSocket&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zmq&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pull&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;pullSocket&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tcp://127.0.0.1:3000&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Worker connected to port 3000&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;pullSocket&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt;){
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;());
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而下面的程式碼為 push 端的建立。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// push.js
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zmq&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zeromq&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sockPush&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zmq&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;push&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;sockPush&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;bindSync&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tcp://127.0.0.1:3000&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Producer bound to port 3000&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;setInterval&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sockPush&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;mark wake up ~ : &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
},&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然我們開始執行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node push.js
node pull.js
node pull.js
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這時你會看到下面的結果顯示出，每一個 push 出去的資料都會平分給另外兩個 pull 端。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mark wake up ~ : 10
mark wake up ~ : 11
mark wake up ~ : 12
mark wake up ~ : 14
mark wake up ~ : 16
mark wake up ~ : 18
mark wake up ~ : 20
mark wake up ~ : 22
mark wake up ~ : 24
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;mark wake up ~ : 13
mark wake up ~ : 15
mark wake up ~ : 17
mark wake up ~ : 19
mark wake up ~ : 21
mark wake up ~ : 23
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這種模式事實上很像我們之前所談到的負載平衡，他們的概念的確是一樣的沒錯，這種模式也代表我們可以將一個複雜的任務平均分配下去，當各 pull 端完成時，在全部一起收集起來使用。&lt;/p&gt;
&lt;p&gt;接下來我們再來建置一個分散式的雜湊碼破解器 ~&lt;/p&gt;
&lt;h3 id=&#34;heading&#34;&gt;建立一個分散式的雜湊碼破解器&lt;/h3&gt;
&lt;p&gt;這個應用主要是可以根據一組字母表做出各種排列組合，藉此對輸入的雜湊碼(MD5、SHA1等)來進行破解，這個架構就是一個典型的平行管線。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170723-4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;這個爆力破解的過程如下&lt;/p&gt;
&lt;p&gt;首先我們會先建立一個&lt;code&gt;push&lt;/code&gt;端，他們將我們指定的字串，進行各種排列組合，例如&lt;code&gt;abc&lt;/code&gt;，會產生&lt;code&gt;abc&lt;/code&gt;、&lt;code&gt;acb&lt;/code&gt;、&lt;code&gt;bac&lt;/code&gt;等……，然後使用串流來讀取出來，並且 push 到每一個 pull端。&lt;/p&gt;
&lt;p&gt;我們下面的程式碼中&lt;code&gt;alphabet&lt;/code&gt;代表這我們要進行的排序組合，然後不可能英文 26 個字母全部排列，會出人命的，所以我們會用&lt;code&gt;maxLength&lt;/code&gt;來進行限制，我們該值為 4 的意思代表只從 26 個字母內選取出 4 個字來進行排列組合。&lt;/p&gt;
&lt;p&gt;也因為上面 4 個字的限制，我們測試時輸入的單字要只有 4 個字母。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//ventilator.js
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zmq&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zeromq&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;variationsStream&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;variations-stream&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alphabet&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abcdefghijklmnopqrstuvwxyz&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;batchSize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxLength&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;searchHash&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;argv&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ventilator&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zmq&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;push&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;ventilator&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;bindSync&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tcp://127.0.0.1:5000&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;batch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [];
&lt;span style=&#34;color:#a6e22e&#34;&gt;variationsStream&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;alphabet&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;maxLength&lt;/span&gt;)
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;combination&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;combination&lt;/span&gt;);
        &lt;span style=&#34;color:#a6e22e&#34;&gt;batch&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;combination&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;batch&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;batchSize&lt;/span&gt;) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
                &lt;span style=&#34;color:#a6e22e&#34;&gt;searchHash&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;searchHash&lt;/span&gt;,
                &lt;span style=&#34;color:#a6e22e&#34;&gt;variations&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;batch&lt;/span&gt;,
            }
            
            &lt;span style=&#34;color:#a6e22e&#34;&gt;ventilator&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stringify&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt;));
            &lt;span style=&#34;color:#a6e22e&#34;&gt;batch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [];
        }
    }).&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;searchHash&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;searchHash&lt;/span&gt;,
            &lt;span style=&#34;color:#a6e22e&#34;&gt;variations&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;batch&lt;/span&gt;,
        }
        &lt;span style=&#34;color:#a6e22e&#34;&gt;ventilator&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stringify&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt;));
    });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下來在 pull 端收到從 push 端來的字串後，我們會將該字串轉換成&lt;code&gt;sha1 hash&lt;/code&gt;碼，然後我們在將該碼與輸入碼(我們要破解的碼)進行比對，最後當比對到時相同的東西時，我們就會將結果 push 到另一個收集結果的 pull 端 (就是toSink所連結的地方)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// worker.js
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zmq&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zeromq&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;crypto&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;crypto&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fromVentilator&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zmq&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pull&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;toSink&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zmq&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;push&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;fromVentilator&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tcp://127.0.0.1:5000&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;toSink&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tcp://127.0.0.1:5001&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Worker connect to 5001&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;fromVentilator&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;parse&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;variations&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;variations&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;variations&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;forEach&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;word&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Processing: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);            
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shasum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;crypto&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;createHash&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sha1&amp;#39;&lt;/span&gt;);
        &lt;span style=&#34;color:#a6e22e&#34;&gt;shasum&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;word&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;digest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shasum&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;digest&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;digest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;searchHash&lt;/span&gt;){
            &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Found! =&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);
            &lt;span style=&#34;color:#a6e22e&#34;&gt;toSink&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Found! &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;digest&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; =&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);
        }
    });
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中下面這段，是指將我們從 26 個字母中產生任選出 4 個所產生出的排列組合的單字，進行&lt;code&gt;sha1 hash&lt;/code&gt;加密，產生出 hash 碼。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shasum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;crypto&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;createHash&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sha1&amp;#39;&lt;/span&gt;);
        &lt;span style=&#34;color:#a6e22e&#34;&gt;shasum&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;word&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;digest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shasum&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;digest&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最後，當我們從 worker 那收到破解後的結果，就進行輸入。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-j&#34; data-lang=&#34;j&#34;&gt;var zmq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;z&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;q&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
var sink &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; zmq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;socket(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;l&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;l&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
sink&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bindSync(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

sink&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;on(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;function (buffer) &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    console&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;Message from worker&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;buffer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;toString()&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我們來執行看看，我們要先開啟兩個 worker 和一個 sink。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node worker.js
node worker.js
node sink.js
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然後我們在開啟&lt;code&gt;ventilator.js&lt;/code&gt;，用來開始啟產生單字的排列組合，其中&lt;code&gt;f1b5a91d4d6ad523f2610114591c007e75d15084&lt;/code&gt;是指&lt;code&gt;mark&lt;/code&gt;的&lt;code&gt;sha1 hash&lt;/code&gt;碼。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node ventilator.js f1b5a91d4d6ad523f2610114591c007e75d15084
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然後當破解完，你可以看到 sink 那的輸出結果。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Message from worker: Found! f1b5a91d4d6ad523f2610114591c007e75d15084 =&amp;gt; mark
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;heading1&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;本篇文章中，我們說明了如何使用&lt;code&gt;zeromq&lt;/code&gt;進行&lt;code&gt;對等式架構&lt;/code&gt;建置，並且還了它的三種模式 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;REQ / REP&lt;/li&gt;
&lt;li&gt;PUB / SUB&lt;/li&gt;
&lt;li&gt;PUSH / PULL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這三種模式是 zeromq 中的基本，它們還有更多的變化類型，但都只是這三個的組合型，如果想了解更多，官網的資料已經夠多囉，請慢慢自已研究吧 ~&lt;/p&gt;
&lt;h2 id=&#34;heading2&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://zguide.zeromq.org/page:all&#34;&gt;zeromq 官網&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oschina.net/news/17973/message-queue-shootout&#34;&gt;4 款消息队列软件产品大比拼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.ez2learn.com/2011/12/31/transport-lib-of-new-era-zeromq/&#34;&gt;新世紀通訊函式庫 – ZeroMQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;Node.js設計模式-著:Mario Casciaro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Passport.js 之 Hello 你好嗎 ~ </title>
      <link>https://mark-lin.com/posts/20170609/</link>
      <pubDate>Wed, 07 Jun 2017 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20170609/</guid>
      <description>&lt;p&gt;本篇文章中，我們想要知道以下的重點 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;passport 是啥鬼 ?&lt;/li&gt;
&lt;li&gt;要如何使用它呢 ?&lt;/li&gt;
&lt;li&gt;要如何使用一個 passport 的登入系統呢 ?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;passport--&#34;&gt;passport 是啥 ?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;passport.js&lt;/code&gt;是 node 中的一段登入驗證中間層(middleware)，也就是說可以讓你簡單的&lt;code&gt;使用 google 登入&lt;/code&gt;或&lt;code&gt;使用 fb 登入&lt;/code&gt;，它的架構就是所謂的&lt;code&gt;策略模式&lt;/code&gt;，接下來我們來實際上看看他是如何使用的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;passort.js 活著的目的就是為了驗證 request&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要使用 passport 來進行驗證，需要設定三個東西 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;驗證策略 (Authentication strategies)&lt;/li&gt;
&lt;li&gt;應用程式的中間件 (Application middleware)&lt;/li&gt;
&lt;li&gt;Sessions (可選擇)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading&#34;&gt;驗證策略的建立&lt;/h2&gt;
&lt;p&gt;上面我們有提到 passport 本身就是使用&lt;code&gt;策略模式&lt;/code&gt;的實作，而它的定義就是 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;定義一系列的演算法，把它們一個個封裝起來，並且可以相互替換。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以在這邊，我們需要定義&lt;code&gt;驗證的策略(演算法)&lt;/code&gt;，例如使用 facebook 登入驗證、google 登入驗證或自訂的驗證策略。&lt;/p&gt;
&lt;p&gt;而我們這裡直接看官網的自訂驗證策略&lt;code&gt;localStrategy&lt;/code&gt;，下面的程式碼中，我們會定義一個&lt;code&gt;localStrategy&lt;/code&gt;，它準備用來驗證我們的&lt;code&gt;request&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;LocalStrategy&lt;/code&gt;的兩個參數為&lt;code&gt;options&lt;/code&gt;和&lt;code&gt;verify&lt;/code&gt;，我們&lt;code&gt;option&lt;/code&gt;需要先定義要用來驗證的欄位&lt;code&gt;username&lt;/code&gt;、&lt;code&gt;passowrd&lt;/code&gt;，然後&lt;code&gt;verify&lt;/code&gt;就是驗證規則，就是下面那個&lt;code&gt;function&lt;/code&gt;裡面的東東。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;users&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;zack&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;username&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zack&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1234&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    },
    &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;username&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;node&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;5678&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
    },
}

&lt;span style=&#34;color:#75715e&#34;&gt;// LacalStrategy(options,verify)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;localStrategy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LocalStrategy&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;usernameField&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;passwordField&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;,
},
    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;username&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;users&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;username&lt;/span&gt;];

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Invalid user&amp;#39;&lt;/span&gt; });
        };

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Invalid password&amp;#39;&lt;/span&gt; });
        };

        &lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;);
    }
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;###那這邊有個問題 ~ 那就是奇怪，為什麼他沒有驗證 username 或 password 這兩個欄位是否合法呢 ?&lt;/p&gt;
&lt;p&gt;因為&lt;code&gt;LocalStrategy&lt;/code&gt;已經幫我們處理好了，我們直接來看一下它的原始碼 :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Strategy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;authenticate&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;options&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;options&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;options&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; {};
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;username&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lookup&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_usernameField&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lookup&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_usernameField&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lookup&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_passwordField&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lookup&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_passwordField&lt;/span&gt;);
  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;username&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fail&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;options&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;badRequestMessage&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Missing credentials&amp;#39;&lt;/span&gt; }, &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;);
  }
  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;;
  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;verified&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;) { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;); }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;) { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fail&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;); }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;success&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;);
  }
  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_passReqToCallback&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_verify&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;username&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;verified&lt;/span&gt;);
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_verify&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;username&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;verified&lt;/span&gt;);
    }
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;ex&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ex&lt;/span&gt;);
  }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面這一段是當我們執行了下面這段時程式碼時，就會執行的東東，從上面程式碼中我們可以知道，它會先去&lt;code&gt;req.body&lt;/code&gt;中，尋找我們定義的兩個欄位&lt;code&gt;username&lt;/code&gt;和&lt;code&gt;passowrd&lt;/code&gt;，然後檢查看看他是否合法，當一切都 ok 時，我們就會執行上面有提到的&lt;code&gt;verify&lt;/code&gt;函數，來進行驗證。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Passport.authenticate(&#39;local&#39;, { session: false })
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;heading1&#34;&gt;中間件的設定&lt;/h1&gt;
&lt;p&gt;接下來我們將要在&lt;code&gt;route&lt;/code&gt;中，增加 passport 這個中間件 (middleware)，我們這邊選擇使用 express 來當我們的 web framework。&lt;/p&gt;
&lt;p&gt;我們在使用時需要先選擇我們要使用的策略，我們直接用上面所建立的&lt;code&gt;localStrategy&lt;/code&gt;，如果你有建立其它的例如&lt;code&gt;facebook&lt;/code&gt;或&lt;code&gt;google&lt;/code&gt;的策略也都可以使用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 註冊策略
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Passport&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;local&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;localStrategy&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Express&lt;/span&gt;();
&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;BodyParser&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;urlencoded&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;extended&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; }));
&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;BodyParser&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;());
&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Passport&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中&lt;code&gt;Passport.use(&#39;local&#39;, localStrategy);&lt;/code&gt;這行就是將我們剛剛建立的策略註冊到 passport 中，我們直接看他的原始碼，會更了解它在做啥 :&lt;/p&gt;
&lt;p&gt;嗯他非常的簡單，就是將我們的註冊的策略丟到一個物件中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Authenticator&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;strategy&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;strategy&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;strategy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strategy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;) { &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Authentication strategies must have a name&amp;#39;&lt;/span&gt;); }
  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_strategies&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strategy&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;;
};

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後呢我們就要在 route 上加 passport 中間件，這樣的話，我們每一個進來到這個 route 的 request 都會被 passport 我們指定的策略進行驗證。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;post&lt;/span&gt;(
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/login&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Passport&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;authenticate&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;local&amp;#39;&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; }),
    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;User ID &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;());
    }
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;session&#34;&gt;Session的設定&lt;/h2&gt;
&lt;p&gt;我們在驗證完畢後應該是會取得到某個使用者，像我們上面範例中的這行 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;user = users[username];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;當然，這只是範例，正常情況下應該是去 db 或其它地方取得使用者，但我們這裡就一切從簡。&lt;/p&gt;
&lt;p&gt;接下來我們兩個問題 ~&lt;/p&gt;
&lt;h3 id=&#34;session--cookie--&#34;&gt;session 和 cookie 是啥 ?&lt;/h3&gt;
&lt;p&gt;雖然我還算理解，但是這邊還是簡單的說一下。&lt;/p&gt;
&lt;p&gt;首先這兩個都是個儲放機制。&lt;/p&gt;
&lt;p&gt;再來 session 是只能在 server 進行維持，每當 client 在連接 server 時，會由 server 產生成一個唯一的 sessionId，並用它來連接 server 內的 session 存放空間，而通常來說 sessionId，也同時會保存在客戶端的 cookie 中，每次 client 在訪問 server 時都會用它來存取 session 資料。&lt;/p&gt;
&lt;p&gt;而 cookie 則是在客戶端的儲放機制，它是由瀏覽器來維持，但注意，它可以在 client 端與 server 端進行修改，為什麼會有 cookie 呢 ? 主要就是因為 http 是無狀態的協議，每一次讀取頁面時，都是獨立的狀態，所以就需要使用 cookie 來連結前後文。&lt;/p&gt;
&lt;p&gt;對了 cookie 還有一點要記，那就是每一次的請求，cookie 都會一起被發送到 server 端喔。&lt;/p&gt;
&lt;p&gt;我們懂了以下的基本知道後，再來問個問題。&lt;/p&gt;
&lt;h3 id=&#34;-&#34;&gt;我們每一次登入，就要取資料庫驗證和取得一次使用者嗎 ????&lt;/h3&gt;
&lt;p&gt;答案是&lt;code&gt;否定&lt;/code&gt;的。&lt;/p&gt;
&lt;p&gt;正常不太會這樣處理，假設我們是用 fb 登入，那不就變成，每一次使用者到這頁面時，畫面都會掉到 fb 要你登入，然後在跳回來原本頁面，這樣太浪費時間了。&lt;/p&gt;
&lt;p&gt;所以說，passport 它會做以下兩件事情 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;將使用者資訊存放在 server 的 session 中。&lt;/li&gt;
&lt;li&gt;然後會在使用者的瀏覽器設定 cookie。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那我們在 passport 要如何使用呢 ? 首先關於第一點，passport 提供了&lt;code&gt;serializeUser&lt;/code&gt;讓我們將使用者資訊存放置 server 的 session中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;passport&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;serializeUser&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後關於第二點，每一次進行請求時，passport 都會將傳進來的 cookie 中某個存放該session資訊的欄位，取得到我們剛剛存的&lt;code&gt;user.id&lt;/code&gt;，然後在使用它，來取得完整的&lt;code&gt;user&lt;/code&gt;資訊，並將它存放到&lt;code&gt;req.user&lt;/code&gt;之中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;passport&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;deserializeUser&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;findById&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;);
  });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading2&#34;&gt;實作一個登入系統&lt;/h2&gt;
&lt;p&gt;我們這邊來實作個登入系統，使用者只要有登入後，接下來的 route 都可以從 session 中取得到該名使用者的資訊。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/h091237557/MyBlogPost/blob/master/code/design/passport_test.js&#34;&gt;所有的程式碼&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-appjs-&#34;&gt;1. app.js 基本的註冊&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Passport&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;passport&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LocalStrategy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;passport-local&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Strategy&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Express&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BodyParser&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body-parser&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;express-session&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cookieParser&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cookie-parser&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Express&lt;/span&gt;();
&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;BodyParser&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;urlencoded&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;extended&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; }));
&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;BodyParser&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;());
&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cookieParser&lt;/span&gt;());

&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;secret&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;resave&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;saveUninitialized&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
}))
&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Passport&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;());
&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Passport&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt;()); &lt;span style=&#34;color:#75715e&#34;&gt;// 一定要在 initialize 之後
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-&#34;&gt;2. 驗證策略&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;users&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;mark&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;username&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mark&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1234&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    },
    &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;username&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;node&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;5678&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
    },
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;localStrategy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LocalStrategy&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;usernameField&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;passwordField&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;,
},
    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;username&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;users&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;username&lt;/span&gt;];

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Invalid user&amp;#39;&lt;/span&gt; });
        };

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Invalid password&amp;#39;&lt;/span&gt; });
        };

        &lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;);
    }
)

&lt;span style=&#34;color:#a6e22e&#34;&gt;Passport&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;local&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;localStrategy&lt;/span&gt;);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-route&#34;&gt;3. 建立登入的route&lt;/h3&gt;
&lt;p&gt;下面為我們登入的 route 建立。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;post&lt;/span&gt;(
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/login&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Passport&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;authenticate&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;local&amp;#39;&lt;/span&gt;,{&lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;}),
    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Access-Control-Allow-Origin&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Access-Control-Allow-Headers&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-Requested-With&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;User ID &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;());
    }
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那 passport 是那裡置至 session 和 cookie 呢 ?&lt;/p&gt;
&lt;p&gt;答案是在這裡 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;passport.serializeUser(function(user, done) {
  done(null, user.id);
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然後我們來呼叫這個 route，然後你到 chrome 的 application 看，你會發現，他有存放個 cookie 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170727-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4--route&#34;&gt;4. 建立取得使用者的 route&lt;/h3&gt;
&lt;p&gt;然後接下來，我們執行&lt;code&gt;http://127.0.0.1:3000/getInfo&lt;/code&gt;後，這段程式碼&lt;code&gt;app.use(Passport.session());&lt;/code&gt;就會將我們從前端傳回來的 cookie，進行分析，並和 session 進行比對，然後就會將使用者資料存放到&lt;code&gt;req.user&lt;/code&gt;裡囉&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;app.get(&#39;/getInfo&#39;,function(req,res){
    const user = req.user;
    res.send(user);
})
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;--deserializeuser-&#34;&gt;注意點 : deserializeUser 無法被呼叫到&lt;/h3&gt;
&lt;p&gt;有一點要注意一下，如果你發現你的&lt;code&gt;deserializeUser&lt;/code&gt;老是無法被呼叫到，那問題是在下面這段 :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;secret&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;resave&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;saveUninitialized&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
}))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有些人會寫成下面這樣，&lt;code&gt;cookie: { secure: true }&lt;/code&gt;這個參數需要配合&lt;code&gt;https&lt;/code&gt;才能使用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/11277779/passportjs-deserializeuser-never-called&#34;&gt;你的好朋友 stackoverflow&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;secret&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;goodjob secret&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;resave&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// don&amp;#39;t save session if unmodified
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;saveUninitialized&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;cookie&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;secure&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; },
}));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading3&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://passportjs.org/docs&#34;&gt;passport 官方文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sj82516-blog.logdown.com/posts/1249667/nodejs-passportjs-cors-in-the-certification-process-and-development&#34;&gt;NodeJS使用PassportJS處理認證流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.jikexueyuan.com/project/node-lessons/cookie-session.html&#34;&gt;cookie 和 session&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Node之可擴展性 --- Nginx反向代理建立</title>
      <link>https://mark-lin.com/posts/20170606/</link>
      <pubDate>Tue, 06 Jun 2017 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20170606/</guid>
      <description>&lt;p&gt;在上一篇文章中，我們使用&lt;code&gt;cluster&lt;/code&gt;來建立多&lt;code&gt;process&lt;/code&gt;的應用，這個方法是我們上一篇所提到&lt;code&gt;X軸擴展的複制&lt;/code&gt;的方法之一。&lt;/p&gt;
&lt;p&gt;而這一篇文章，我們一樣是要來討論&lt;code&gt;X軸擴展的複制&lt;/code&gt;的另一種方法 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;反向代理器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這種擴展的方法為，在不同的 port 或不同的機器上，我們會啟動多個應用程式，然後使用&lt;code&gt;反向代理器&lt;/code&gt;來存取這些機器，用來分散流量。&lt;/p&gt;
&lt;p&gt;他不會像 cluster 上有一個&lt;code&gt;master process&lt;/code&gt;然後將工作分配給多個&lt;code&gt;worker&lt;/code&gt;，而是有更多個獨立的程式執行在&lt;code&gt;同一個機器不同 port&lt;/code&gt;上或是分散在&lt;code&gt;相同的網路中的不同機器&lt;/code&gt;上，然後會以&lt;code&gt;反向代理器&lt;/code&gt;為入口，由他處理請求並與後端的伺服器做處理，然後在由他回傳給客戶端。&lt;/p&gt;
&lt;p&gt;下圖為該結構的圖示 :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170715-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;那他這樣做有什麼優點呢 ? 事實上他就是 proxy 的用法，也就是說 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;他可以保護伺服器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;反向代理器可以和我們上一章所說的&lt;code&gt;cluster&lt;/code&gt;一起使用，例如單一機器使用 cluster 進行垂直擴展，再使用反向代理器來做水平性擴展。&lt;/p&gt;
&lt;p&gt;本篇文章中我們將使用最常用來做反向代理器的&lt;code&gt;Nginx&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;nginx-&#34;&gt;Nginx 做反向代理器，並配置負載平衡&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;nginx&lt;/code&gt;是一個網頁伺服器，它的設計架構和 nodejs 非常的相似，都是&lt;code&gt;單一執行緒架構&lt;/code&gt;，並且還有豐富的模組庫和第三方工具可以使用，非常的方便啊。&lt;/p&gt;
&lt;p&gt;這邊我們將要使用&lt;code&gt;nginx&lt;/code&gt;來作為反向代理器，並且進行&lt;code&gt;負載平衡&lt;/code&gt;的功能，它要做的工作就是 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我們有多台伺服器，然後請求進來要將請求分給其它台伺服器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先我們先安裝 nginx&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// ubuntu
apt-get install nginx

// mac
brew install nginx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然後我們簡單的建立一個 server，它每一次收到請求時，都會回傳這個工作是那個&lt;code&gt;port&lt;/code&gt;來進行處理。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// app.js
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;createServer&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pid&lt;/span&gt;);

    &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;writeHead&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;port:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_connectionKey&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;());
    &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;();

}).&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PORT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;argv&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;started:&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pid&lt;/span&gt;);
});

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下來我們直接使用上一篇有說到的&lt;code&gt;forever&lt;/code&gt;來開啟四個應用程式，並且每一個都給予指定的&lt;code&gt;port&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;forever start app.js 8081 
forever start app.js 8082
forever start app.js 8083 
forever start app.js 8084 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然後我們可以執行&lt;code&gt;forever list&lt;/code&gt;來看看已啟動的應用程式，這邊每一個實例都是&lt;code&gt;一個 process&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;info:    Forever processes running
data:        uid  command                                        script                forever pid   id logfile     uptime
data:    [0] P8D5 /Users/mark/.nvm/versions/node/v6.2.1/bin/node server_nochid.js 8081 39585   46636    /Users/mark/.forever/P8D5.log 0:2:23:56.342
data:    [1] MKn0 /Users/mark/.nvm/versions/node/v6.2.1/bin/node server_nochid.js 8082 39618   46637    /Users/mark/.forever/MKn0.log 0:2:23:56.342
data:    [2] wAAK /Users/mark/.nvm/versions/node/v6.2.1/bin/node server_nochid.js 8083 39637   46638    /Users/mark/.forever/wAAK.log 0:2:23:56.339
data:    [3] pcFf /Users/mark/.nvm/versions/node/v6.2.1/bin/node server_nochid.js 8084 39648   46639    /Users/mark/.forever/pcFf.log 0:2:23:56.335
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下來我們就將 nginx 反向代理器設置&lt;code&gt;負載平衡&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;首先我們先進到某個位置找到&lt;code&gt;nginx.conf&lt;/code&gt;，然後套用如下設定，由於不同的系統平台位置有異，所以要自已去找找囉。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;worker_processes  1;


events {
    worker_connections  1024;
}

http {
	upstream myproject {
		server 127.0.0.1:8081;
		server 127.0.0.1:8082;
		server 127.0.0.1:8083;
		server 127.0.0.1:8084;
	}

	server {
		listen 80;

		location / {
			proxy_pass http://myproject;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我們根據上面的設定，來理解一下他裡面的參數意義。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;worker_process&lt;/code&gt; : 用來指定 nginx 要開啟的&lt;code&gt;子進程&lt;/code&gt;的數量，建議根據 cpu 有幾個就開幾個。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;events&lt;/code&gt; : 該模組用來指定 nginx 的工作模式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;events.worker_connections&lt;/code&gt; : 用來指定每個&lt;code&gt;進程&lt;/code&gt;的最大請求數，默認為&lt;code&gt;1024&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http&lt;/code&gt; : 該模組為核心，它負責 http 伺服器的所有配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http.upstream&lt;/code&gt; : 該模組用來處理&lt;code&gt;負載均衡&lt;/code&gt;的配置，像我們上面的設定就是將該&lt;code&gt;http&lt;/code&gt;的連線經過這個 nginx，然後負載均衡到我們設定的 8081、8082、8083、8084 這四個 server 上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http.server&lt;/code&gt; : 它用來定義一個主機。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http.server.listen&lt;/code&gt; : 定義該主機的 port。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http.server.location&lt;/code&gt; : 該模組主要用來處理&lt;code&gt;定位&lt;/code&gt;的，基本上&lt;code&gt;反向代理&lt;/code&gt;、&lt;code&gt;負載均衡位置&lt;/code&gt;等都要在這處理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;設定好後，我們來確任一下 conf 有沒有設定錯誤，我們執行&lt;code&gt;sudo nginx -t&lt;/code&gt;，然後如果正確的話會輸出下列結果 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nginx: the configuration file /usr/local/etc/nginx/nginx.conf syntax is ok
nginx: configuration file /usr/local/etc/nginx/nginx.conf test is successful
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;確定成功後，我們還要在執行以下指令，來重新讀取 conf 檔。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo nginx -s reload
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但有點要注意，如果你之前有將 nginx 停止或關閉記得要在執行&lt;code&gt;sudo nginx&lt;/code&gt;來開啟它，不然會出現下面的錯誤訊息。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nginx: [error] invalid PID number &amp;quot;&amp;quot; in &amp;quot;/usr/local/var/run/nginx.pid&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下來我們做以下的實驗 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;發送請求到&lt;code&gt;http://127.0.0.1&lt;/code&gt;後，如果有設置好，目前預設，應該是會每次的請求都會在不同的 port 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我們直接發個五次請求。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -G http://127.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然後你會看到回傳的結果如下，下面結果就證實了我們的&lt;code&gt;負載平衡&lt;/code&gt;的&lt;code&gt;反向代理&lt;/code&gt;有設置成功，你每次發送&lt;code&gt;127.0.0.1&lt;/code&gt;反向代理器會自動的從四個伺服器(8081、8082、8083、8084)中，選出一個來處理。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;port:6::::8081%
port:6::::8082%
port:6::::8083%
port:6::::8084%
port:6::::8081%
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但這裡我們就還要在思考一個問題，&lt;code&gt;負載平衡&lt;/code&gt;他是如何決定要用那個呢 ?&lt;/p&gt;
&lt;h2 id=&#34;-&#34;&gt;那要如何決定那個工作分配給誰呢 ?&lt;/h2&gt;
&lt;p&gt;在 nginx 中，&lt;code&gt;負載平衡模組&lt;/code&gt;總共有提供四個方法給使用者。&lt;/p&gt;
&lt;h3 id=&#34;--round-robin-&#34;&gt;輪詢 ( round robin )&lt;/h3&gt;
&lt;p&gt;nginx 預設的分配方法，假設你有個用戶叫 mark ，而以有三個 port 分別為8081、8082、8083，然後輪詢就會你配置的順序來分配請求，如下 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;request 1 =&amp;gt; port 8081
request 2 =&amp;gt; port 8082
request 3 =&amp;gt; port 8083
request 4 =&amp;gt; port 8081
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;-weight&#34;&gt;基於權重 weight&lt;/h3&gt;
&lt;p&gt;接下來是權重分配，事實上，上面的輪詢也算是這種類型，只是他&lt;code&gt;weight&lt;/code&gt;默認為&lt;code&gt;1&lt;/code&gt;，所以這也代表，這四個分別處理&lt;code&gt;1(weight)/4(weight加總) = 25%&lt;/code&gt;的資料量。&lt;/p&gt;
&lt;p&gt;我們將 nginx conf 修改成下列這樣來測試看看。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	upstream myproject {
		server 127.0.0.1:8081 weight=1;  // 10%
 		server 127.0.0.1:8082 weight=2;  // 20%
		server 127.0.0.1:8083 weight=3;  // 30%
		server 127.0.0.1:8084 weight=4;  // 40%
	}

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;結果如下統計顯示。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;84
83
82
84
81
83
84
82
83
84
--------
84 =&amp;gt; 4次
83 =&amp;gt; 3次
82 =&amp;gt; 2次
81 =&amp;gt; 1次
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這種方式的優點就在於，你可以將效能較好的伺服器權重設定高一些，讓他可以處理更多的請求。&lt;/p&gt;
&lt;h3 id=&#34;-iphash&#34;&gt;基於 ip_hash&lt;/h3&gt;
&lt;p&gt;這種方式會根據&lt;code&gt;每次請求的 ip的 hash 結果作分配&lt;/code&gt;，也就是說，同樣的 ip 會固定到同樣的伺服器來進行處理。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	upstream myproject {
	 ip_hash;
		server 127.0.0.1:8081 ;
 		server 127.0.0.1:8082 ;
		server 127.0.0.1:8083 ;
		server 127.0.0.1:8084 ;
	}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;執行結果，因為我都是本機打，所以當然都會是一樣的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;81
81
81
81
81
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這種方法是用來處理&lt;code&gt;session共享的問題&lt;/code&gt;，在分布式架構中，有一個問題一定會被問到，那就是 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要如何處理 session ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因為在分布式架構中，有多台的伺服器，而我們也知道 session 是存在某台伺服器上，如果我們第一次請求在 port 81 上，而第二次是在 port 82 上，如果兩次都有修改到 session，那就會不同步了。&lt;/p&gt;
&lt;p&gt;目前大至上有以下幾種的解法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;不使用session，換用cookie&lt;/code&gt; : 簡單，但缺點在於如果用戶禁 cookie 了，你就不用玩了。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session 存在數據庫&lt;/code&gt; : 資料庫的I/O就會加重，而且如果資料庫也是分散式的，還要進行 session 資料表的同步。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session 存在 redis 中&lt;/code&gt; : 這種方法好像目前都比較推。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;將相同 ip 的請求導致同一台伺服器&lt;/code&gt; : 這就是我們現在所說明的功能，這種方法也算不錯用，但有一個前提假設，那就是&lt;code&gt;nginx 是最前端的伺服器，保證得到正確的 ip&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;本篇文章中說明了以下幾個重點。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;為什麼要使用反向代理器與負載平衡。&lt;/li&gt;
&lt;li&gt;使用 nginx 建立反向代理器與負載平衡。&lt;/li&gt;
&lt;li&gt;nginx 所提供的負載平衡分配的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這些都是可以幫助我們處理前一篇所說的&lt;code&gt;X軸擴展中的複制&lt;/code&gt;，而他又和上一篇&lt;code&gt;cluster&lt;/code&gt;不同點在於&lt;code&gt;cluster&lt;/code&gt;是屬於同一台機器的&lt;code&gt;垂直擴展&lt;/code&gt;，而本篇所說明的則屬於多台機器的&lt;code&gt;水平擴展&lt;/code&gt;，而至於接下來的文章，我們還會繼續討論&lt;code&gt;X軸這個主軸&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;heading1&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nginx.org/en/&#34;&gt;nginx官網&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jianshu.com/p/ac8956f79206&#34;&gt;nginx负载均衡配置-LittleOne&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jianshu.com/p/bed000e1830b&#34;&gt;WEB请求处理二：Nginx请求反向代理-陶邦仁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;Nodejs設計模式-Mario Casciaro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Node之可擴展性 --- Node的Cluster</title>
      <link>https://mark-lin.com/posts/20170605/</link>
      <pubDate>Mon, 05 Jun 2017 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20170605/</guid>
      <description>&lt;p&gt;本篇文章中將要說明，&lt;code&gt;要如何的擴展 node 應用&lt;/code&gt;，從上一篇文章中我們知道， node 它很&lt;code&gt;適合高 I/O &lt;/code&gt;的任務，而&lt;code&gt;不適合高 cpu 的&lt;/code&gt;任務，最主要的原因在於它的架構，它是&lt;code&gt;單執行緒架構&lt;/code&gt;，但是無論單體的伺服器能力在強大，單一執行緒的效能一定會有界限，因此我們必須將應用程式擴展運用。&lt;/p&gt;
&lt;p&gt;根據&lt;code&gt;The Art of Scalabiltiy&lt;/code&gt;的內容來知道，在擴展時，可以用下列三個維度來描述可擴展性。這也是被稱為&lt;code&gt;擴展立方(scale cube)&lt;/code&gt;的東東。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X 軸 : 複制&lt;/li&gt;
&lt;li&gt;Y 軸 : 以服務/功能分解&lt;/li&gt;
&lt;li&gt;Z 軸 : 以資料來分解&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本上&lt;code&gt;Y軸&lt;/code&gt;擴展的方法是屬於&lt;code&gt;微服務(Microservices)&lt;/code&gt;的範圍所以本篇也不詳細說明，而&lt;code&gt;Z&lt;/code&gt; 軸則屬於&lt;code&gt;資料庫&lt;/code&gt;方法所以也不加以說明。&lt;/p&gt;
&lt;p&gt;我們本篇將要說明&lt;code&gt;X軸 : 複制&lt;/code&gt;，它的白話文概念如下 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;將應用程式加以複制 N 個，這也代表每個實體只須處理 N 分之一的工作量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;傳統的系統可以利用多執行緒，來完整使用整台機器的效能，但 node 則否，因為它是單一執行緒，並且在 64 位元下有&lt;code&gt;1.7GB&lt;/code&gt;的限制，接下來我們將介紹 node 擴展的基本機制 &lt;code&gt;cluster&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;cluster&#34;&gt;cluster&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;cluster&lt;/code&gt;是在 node 中的內建模組，他讓我們可以建立一個 cluster，可通過父進程來管理一堆子進程，在 cluster 中父進程被稱為&lt;code&gt;master process&lt;/code&gt;，而子進程則被稱為&lt;code&gt;worker process&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;每個傳送的連線都會先到&lt;code&gt;master process&lt;/code&gt;然後會在將工作分配到&lt;code&gt;worker process&lt;/code&gt;中。&lt;/p&gt;
&lt;p&gt;我們根據上一篇的程式碼來進行修改。下面程式碼中，首先請先看&lt;code&gt;if(cluster.isMaster)&lt;/code&gt;裡面，當執行時，會使用&lt;code&gt;cluster fork&lt;/code&gt;根據 cpu 的數量來新增 process，然後每次&lt;code&gt;fork&lt;/code&gt;時都會執行&lt;code&gt;else&lt;/code&gt;裡面的程式。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;child_process&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;child_process&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cluster&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cluster&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numCPUs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;os&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;cpus&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cluster&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;isMaster&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master process:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pid&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cpu num: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numCPUs&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;());
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numCPUs&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;cluster&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fork&lt;/span&gt;();
    }
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;createServer&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;process run:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pid&lt;/span&gt;);
        &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;writeHead&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;);
        &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;());
        &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;();

    }).&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;started&amp;#39;&lt;/span&gt;);
        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;process:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pid&lt;/span&gt;);
    });
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而我們的執行輸出的結果可以看到，我們的&lt;code&gt;master process&lt;/code&gt;的 pid 為&lt;code&gt;95199&lt;/code&gt;，其餘四個 &lt;code&gt;worker process&lt;/code&gt;的 pid 如下。接下來我們每次打這隻 api 時，會直接從這 4 個 process 中選一個出來執行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;master process:95199
cpu num: 4
started
process:95202
started
process:95200
started
process:95201
started
process:95203
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那 node 他是如何決定要用那個 process 呢 ?&lt;/p&gt;
&lt;p&gt;自版本&lt;code&gt;0.11.2&lt;/code&gt;時變導入了一個&lt;code&gt;循環式負載平衡演算法&lt;/code&gt;，它的基本概念就是&lt;code&gt;輪流&lt;/code&gt;平均的分配所有可用伺服器的負載。&lt;/p&gt;
&lt;h2 id=&#34;-&#34;&gt;那我們要著麼樣相互溝通了呢 ?&lt;/h2&gt;
&lt;p&gt;這個事實上在上一章節有提，&lt;code&gt;process&lt;/code&gt;間的相互溝通主要使用&lt;code&gt;IPC&lt;/code&gt;的方法，而在 cluster 中因為每個 worker process 的產生都是使用 &lt;code&gt;child_process.fork()&lt;/code&gt;來產生，所以相對的他也有提供&lt;code&gt;message&lt;/code&gt;來讓我們進行溝通。&lt;/p&gt;
&lt;p&gt;那我們為什麼不直接用&lt;code&gt;child_process&lt;/code&gt;呢 ?&lt;/p&gt;
&lt;p&gt;答案是方便，多進程的運行，我們同時還需要考慮到&lt;code&gt;進程通信&lt;/code&gt;、&lt;code&gt;子進程管理&lt;/code&gt;、&lt;code&gt;負載均衡&lt;/code&gt;等問題，雖然&lt;code&gt;child_process&lt;/code&gt;可以自已寫程式來處理，但&lt;code&gt;cluster&lt;/code&gt;就已經幫我們處理好了，為何不直接拿來用呢 ? 對吧。&lt;/p&gt;
&lt;h2 id=&#34;-process--&#34;&gt;如果有一個 process 掛掉了會如何 ?&lt;/h2&gt;
&lt;p&gt;在某些時後，如果某個 process 掛掉了，會如何呢 ? 當然不會著麼樣，只要有處理的話。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cluster&lt;/code&gt;當然有考慮到這點，這種功能事實上在可擴展性上很重要，我們簡單的寫段程式碼，讓某個 process 來個隨機掛點，如下程式碼，大約每幾秒鐘就會 error 一次。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;createServer&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) {
       ....

    }).&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;setTimeout&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Ooops&amp;#39;&lt;/span&gt;);
        }, Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;ceil&lt;/span&gt;(Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;random&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;);
    });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後會監聽&lt;code&gt;cluster&lt;/code&gt;的&lt;code&gt;exit&lt;/code&gt;，該事件代表如果任何一個 worker 離開該&lt;code&gt;master process&lt;/code&gt;則會觸發。當我們發生事件時，會先判斷是否錯誤，如果是的話，則在&lt;code&gt;fork()&lt;/code&gt;一個&lt;code&gt;worker&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;雖然掛掉的 worker 可能還在重新建立，但是不會影響到我們應用程式的使用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cluster&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;isMaster&lt;/span&gt;) {

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numCPUs&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cluster&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fork&lt;/span&gt;();
        &lt;span style=&#34;color:#a6e22e&#34;&gt;cluster&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;exit&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;code&lt;/span&gt;) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;suicide&lt;/span&gt;) {
                &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Worker crashed. Starting a new worker&amp;#39;&lt;/span&gt;);
                &lt;span style=&#34;color:#a6e22e&#34;&gt;cluster&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fork&lt;/span&gt;();
            }
        })
    }
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading&#34;&gt;我想更新應該程式但不想停機&lt;/h2&gt;
&lt;p&gt;在實務上，某些大型的應該程式是 24 X 7 的在跑，就算是更新也不能停機，所以要著麼解決呢 ? 可行的解決方案是實作 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;零停機時間的重啟&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比較白話文的來說明實作過程就是 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一次只重新啟動一個 worker ，其餘的繼續工作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我們實作的方法參考&lt;code&gt;Miario Casciaro 的 nodejs設計模式一日&lt;/code&gt;，首先我們會在&lt;code&gt;SIGUSR2&lt;/code&gt;中設置監聽器，當接受到 SIGUSR2 信號時會一個一個將 worker 重新啟動。&lt;/p&gt;
&lt;p&gt;其中我們有使用 unix 信號，它也是一樣 IPC 的方法，它是一種異歲的通知機制，主要用來和某個 process 說一個事情已經被發生。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cluster&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;isMaster&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master process:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pid&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cpu num: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numCPUs&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;());

    &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SIGUSR2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Received SIGUSR2 from system&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Restarting workers&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;workers&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Object.&lt;span style=&#34;color:#a6e22e&#34;&gt;keys&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cluster&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;workers&lt;/span&gt;);
        
        &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;restartWorker&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;){
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;workers&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cluster&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;workers&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;workers&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]];
            &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Stopping worker:&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pid&lt;/span&gt;);
            &lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;disconnect&lt;/span&gt;();

            &lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;exit&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;exitedAfterDisconnect&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;

                &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newWorker&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cluster&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fork&lt;/span&gt;();
                &lt;span style=&#34;color:#a6e22e&#34;&gt;newWorker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;listening&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;restartWorker&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
                })
            })

        }
        &lt;span style=&#34;color:#a6e22e&#34;&gt;restartWorker&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    })
    
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;為了要模擬這種狀態，我們需要使用下面指令，來 kill 掉我們&lt;code&gt;master process&lt;/code&gt;，然後當執行這行時，就會執行&lt;code&gt;process.on(&#39;SIGUSR2&#39;)&lt;/code&gt;裡面的指令開啟重新的一個一個啟動 worker。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kill -SIGUSR2 &amp;lt;PID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;結果如下。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Restarting workers
Stopping worker:14239
started
process:14249
Stopping worker:14240
started
process:14255
Stopping worker:14241
started
process:14256
Stopping worker:14242
started
process:14257
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不過除了上面自已寫以外，當然還有其它的東西可以完成這項工作。&lt;/p&gt;
&lt;h3 id=&#34;-forever---pm2&#34;&gt;那就是 forever  或 pm2&lt;/h3&gt;
&lt;p&gt;這套工具最主要的功用是&lt;code&gt;持繼的保持後台的運作&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;就算你的程式發生錯誤，他也會自動的幫你重新啟動，而且就像我們上面的說的，要更新應用程式時，他也會保持系統的持繼運作。&lt;/p&gt;
&lt;p&gt;他的用法很簡單。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install -g forever
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然後在執行下面指令，這樣就完成了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;forever start xxxx.js
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;heading1&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;嚴格來說本篇文章大部份都針對&lt;code&gt;* X 軸 : 複制&lt;/code&gt;的方法來進行說明，本篇中所提到的 cluster，就是用來複制的方法之一，但這只是之一，在傳統上也有一些技巧更常被使用到的，那就是在不同 port 或不同機器上啟動應用程式的多個實例，然後在使用一個&lt;code&gt;反向代理器&lt;/code&gt;來處理，下一篇文章中我們將會繼續對於&lt;code&gt;X軸的擴展 : 複制&lt;/code&gt;的方法進行討論。&lt;/p&gt;
&lt;h2 id=&#34;heading2&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/api/cluster.html&#34;&gt;node官網&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.alloyteam.com/2015/08/nodejs-cluster-tutorial/&#34;&gt;Alloytem 解读Node.js的cluster模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/Unix%E4%BF%A1%E5%8F%B7&#34;&gt;維基-unix訊號&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;nodejs設計模式-Mario Casciaro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Node之CPU吃重的任務要如何處理 ? </title>
      <link>https://mark-lin.com/posts/20170604/</link>
      <pubDate>Sun, 04 Jun 2017 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20170604/</guid>
      <description>&lt;p&gt;這篇文章中，我們希望學習到 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在開發&lt;code&gt;nodejs&lt;/code&gt;時，如果遇到&lt;code&gt;cpu&lt;/code&gt;密集型的任務時，要如何處理 ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先我們先來複習一下&lt;code&gt;nodejs&lt;/code&gt;的機制一下。&lt;/p&gt;
&lt;p&gt;我們都知道&lt;code&gt;nodejs&lt;/code&gt;是屬於&lt;code&gt;單一執行序架構&lt;/code&gt;，在其它的語言裡，每當有一個請求進來時，它們都會產生一個&lt;code&gt;執行緒&lt;/code&gt;，但&lt;code&gt;nodejs&lt;/code&gt;則否，他是用&lt;code&gt;一個執行緒&lt;/code&gt;就來處理所有的請求，而他的背後就是有個&lt;code&gt;事件機制設計&lt;/code&gt;才能做到這種方法。&lt;a href=&#34;http://marklin-blog.logdown.com/posts/294474-javascript-event-driven&#34;&gt;請參考這篇&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;但為什麼要設計成用&lt;code&gt;單一執行序架構&lt;/code&gt;呢?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這邊我們要先來說說&lt;code&gt;I/O&lt;/code&gt;操作。&lt;/p&gt;
&lt;h2 id=&#34;io-&#34;&gt;I/O 問題&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;I/O&lt;/code&gt;就是電腦中資料與記憶體、硬碟或網路的輸入和輸出，他基本上是電腦作業裡最慢的事物，&lt;code&gt;I/O&lt;/code&gt;操作基本上對 cpu 而言通常負擔很小，但是問題就在於&lt;code&gt;它很耗時&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;傳統的&lt;code&gt;阻塞I/O&lt;/code&gt;設計方式如下 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data = getData();

print(data);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我們假設&lt;code&gt;getData&lt;/code&gt;是要去讀取一個檔案，而這時會等到&lt;code&gt;getData&lt;/code&gt;執行完後，就資料傳送給&lt;code&gt;data&lt;/code&gt;時我們才可以使用。&lt;/p&gt;
&lt;p&gt;那假設我們這個&lt;code&gt;getData&lt;/code&gt;要讀很久，那這樣的話其它的請求著麼辦 ?&lt;/p&gt;
&lt;p&gt;傳統的作法就會像下面這張圖一樣，系統會分別的開啟不同的執行緒來進行處理，如此一來，當有某個執行緒因&lt;code&gt;I/O&lt;/code&gt;操作而阻塞時，就不會影響到其它的請求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170710-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;這種作法的缺點就在於 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;開啟執行緒的成本不低，它會消耗記憶體而且引發環境切換&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那&lt;code&gt;node&lt;/code&gt;他著麼處理呢 ?&lt;/p&gt;
&lt;p&gt;他使用&lt;code&gt;單一執行緒機制&lt;/code&gt;，而他的執行緒中有一個機制被稱為&lt;code&gt;事件機制&lt;/code&gt;，簡單的說事件機制可以將所有的請求收集起來，並且將需要長時間處理的工作丟出去工作給其它人做(I/O)，然後繼續接收新的請求，就如同下圖一樣，這樣的優點就在於，他可以接受更多的請求，，而不會因為一個長時間的I/O，其它東西就都卡住不能動。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170710-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;但他也是有缺點的 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;它無法充分利用多核 cpu 資源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;-event-loop--cpu--&#34;&gt;當 Event loop 遇到 CPU 密集型任務會發生什麼事 ?&lt;/h2&gt;
&lt;p&gt;上面有提到&lt;code&gt;單一執行緒機制&lt;/code&gt;有一個缺點，那就是無法統分利用cpu資源，這是什麼意思呢 ?&lt;/p&gt;
&lt;p&gt;傳統的方式，每個請求分配一個執行緒，他都可以得到一個不同於自已的 cpu，在這種情況下多執行緒可以大大的提高資源使用效率。&lt;/p&gt;
&lt;p&gt;而這也代表的&lt;code&gt;單執行緒&lt;/code&gt;他就只能占用一個 cpu ，並且如果某個任務是很吃 cpu 的工作時，這執行緒就會被那個任務占用，導致其它的任務、請求都無法執行。&lt;/p&gt;
&lt;p&gt;我們下面簡單的寫一段程式碼來看看會發生什麼事情。&lt;/p&gt;
&lt;p&gt;下面這段程式碼裡，我們將簡單的建立一個&lt;code&gt;server&lt;/code&gt;，它一收到請求，就會開始計算&lt;code&gt;費波南西數列&lt;/code&gt;，這種運算基本上就是一個很耗 CPU 的工作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;createServer&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pid&lt;/span&gt;);

    &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;writeHead&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;());
    &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;();

}).&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;started&amp;#39;&lt;/span&gt;);
});

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後當我們啟動這個 server 後，你會注意到，第一個請求發送以後，你會在 console 看到下面的輸出 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;master:68375
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也就是打印出這個&lt;code&gt;process&lt;/code&gt;的 pid ，但它會還沒回傳值給第一個請求，然後這時如果你在發送一個請求，你會注意到&lt;code&gt;它沒有打印出 master:68375&lt;/code&gt;這段資訊。&lt;/p&gt;
&lt;p&gt;為什麼呢 ? 這就是我們上面說的&lt;code&gt;node屬於單一執行緒機制&lt;/code&gt;，他就只能占用一個 cpu 並且因為第一個請求的運算還在執行，導致其它的請求都會無法執行，只有等到第一個請求結束後，才會繼續執行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意 &lt;code&gt;process 進程&lt;/code&gt; 與 &lt;code&gt;thread 執行緒&lt;/code&gt;是兩個不一樣的東西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我們這邊簡單的說明一下&lt;code&gt;process進程&lt;/code&gt;與&lt;code&gt;thread執行緒&lt;/code&gt;的關係， 首先在傳統的系統中&lt;code&gt;進程是個容器，而執行緒就是容器中的工作單位&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;進程&lt;/code&gt;就是我們在 windows 系統下，打開工作管員裡的&lt;code&gt;processes&lt;/code&gt;，你看到一行一行的就都是進程，而且你打開每個&lt;code&gt;chrome頁面&lt;/code&gt;他都是一個進程，而進程間的通訊則使用&lt;code&gt;IPC&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;執行緒&lt;/code&gt;是包含在進程內的工作單位，在同一個進程裡，所有的執行緒都共享系統資源，但他們同時也都有自已的&lt;code&gt;stack&lt;/code&gt;和&lt;code&gt;context&lt;/code&gt;，而且可以共享變數。&lt;/p&gt;
&lt;h2 id=&#34;-&#34;&gt;那要如何解決呢 ?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;開一個新的 process 來處理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 javascript 中我們可以使用一個叫&lt;code&gt;Web Worker&lt;/code&gt;的東西來處理，可以看一下筆者年輕時寫的這篇文章&lt;a href=&#34;http://marklin-blog.logdown.com/posts/302772-walking-in-the-parallel-universe-of-html5-web-worker&#34;&gt;HTML5之走在平行時空的Web Worker&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;而在 node 中我們可以使用&lt;code&gt;child_process&lt;/code&gt;，這個模組可以幫助我們建立&lt;code&gt;child process&lt;/code&gt;，中文來說就是&lt;code&gt;子進程&lt;/code&gt;，我們使用這模組中的&lt;code&gt;fork&lt;/code&gt;來建立時，它同時會提供&lt;code&gt;IPC通道&lt;/code&gt;讓我們可以使用訊息來進行&lt;code&gt;process 與 process 的溝通&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;接下來我們就是要將費波南西數列的運算，丟到另一個子進程中來處理，這樣我們的請求也就可以同時的處理了。&lt;/p&gt;
&lt;p&gt;下面為我們修改後的程式碼，我們會使用&lt;code&gt;child_process.fork(&#39;./subset.js&#39;)&lt;/code&gt;來建立子進程，並且我們會使用&lt;code&gt;send&lt;/code&gt;方法將資料丟到子進程中，然後在用&lt;code&gt;on(&#39;message&#39;)&lt;/code&gt;來監聽回傳結果。&lt;/p&gt;
&lt;p&gt;這種寫法實際執行測試後，你會發生每當你發一個請求時，都會打印出&lt;code&gt;master:68375&lt;/code&gt;，這也代表我們的執行緒不會在塞住了，而且你在實際丟兩個請求來測試有用子進程的執行速度，你會發現快了兩倍。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;child_process&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;child_process&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;createServer&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pid&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;child&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;child_process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fork&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./subprocess.js&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;child&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt; });

    &lt;span style=&#34;color:#a6e22e&#34;&gt;child&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;writeHead&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;);
        &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;());
        &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;();
    })
}).&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;started&amp;#39;&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// subprocess.js
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fibo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fibo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fibo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;child:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pid&lt;/span&gt;)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;({&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fibo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;)});
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是呢 ? 上面這種寫法還是有個缺點，那就是代表每一個請求都會多開一個子進程，這樣也代表這請求一多就會開了一堆子進程，這樣是很浪費資源的，所以接下來我們會修改一下&lt;code&gt;增加一個 pool 來管理這些子進程&lt;/code&gt;，好處在於可以節省資源，而另一個好處可以&lt;code&gt;阻斷服務攻擊 Dos&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;這個我們就留到下一篇&lt;code&gt;cluster&lt;/code&gt;時在來說明囉。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/api/child_process.html&#34;&gt;node官網文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;書-nodejs設計模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/cn/articles/nodejs-weakness-cpu-intensive-tasks&#34;&gt;Node.js软肋之CPU密集型任务&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Node 設計模式之代理器 ( Proxy )</title>
      <link>https://mark-lin.com/posts/20170603/</link>
      <pubDate>Sat, 03 Jun 2017 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20170603/</guid>
      <description>&lt;p&gt;本篇文章中我們將要解決以下的問答。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;什麼是代理器模式 ?&lt;/li&gt;
&lt;li&gt;我們為什麼要使用它 ?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中本篇文章還會介紹&lt;code&gt;ES6&lt;/code&gt;所提供的&lt;code&gt;Proxy&lt;/code&gt;使用方法。&lt;/p&gt;
&lt;h2 id=&#34;-&#34;&gt;什麼是代理器模式呢 ?&lt;/h2&gt;
&lt;p&gt;首先我們先來看一張下面這張圖，這張圖基本就說明了代理器模式的概念，無論如何，&lt;code&gt;client&lt;/code&gt;和&lt;code&gt;Real Object&lt;/code&gt;之間一定會由&lt;code&gt;Proxy&lt;/code&gt;來進行溝通。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170628_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我們還可以用下面這句非常白話文的文字來表達代理器模式的精華。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我的時間很忙的，除非真的要用到我，不然請直接找我的代理人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我們簡單來寫個範例來說明一下，代理器的實際上使用，首先我們先寫一個登入的程式。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserService&lt;/span&gt;{
	&lt;span style=&#34;color:#a6e22e&#34;&gt;construct&lt;/span&gt; () {
	
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;GetUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;){
	    ......
	    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後通常我們要使用的時後會執行下面程式碼。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userService&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserService&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userService&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetUser&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mark&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123456789&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣看起來是沒什麼問題，東西是都還可以執行，然後我們來改寫成代理器的模式，我們會先建立一個&lt;code&gt;UserServiceProxy&lt;/code&gt;，我們外面要使用&lt;code&gt;UserService&lt;/code&gt;時，都只能透過這個&lt;code&gt;Proxy&lt;/code&gt;進行溝通 (想找明星，只能想找他的代理人)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意 : 這只是其中一種寫法，代理器還有很多的方法可實現。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserServiceProxy&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;construct&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;real&lt;/span&gt;){
      &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Real&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;real&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;GetUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;passowrd&lt;/span&gt;){
       &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;real&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Real&lt;/span&gt;(); 
       &lt;span style=&#34;color:#a6e22e&#34;&gt;real&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;);
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userServiceProxy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserServiceProxy&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;UserService&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userServiceProxy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetUser&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mark&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123456789&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;-proxy--&#34;&gt;為啥要用 Proxy 呢 ?&lt;/h2&gt;
&lt;p&gt;嗯 ? 那這樣有啥用處 ? 為要這樣寫 ? 上面的程式碼當然還看不出來代理器的優點，我們在將&lt;code&gt;UserService&lt;/code&gt;裡的&lt;code&gt;GetUser&lt;/code&gt;在增加幾行程式碼功能。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserService&lt;/span&gt;{
    &lt;span style=&#34;color:#a6e22e&#34;&gt;construct&lt;/span&gt;(){
       ... &lt;span style=&#34;color:#a6e22e&#34;&gt;為了使用getUserFromDB所需耗費的資源處理&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;假設&lt;/span&gt;)
    
    }
	
	&lt;span style=&#34;color:#a6e22e&#34;&gt;GetUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;){
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;saveLog&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get user&amp;#34;&lt;/span&gt;);
	    
	    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;paaword&lt;/span&gt;){
	      &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;;
	    }
	    
		 &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;chached&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;)){
		   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;;
		 }
	    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getUserFromDB&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;);
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;saveCache&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;);
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;saveLog&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get user success&amp;#34;&lt;/span&gt;);
	    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在&lt;code&gt;GetUser&lt;/code&gt;這個程式碼，我們需要寫&lt;code&gt;log&lt;/code&gt;，然後我們還要驗證使用者有沒有輸入帳號和密碼，接下來我們還要確認有沒有&lt;code&gt;cache&lt;/code&gt;，如果有的話就直接從&lt;code&gt;cache&lt;/code&gt;裡取出使用者，如果沒有就要使用帳號和密碼去取得該名使用者，最後還要在將它存放到&lt;code&gt;cache&lt;/code&gt;中和再寫個&lt;code&gt;log&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;雖然上面的程式碼可以執行，但事實上有三個問題。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;違反了&lt;code&gt;單一職責原則&lt;/code&gt;，&lt;code&gt;GetUser&lt;/code&gt;裡面做了太多的事，會變的不好測試與修改。&lt;/li&gt;
&lt;li&gt;上面的建構子有假設，他在實體化時，事實上需要做一些耗費資源的事情，這也表示我們的核心是&lt;code&gt;getUserFromDB&lt;/code&gt;除非確定要使用到他，不然請全部找他的代理人處理(Proxy)。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以為了改善以上兩個問題我們將程式碼修改成下面這樣。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserService&lt;/span&gt;{
    &lt;span style=&#34;color:#a6e22e&#34;&gt;construct&lt;/span&gt;(){
       ...&lt;span style=&#34;color:#a6e22e&#34;&gt;conect&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.
       ...&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cached&lt;/span&gt;.
       ... &lt;span style=&#34;color:#a6e22e&#34;&gt;耗費很大的資源的東西&lt;/span&gt;
    
    }
	
	&lt;span style=&#34;color:#a6e22e&#34;&gt;GetUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;){
	    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getUserFromDB&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;);
	    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;;
	}
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;Class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserServiceProxy&lt;/span&gt;{
    &lt;span style=&#34;color:#a6e22e&#34;&gt;construct&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;real&lt;/span&gt;){
      &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Real&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;real&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;GetUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;passowrd&lt;/span&gt;){
       &lt;span style=&#34;color:#a6e22e&#34;&gt;saveLog&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get User&amp;#34;&lt;/span&gt;);
       &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;paaword&lt;/span&gt;){
	      &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;;
	    }
	    
		 &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;chached&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;)){
		   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;;
		 }
       &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;real&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Real&lt;/span&gt;(); 
       &lt;span style=&#34;color:#a6e22e&#34;&gt;real&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;);
       &lt;span style=&#34;color:#a6e22e&#34;&gt;saveCache&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;);
       &lt;span style=&#34;color:#a6e22e&#34;&gt;saveLog&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get user success&amp;#34;&lt;/span&gt;);
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userServiceProxy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserServiceProxy&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;UserService&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userServiceProxy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetUser&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mark&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123456789&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面這種程式碼解決了上面說提到的兩個問題，首先我們將和不屬於&lt;code&gt;getUser&lt;/code&gt;這個業務的東西完全的拉出來，他就變成單純的取得使用者，而致於第二個問題，實體化時會耗費資源這點也因為修改成上面這類型，我們只有在&lt;code&gt;必要&lt;/code&gt;時才能需用真的用到&lt;code&gt;Real Obj&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;上面這種寫法還有一個好處，假設我們&lt;code&gt;UserService&lt;/code&gt;要修改成&lt;code&gt;UserFBService&lt;/code&gt;的話我們只要確定&lt;code&gt;UserFBService&lt;/code&gt;有實作&lt;code&gt;GetUser&lt;/code&gt;，就幾乎可以不用修改程式碼直接進行使用。
不在這事實上是&lt;code&gt;DI(Dependency Injection )&lt;/code&gt;的運用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserFBService&lt;/span&gt;{
    &lt;span style=&#34;color:#a6e22e&#34;&gt;construct&lt;/span&gt;(){
       ...&lt;span style=&#34;color:#a6e22e&#34;&gt;conect&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.
       ...&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cached&lt;/span&gt;.
       ... &lt;span style=&#34;color:#a6e22e&#34;&gt;耗費很大的資源的東西&lt;/span&gt;
       ...&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fb&lt;/span&gt;...
    }
	
	&lt;span style=&#34;color:#a6e22e&#34;&gt;GetUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;){
	    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getUserFromDB&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;);
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;saveCache&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;);
	    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;;
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userServiceProxy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserServiceProxy&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;UserFBService&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userServiceProxy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetUser&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mark&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123456789&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面只是簡單的用程式碼來表達代理器可以做什麼事，但我們可以歸納出一句話，來說明為什麼要用代理器。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;代理器就是為了保護實體而存在。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然後我們還可以將上面那句話，在簡單用三點功能來說明。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;攔截和監視外部進來的東西。&lt;/li&gt;
&lt;li&gt;降低實體物件的複雜性。&lt;/li&gt;
&lt;li&gt;在進行耗費資源的操作前，先進行管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;es6--proxy&#34;&gt;ES6 的 Proxy&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;es6&lt;/code&gt;時，他有推出一個功能，那就是&lt;code&gt;Proxy&lt;/code&gt;，它的核心功能事實上就和我們上面說的一樣，這邊在複習一次。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Proxy 就是為了保護實體而存在。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我們直接來看使用的方法。&lt;/p&gt;
&lt;h3 id=&#34;heading&#34;&gt;資料設定的驗證&lt;/h3&gt;
&lt;p&gt;這邊我們將要來簡單的實作資料驗證的功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假設我們有一個物件&lt;code&gt;obj&lt;/code&gt;，每當要為他設置欄位時，我們都要先驗證欄位該值不能為&lt;code&gt;數字&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {};
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input_data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Proxy(&lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt;,{
    &lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt;){
    	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;number&amp;#39;&lt;/span&gt;){
    	   &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; Error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;不能是數值喔&amp;#34;&lt;/span&gt;)
    	}
    	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Reflect&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt;);
    }
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;執行的結果如下，上面程式碼中，&lt;code&gt;set&lt;/code&gt;就是代表如果該實際物件被被設置欄位時，會先在這個&lt;code&gt;proxy&lt;/code&gt;的&lt;code&gt;set&lt;/code&gt;裡面先進行處理，其中&lt;code&gt;target&lt;/code&gt;就是我們的&lt;code&gt;obj&lt;/code&gt;實際物件，&lt;code&gt;key&lt;/code&gt;就是我們要新增的欄位，以下範例來看就是&lt;code&gt;title&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;input_data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// Error !!!!!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;input_data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bababab&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// OK !!!!!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;-log-&#34;&gt;使用的 log 撰寫&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;假設我們有一個物件&lt;code&gt;obj&lt;/code&gt;並且它有一個方法&lt;code&gt;getData&lt;/code&gt;，然後我們每次在呼叫該方法時，會自動寫 log 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;getData&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; () =&amp;gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mark&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,
    }
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Proxy(&lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt;,{
	&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt;){
	  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;];
	  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (...&lt;span style=&#34;color:#a6e22e&#34;&gt;arguments&lt;/span&gt;) =&amp;gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log ~~~~ &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fucntion :&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;)
	  		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Reflect&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;arguments&lt;/span&gt;);
	  }
	}
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;執行結果如下程式碼。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getData&lt;/span&gt;();

&lt;span style=&#34;color:#75715e&#34;&gt;// log ~~~~ fucntion :getData
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;{
   &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mark&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading1&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;最後我們來簡單的為最上面問的兩個問題做些結論。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;什麼是代理器模式 ?&lt;/li&gt;
&lt;li&gt;我們為什麼要使用它 ?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;代理器模式就是一個實際物件，只能透過代理器物件來連絡他。&lt;/li&gt;
&lt;li&gt;而我們為什麼要使用他呢 ? 主要原因就是&lt;code&gt;為了保護實際物件&lt;/code&gt;，不要讓他做太多的事，已經避免三不五十的都時用他，只有在真的會用到他時才使用。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;heading2&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&#34;&gt;developer.mozilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3cplus.com/javascript/use-cases-for-es6-proxies.html&#34;&gt;实例解析ES6 Proxy使用场景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;Node.js設計模式 (書) &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;Javascript設計模式與開發實踐 (書) &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;javascript設計模式(o&#39;reilly)(書)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;深入淺出設計模式 (o&#39;reilly)(書)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>