<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c井字號 on 拿鐵派的馬克 Blog</title>
    <link>https://mark-lin.com/tags/c%E4%BA%95%E5%AD%97%E8%99%9F/</link>
    <description>Recent content in c井字號 on 拿鐵派的馬克 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <managingEditor>h091237557@gmail.com (marklin)</managingEditor>
    <webMaster>h091237557@gmail.com (marklin)</webMaster>
    <lastBuildDate>Wed, 26 Aug 2015 19:51:35 +0800</lastBuildDate>
    
        <atom:link href="https://mark-lin.com/tags/c%E4%BA%95%E5%AD%97%E8%99%9F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>物件導向系列菜單 11-『 泛型 ( Generics ) 』</title>
      <link>https://mark-lin.com/posts/20150826/</link>
      <pubDate>Wed, 26 Aug 2015 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20150826/</guid>
      <description>&lt;h2 id=&#34;heading&#34;&gt;什麼是泛型呢&lt;/h2&gt;
&lt;p&gt;什麼是泛型呢~? 這個東西&lt;!-- raw HTML omitted --&gt;有看過吧，你有時後會在程式碼裡看到List&lt;!-- raw HTML omitted --&gt;這種寫法，
這代表List串列中，你可以存放『T』型別，例如List&lt;!-- raw HTML omitted --&gt;就是裡面存放string，List&lt;!-- raw HTML omitted --&gt;就是裡面存放int。&lt;!-- raw HTML omitted --&gt;也被稱為型別參數。事實上我們可以將範例想成簡單點，那就是一個可以讓你自由決定型別的功能。&lt;/p&gt;
&lt;h2 id=&#34;heading1&#34;&gt;為什麼要有泛型呢&lt;/h2&gt;
&lt;p&gt;假設需要我們建立一個ArrayList，但確發現要取出值都需要轉型，這是因為當你將某個物件存入ArrayList集合時，它的型別就隱含轉換成object了。只要是命名空system.Collection的集合類別都是如何(stack之類的)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://user-image.logdown.io/user/13878/blog/13097/post/289984/t4y2DW3cRLqj5wrMS3Ea_ScreenClip.png&#34; alt=&#34;ScreenClip.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;轉型是沒什麼問題，但在處理集合時，常常都會需要使用迴圈來取出或存入集合元素，假設迴歸數很大很大的話，那就會對程式的執行速度產生一定的影響了(不過不嚴重)。還有一點就是，缺泛編輯時期的安全檢查。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://user-image.logdown.io/user/13878/blog/13097/post/289984/SDgszgZRV26y4PyFxjIv_ScreenClip.png&#34; alt=&#34;ScreenClip.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading2&#34;&gt;泛型的優點&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以用不同的型別去做相同動作的事情如我上述程式碼的這段。
&lt;img src=&#34;http://user-image.logdown.io/user/13878/blog/13097/post/289984/PRaZD6mgSMepZgimCsh6_ScreenClip.png&#34; alt=&#34;ScreenClip.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以減少Boxing與UnBoxing，使效能增加。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;讓程式碼更有彈性、重複使用程式碼。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading3&#34;&gt;泛型類別和方法&lt;/h2&gt;
&lt;p&gt;這邊寫個泛型的小範例，來知道一下大概的寫法。下列程式碼建立Car類別，其中Class Car&amp;lt;T,T1&amp;gt;被稱為『泛型類別』，而T power 被稱為『泛型參數』。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://user-image.logdown.io/user/13878/blog/13097/post/289984/9XczePSTSGiosu2dbhQz_ScreenClip.png&#34; alt=&#34;ScreenClip.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://user-image.logdown.io/user/13878/blog/13097/post/289984/JSfwap0Q3aTGtbKYRPAa_ScreenClip.png&#34; alt=&#34;ScreenClip.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;輸出結果&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://user-image.logdown.io/user/13878/blog/13097/post/289984/Ii1cEkQuToiGfGxmQoRc_ScreenClip.png&#34; alt=&#34;ScreenClip.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading4&#34;&gt;類別參數的條件約束&lt;/h2&gt;
&lt;p&gt;既然泛型可以讓我們自由決定型別，但有時候太自由也不太好，那我們要著麼樣來約束呢?如下，其中『where』就是就是限制的關鍵字，而『T』就是受限制的型別參數，最後Class就是限制的內容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://user-image.logdown.io/user/13878/blog/13097/post/289984/oD34R9y8QvCixjKsevCH_ScreenClip.png&#34; alt=&#34;ScreenClip.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;下列程式碼為多參數限定。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://user-image.logdown.io/user/13878/blog/13097/post/289984/5g1O0SCDQ7uYXORSZhPL_ScreenClip.png&#34; alt=&#34;ScreenClip.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中限制的內容請參考下圖，來源為MSDN。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://user-image.logdown.io/user/13878/blog/13097/post/289984/SmWTzMz5QHaEf5XABiEI_ScreenClip.png&#34; alt=&#34;ScreenClip.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;我們這邊在來寫個簡單的小程式。&lt;/p&gt;
&lt;p&gt;建立個Car類別，並且有二個型別參數T與T1，並限制T型別參數必預是『參數型別』。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://user-image.logdown.io/user/13878/blog/13097/post/289984/VxyIQjsBT92LUgELQiko_ScreenClip.png&#34; alt=&#34;ScreenClip.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;然後我們用兩種寫法來測試看看，第一種為T指定為 string型別，第二種為T指定為int型別。
其中，string型別會正確執行，這邊別忘了string為參考型別喔! 而第二種int則會出錯。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://user-image.logdown.io/user/13878/blog/13097/post/289984/miYOFd3lRgyuVpoXQUwY_ScreenClip.png&#34; alt=&#34;ScreenClip.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;注&lt;/code&gt;:
如果不知道實值與參考是啥的可以參考一下小弟寫的這篇&lt;code&gt;實值型別與參考型別的記憶體配置&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading5&#34;&gt;未繫結的型別參數有幾項注意事項&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;無法使用!= 和 == 運算子，因為不能確定實體的型別引數是否會支援這些運算子。&lt;/li&gt;
&lt;li&gt;這些參數可與System.Object相互轉換或明確轉換成任何介面型別。&lt;/li&gt;
&lt;li&gt;你可以與NULL比較。如果將未繫結的型別參數與NULL比較，那麼當型別引數為實值型別時一定會傳FALSE。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading6&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://frankiestudy.blogspot.tw/2012/09/c.html&#34;&gt;http://frankiestudy.blogspot.tw/2012/09/c.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/zh-tw/library/512aeb7t.aspx&#34;&gt;http://msdn.microsoft.com/zh-tw/library/512aeb7t.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/zh-tw/library/d5x73970.aspx&#34;&gt;http://msdn.microsoft.com/zh-tw/library/d5x73970.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/zh-tw/library/kx37x362.aspx&#34;&gt;http://msdn.microsoft.com/zh-tw/library/kx37x362.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>物件導向系列菜單 10 -『 委派 ( Delegate ) 』</title>
      <link>https://mark-lin.com/posts/20150825/</link>
      <pubDate>Tue, 25 Aug 2015 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20150825/</guid>
      <description>&lt;h2 id=&#34;heading&#34;&gt;什麼是委派&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;委派是以特定參數清單和傳回型別表示對方法的參考型別。 當您具現化委派時您可以使其執行個體具有相容簽章和傳回型別的所有方法。(MSDN)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;白話文來說，委派方法是一種參考型別(Type)，可以用來將方法當做引數傳遞給其他方法。&lt;/p&gt;
&lt;p&gt;圖為委派型別的宣告範例&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://user-image.logdown.io/user/13878/blog/13097/post/289984/tMeVGFolRSKI6zycUKE3_ScreenClip.png&#34; alt=&#34;ScreenClip.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading1&#34;&gt;為什麼要用委派&lt;/h2&gt;
&lt;p&gt;從類別的設計者來看，在設計類別時，可能會碰到某個方法需要額外處理，但又不想把該處理想在這個類別裡，因為有可能變化很多，又或是無法預先得知處理的規則。
(註 : 這部份主要參考Huan-Lin的文章)&lt;/p&gt;
&lt;h4 id=&#34;heading2&#34;&gt;簡單用個情境來說明委派的用法&lt;/h4&gt;
&lt;p&gt;維京老大有一艘戰船，這艘船是老大專門買來給小弟用去打劫的(主要原因是因為老大怕死和麻煩)，為了維護自身利益，老大定了一個用船契約範本，上面定了兩個規定分別為&lt;code&gt;回傳string型別&lt;/code&gt;與&lt;code&gt;輸入一個string型別的參數&lt;/code&gt;，小弟需要自行寫一份參考老大契約範本的契約，裡面一定要符合這兩項規定，小弟才能拿這份契約去和老大借船，然後執行自行寫的打劫計畫。&lt;/p&gt;
&lt;p&gt;依上述的模擬情境來寫個程式碼來看看 ~首先先宣告一個委派方法，這就是維京老大所寫的契約範本，上面規定，小弟的契約裡需要符合兩個條件分別為&lt;code&gt;回傳string型別&lt;/code&gt;與
&lt;code&gt;輸入一個string型別的參數&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Attack(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; str);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後小弟1這時想要和老大借船來幹一票大的~~ ，所以開始寫契約，如下，有沒有符合老大的範本要求呢??『回傳string型別』與『輸入一個string型別的參數』，嗯都有，拿去給老大看應該會答應!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Attack_Plan1(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; str)
        {
            &lt;span style=&#34;color:#75715e&#34;&gt;//這邊可以小弟可自訂自已的攻擊計畫
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;//反正最後有回傳黃金(string型別)給老大就好
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            Console.WriteLine(str);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;給老大的黃金&amp;#34;&lt;/span&gt; ;

        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這時小弟1就跑去和老大借船.
老大:嗯很好有符合，~ 努力去(為我)打劫吧!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; button1_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
        {
            &lt;span style=&#34;color:#75715e&#34;&gt;//C# 2.0寫法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            Attack attack_plan = Attack_Plan1;
            GoToAttackWithBattleShip(attack_plan, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Attack&amp;#34;&lt;/span&gt;);
        }
  

        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; GoToAttackWithBattleShip(Attack attack_plan, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; str)
        {
            textBox1.Text = attack_plan(str);
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中這時又來個小弟2，他也想要船，但他沒注意到契約範本規則，然後建立了下面的契約，不符合&lt;code&gt;傳入一個string型別的參數&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt; 	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Attack_Plan2(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; str)
        {       
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;給老大的黃金&amp;#34;&lt;/span&gt; ;
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這時它還是傻傻的跑去向老大借船，結果… 就被打斷腿了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	 &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; button1_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
    {
            &lt;span style=&#34;color:#75715e&#34;&gt;//C# 2.0寫法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            Attack attack_plan = Attack_Plan2;
            GoToAttackWithBattleShip(attack_plan, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Attack&amp;#34;&lt;/span&gt;);
     }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading3&#34;&gt;多重委派&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;delegate&lt;/code&gt;物件具有一種屬性，就是可以使用+運算子將多個物件指派給一個委派執行的個體由於維京老大越來越懶了，他開始討厭一次來一個的模式，於是他就開始使用『多重委派』，出船一次的就可以帶小弟1…2…3 一起去打劫，打完後在回來，維京老大笑哈哈~。&lt;/p&gt;
&lt;p&gt;範例程式碼如下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;    	&lt;span style=&#34;color:#75715e&#34;&gt;//宣告一個抓取名字的委派方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Attack (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; str);

        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; button1_Click( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
        {
            &lt;span style=&#34;color:#75715e&#34;&gt;//C# 2.0寫法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            Attack attack_plan = Attack_Plan1;
            attack_plan += Attack_Plan2;
            GoToAttackWithBattleShip(attack_plan, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Attack&amp;#34;&lt;/span&gt; );
        }

        &lt;span style=&#34;color:#75715e&#34;&gt;//顯示Page的文字
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; GoToAttackWithBattleShip( Attack attack_plan, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; str)
        {
            textBox1.Text = attack_plan(str);
        }


        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Attack_Plan1( &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; str)
        {
            &lt;span style=&#34;color:#75715e&#34;&gt;//這邊可以小弟可自訂自已的攻擊計畫
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;//反正最後有回傳黃金(string型別)給老大就好
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            Console .WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;小弟1執行打劫活動囉~~~&amp;#34;&lt;/span&gt; );
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;給老大的黃金&amp;#34;&lt;/span&gt; ;

        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Attack_Plan2( &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; str)
        {
            Console .WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;小弟2執行打劫活動囉~~~&amp;#34;&lt;/span&gt; );
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;給老大的黃金&amp;#34;&lt;/span&gt; ;
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading4&#34;&gt;多重委派特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;它會依順序來呼叫&lt;/li&gt;
&lt;li&gt;只有相同型別的委派才能加以結合&lt;/li&gt;
&lt;li&gt;委派清單不會過濾掉重覆的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我們將上面程式碼再運用+運算子將Attack_Plan1再加一次。則結果如下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt; 	 &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; button1_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
        {
            &lt;span style=&#34;color:#75715e&#34;&gt;//C# 2.0寫法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            Attack attack_plan = Attack_Plan1;
            attack_plan += Attack_Plan2;
            attack_plan += Attack_Plan1;
            GoToAttackWithBattleShip(attack_plan, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Attack&amp;#34;&lt;/span&gt; );
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;執行結果&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://user-image.logdown.io/user/13878/blog/13097/post/289984/h5oInrBeRjKWOqJ0KxLO_ScreenClip.png&#34; alt=&#34;ScreenClip.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法不需要完全符合委派型。請參閱在委派中使用變異數 (C# 和 Visual Basic)。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;heading5&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/zh-tw/library/ms173171.aspx&#34;&gt;http://msdn.microsoft.com/zh-tw/library/ms173171.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://huan-lin.blogspot.com/2009/01/delegate-revisited-csharp-1-to-2-to-3.html&#34;&gt;http://huan-lin.blogspot.com/2009/01/delegate-revisited-csharp-1-to-2-to-3.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dotblogs.com.tw/billchung/Tags/%E5%A7%94%E6%B4%BE/default.aspx&#34;&gt;http://www.dotblogs.com.tw/billchung/Tags/%E5%A7%94%E6%B4%BE/default.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://marlon.blog.ithome.com.tw/post/894/61431&#34;&gt;http://marlon.blog.ithome.com.tw/post/894/61431&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>物件導向系列菜單 9-『 物件導向特性-封裝 ( Encapsulation ) 』</title>
      <link>https://mark-lin.com/posts/20150824/</link>
      <pubDate>Mon, 24 Aug 2015 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20150824/</guid>
      <description>&lt;h2 id=&#34;heading&#34;&gt;存取修飾詞&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;存取修飾詞&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;說明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;public&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;無任何存取限制。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;internal&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;只能在自已類別與專案(組件)中其它類別進行存取。(不包含其它專案)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;protected&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;只能在自已類別和子類別中存取。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;protected internal&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;只能在目前專案(組件)與子類別存取。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;private&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;在自已類別存取。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;heading1&#34;&gt;封裝的使用&lt;/h2&gt;
&lt;p&gt;封裝的使用時機 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;封裝表示讓一個類別對其他類別隱藏特定資訊，這樣有助於防止程式發生臭蟲。&lt;/li&gt;
&lt;li&gt;當你回頭編程已經有好一陣子沒有沒看程式碼時，很容易就會忘記當初你要它做什麼，那正是封裝能夠大展身手的地方。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;封裝的精神&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只要在必要時才讓欄位與方法為public&lt;/li&gt;
&lt;li&gt;將物件想成黑箱。你並不在意該方法到底是怎麼運作的。你只在意它接受你提供的輸入，並回傳正確的結果。&lt;/li&gt;
&lt;li&gt;減少程式BUG，因為相依性減少了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading2&#34;&gt;封裝性不良好類別&lt;/h2&gt;
&lt;p&gt;首先我們先建立個，幾乎沒有使用到封裝的類別BagFamer，這個類別主要是計算該農場需要多少袋飼料來養牛。&lt;/p&gt;
&lt;p&gt;農場所需飼料(袋) = 牛隻數量 * 每隻牛需要的飼料
&lt;code&gt;BagOfFeed  =  NumberOfCows * FeedMulitplier&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;三個欄位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FeedMulitplier  : 存放一隻牛需要多少袋飼料。&lt;/li&gt;
&lt;li&gt;NumberOfCows : 存放這個農場有幾隻牛。&lt;/li&gt;
&lt;li&gt;BagOfFeed : 存放這個農場需要多少飼料。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Tip.共同遵循的約定與慣例。&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;假設有一欄位PeopleNumber
私有(private)欄位會表示  peropleNumber
公用(public)欄位會表示  PeropleNumber
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;一&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;個&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;方&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;法&lt;/span&gt;
CalculateBagOfFeed() : &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;計&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;算&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;這&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;個&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;農&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;場&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;需&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;要&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;多&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;少&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;飼&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;料&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;。&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;//建立類別使用欄位儲存牛隻數量(NumberOfCows)，並且乘上一個數字	(FeedMultiplier)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//，計算出需要多少袋飼料餵養牛。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BadFamer&lt;/span&gt;
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;//欄位存放一隻牛需要多少袋飼料，預設30
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; FeedMultiplier = &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#75715e&#34;&gt;//欄位存放有幾隻牛
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; NumberOfCows;
        &lt;span style=&#34;color:#75715e&#34;&gt;//欄位存放需要有多少飼料
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; BagOfFeed;


        &lt;span style=&#34;color:#75715e&#34;&gt;//計算農場需要多少袋飼料的方法。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;   CalculateBagOfFeed()
        {
           BagOfFeed = NumberOfCows  * FeedMultiplier;
          
        }

    }


 	BadFamer myFarmer;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
        {
            InitializeComponent();
            &lt;span style=&#34;color:#75715e&#34;&gt;//實體化類別。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            myFarmer = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BadFamer ();
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; button1_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
        {
            &lt;span style=&#34;color:#75715e&#34;&gt;//設定NumberOfCows欄位有幾隻牛。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            myFarmer.NumberOfCows = (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)numericUpDown1.Value;
            myFarmer.CalculateBagOfFeed();
            textBox1.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I need &amp;#34;&lt;/span&gt; + myFarmer.BagOfFeed + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bags of feed for &amp;#34;&lt;/span&gt; + myFarmer.NumberOfCows + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; cows&amp;#34;&lt;/span&gt;;
       
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;執行結果&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://user-image.logdown.io/user/13878/blog/13097/post/289984/vxW0LyzyRcS0GmqdzkF8_ScreenClip.png&#34; alt=&#34;ScreenClip.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;雖然不使用封裝重構，可以得到正確的執行結果。但如果有一天，一位來維護你的類別的新手Coder(就是小弟我)，來不小心加了一行.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	myFarmer.BagOfFeed = 30;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;變成下列程式碼。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; button1_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
        {
            &lt;span style=&#34;color:#75715e&#34;&gt;//設定NumberOfCows欄位有幾隻牛。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            myFarmer.NumberOfCows = (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)numericUpDown1.Value;       
            myFarmer.CalculateBagOfFeed();
            myFarmer.BagOfFeed = &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
            textBox1.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I need &amp;#34;&lt;/span&gt; + myFarmer.BagOfFeed + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bags of feed for &amp;#34;&lt;/span&gt; + myFarmer.NumberOfCows + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; cows&amp;#34;&lt;/span&gt;;
       
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;執行結果&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://user-image.logdown.io/user/13878/blog/13097/post/289984/hqOVUtnZTsmy0N4wcLWv_ScreenClip.png&#34; alt=&#34;ScreenClip.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;這時你就GG了，這時是可以罵他，但你也該想想為什麼你寫的類別，為什麼這 BagOfFeed 這東西你明明只能讀，但為什麼你也開給他可以寫，&lt;code&gt;不該出現的東西出現了&lt;/code&gt;，這就代表封裝性沒有做好。&lt;/p&gt;
&lt;h2 id=&#34;heading3&#34;&gt;封裝性良好類別&lt;/h2&gt;
&lt;p&gt;接下來我們在建立一個封裝性良好的類別GoodFamer。&lt;/p&gt;
&lt;p&gt;三個欄位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;numberOfCows : NumberOfCows屬性的支援欄位。存放有農場有幾隻牛。&lt;/li&gt;
&lt;li&gt;feedMultiplier : 存放每隻牛需要多少飼料。&lt;/li&gt;
&lt;li&gt;bagOfFeed: 存放農場需要多少飼料。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二個屬性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BagOfFeed : 設立『唯讀』。讀時回傳bagOfFeed欄位。主要用來給別人看農場需要多少飼料。&lt;/li&gt;
&lt;li&gt;NumberOfCows : 設立『讀寫』。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;讀時回傳numberOfCows欄位。主要用來給人知道農場有多少牛。寫時將值寫入numberOfCows欄位，並直接計算農場所需飼料存入bagOfFeed屬性。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt; 	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GoodFamer&lt;/span&gt;
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;//會變成『NumberOfCows屬性(properties)』的支援欄位(backing field)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//不需要public的就設private
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; numberOfCows;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; feedMultiplier =&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bagOfFeed;

        &lt;span style=&#34;color:#75715e&#34;&gt;//這個就是屬性
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;   FeedMultiplier { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; feedMultiplier; } }
       
        &lt;span style=&#34;color:#75715e&#34;&gt;//BagsOfFeed屬性，只可以讀取。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; BagsOfFeed
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;
            {
                &lt;span style=&#34;color:#75715e&#34;&gt;//讀取時回傳bagOfFeed欄位。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bagOfFeed;
            }

        }


        &lt;span style=&#34;color:#75715e&#34;&gt;//這是NumberOfCows屬性(properties)的宣告
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; NumberOfCows
        {          
            &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;
            {
                &lt;span style=&#34;color:#75715e&#34;&gt;//讀取NumberOfCows屬性，就會回傳numberOfCows欄位
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; numberOfCows;
            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;
            {
                &lt;span style=&#34;color:#75715e&#34;&gt;//會將值寫入numberOfCows欄位。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;//並直接進行農場所需的飼料計算。並存入BagsOfFeed屬性.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                numberOfCows = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;
                bagOfFeed  = numberOfCows * FeedMultiplier;
               
            }
           
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;呼叫~&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt; 	GoodFamer  myFarmer;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
        {
            InitializeComponent();
            &lt;span style=&#34;color:#75715e&#34;&gt;//實體化類別。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            myFarmer = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; GoodFamer   ();
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; button1_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
        {
            &lt;span style=&#34;color:#75715e&#34;&gt;//設定NumberOfCows欄位有幾隻牛。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            myFarmer.NumberOfCows  = ( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)numericUpDown1.Value;
            textBox1.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I need &amp;#34;&lt;/span&gt; + myFarmer.BagsOfFeed  + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bags of feed for &amp;#34;&lt;/span&gt; + myFarmer.NumberOfCows + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; cows&amp;#34;&lt;/span&gt;;
       
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;執行結果&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://user-image.logdown.io/user/13878/blog/13097/post/289984/hSXKJIxRECda8Nc73wSQ_ScreenClip.png&#34; alt=&#34;ScreenClip.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;從上面執行結果，還是和上支程式一樣，那我為何還需要改程式呢??假設我和上支程式碼做一樣的修改，增加一行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	myFarmer.BagsOfFeed = 30
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改為如下程式碼。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt; 	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; button1_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
        {
            &lt;span style=&#34;color:#75715e&#34;&gt;//設定NumberOfCows欄位有幾隻牛。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            myFarmer.NumberOfCows  = ( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)numericUpDown1.Value;
            &lt;span style=&#34;color:#75715e&#34;&gt;//加入這行，試試看。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            myFarmer.BagsOfFeed = &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            textBox1.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I need &amp;#34;&lt;/span&gt; + myFarmer.BagsOfFeed  + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bags of feed for &amp;#34;&lt;/span&gt; + myFarmer.NumberOfCows + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; cows&amp;#34;&lt;/span&gt;;
       
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;結果&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://user-image.logdown.io/user/13878/blog/13097/post/289984/VJLaEO9aQJ60QNpoxRhs_ScreenClip.png&#34; alt=&#34;ScreenClip.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading4&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/zh-tw/library/vstudio/a5adyhe9(v=vs.110).aspx&#34;&gt;http://msdn.microsoft.com/zh-tw/library/vstudio/a5adyhe9(v=vs.110).aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cs0.wikidot.com/encapsulation&#34;&gt;http://cs0.wikidot.com/encapsulation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/zh-tw/library/ms173121.asp&#34;&gt;http://msdn.microsoft.com/zh-tw/library/ms173121.asp&lt;/a&gt;x&lt;/li&gt;
&lt;li&gt;深入淺出C# : &lt;a href=&#34;http://www.books.com.tw/products/0010632191&#34;&gt;http://www.books.com.tw/products/0010632191&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>物件導向系列菜單 8-『 屬性 ( Properties ) 與欄位 ( Field ) 和存取子 ( accessor ) 』</title>
      <link>https://mark-lin.com/posts/20150823/</link>
      <pubDate>Sun, 23 Aug 2015 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20150823/</guid>
      <description>&lt;h2 id=&#34;heading&#34;&gt;區別何謂屬性與何謂欄位&lt;/h2&gt;
&lt;p&gt;先來說說欄位，&lt;code&gt;欄位(Field)&lt;/code&gt;是一個&lt;code&gt;任意型別(Type)&lt;/code&gt;的變數，直接在類別(Class)與結構(struct)中宣告。&lt;code&gt;(註: 型別(Type)就是Int 、bool這些在變數前的東東)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Car&lt;/span&gt;
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;//這個就是欄位(Field)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; PeopleNumber;

    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而屬性呢?，&lt;code&gt;屬性(Properties)&lt;/code&gt;是欄位和方法的綜合體，也是直接在類別(Class)與結構(struct)中宣告，它可以提供完整的控制，你可以控制它為只能讀或寫，有時會與private 欄位(Filed)一起使用，怎麼控制呢，這就需要介紹存取子(accessor)。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Car&lt;/span&gt;
    {
          &lt;span style=&#34;color:#75715e&#34;&gt;//這個就是屬性
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; PeopleNumber { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;;}

    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;--accessor-&#34;&gt;存取子 ( accessor )&lt;/h2&gt;
&lt;p&gt;屬性的存取子包含讀取 ( Get )和 寫入 ( Set )。&lt;/p&gt;
&lt;h2 id=&#34;get&#34;&gt;Get存取子&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;get存取子&lt;/code&gt;可以用於傳回欄位值或計算它並且回傳。&lt;/p&gt;
&lt;p&gt;下列程式碼為Test 類別，有公開屬性PeopleNumber，設定為『只能讀』，但寫成降出錯喔，因為一定要有初始值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test&lt;/span&gt;
    {
       &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; PeopleNumber { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; ;}
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要改成下列程式碼，才正確。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test&lt;/span&gt;
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;//設定唯時一定要給它值。不然會出錯。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; PeopleNumber { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; {&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ;} }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;試試看寫入值的話，則有人會打斷你的腿。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;  	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
        {
            InitializeComponent();
            &lt;span style=&#34;color:#75715e&#34;&gt;//實體化Test類別成test物件。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            Test test = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Test();
           
            &lt;span style=&#34;color:#75715e&#34;&gt;//將10寫入PeopleNumber，會出錯喔
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            test.PeopleNumber = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它只能讀而以 ~&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	 &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
        {
            InitializeComponent();
            &lt;span style=&#34;color:#75715e&#34;&gt;//實體化Test類別成test物件。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            Test test = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Test();
           
            &lt;span style=&#34;color:#75715e&#34;&gt;//將10寫入PeopleNumber，會出錯喔
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;//test.PeopleNumber = 10;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;//它只能給我們讀取。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PeopleNumber屬性為:&amp;#34;&lt;/span&gt; + test.PeopleNumber);
        }

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;執&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;行&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;結&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;果&lt;/span&gt;

	PeopleNumber屬性為:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;set&#34;&gt;Set存取子&lt;/h3&gt;
&lt;p&gt;可以用於將某欄位設定值。&lt;/p&gt;
&lt;p&gt;在下列程式碼Test類別，有一屬性PeopleNumber，設為『只能寫入』，和peopleNumber欄位。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt; 	&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test&lt;/span&gt;
    {
       
        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; peopleNumber;
     &lt;span style=&#34;color:#75715e&#34;&gt;//設定只能寫。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; PeopleNumber {
           &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; {
               &lt;span style=&#34;color:#75715e&#34;&gt;//將peopleNumber欄位設定值。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;               peopleNumber = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;

               &lt;span style=&#34;color:#75715e&#34;&gt;//只是輸出給你看people欄位值為多少。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;               Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;peopleNumber欄位值為&amp;#34;&lt;/span&gt; + peopleNumber);
           }
       
        }

    }

 	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
        {
            InitializeComponent();
            &lt;span style=&#34;color:#75715e&#34;&gt;//實體化Test類別成test物件。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            Test test = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Test();
           
            &lt;span style=&#34;color:#75715e&#34;&gt;//將10寫入PeopleNumber。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            test.PeopleNumber = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
          
            &lt;span style=&#34;color:#75715e&#34;&gt;//它只能給我們寫入所以這會出錯。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;// Console.WriteLine(&amp;#34;PeopleNumber屬性為:&amp;#34; + test.PeopleNumber);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;執&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;行&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;結&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;果&lt;/span&gt;

	PeopleNumber屬性為:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;嘗試讀取看看，會出錯喔。所以要把寫的那行刪掉才可以執行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	 &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
        {
            InitializeComponent();
            &lt;span style=&#34;color:#75715e&#34;&gt;//實體化Test類別成test物件。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            Test test = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Test();
           
            &lt;span style=&#34;color:#75715e&#34;&gt;//將10寫入PeopleNumber。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            test.PeopleNumber = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
          
            &lt;span style=&#34;color:#75715e&#34;&gt;//它只能給我們寫入所以這會出錯。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PeopleNumber屬性為:&amp;#34;&lt;/span&gt; + test.PeopleNumber);
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;get--set-&#34;&gt;Get 與 Set 一起使用&lt;/h2&gt;
&lt;p&gt;在封裝概念中，通常私有欄位會與公開屬性塔配使用，原因在下篇封裝文章中說明。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt; 	&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test&lt;/span&gt;
    {
       
        &lt;span style=&#34;color:#75715e&#34;&gt;//宣告私有peopleNumber欄位
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; peopleNumber;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; PeopleNumber {
           &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; {
               &lt;span style=&#34;color:#75715e&#34;&gt;//將peopleNumber欄位設定值。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;               &lt;span style=&#34;color:#75715e&#34;&gt;//在這裡peopleNumber叫『支援欄位(Backing Field)』
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;               peopleNumber = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;

               &lt;span style=&#34;color:#75715e&#34;&gt;//只是輸出給你看people欄位值為多少。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;               &lt;span style=&#34;color:#75715e&#34;&gt;//這裡就不需要輸出給你看了，因為有Get了。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;               &lt;span style=&#34;color:#75715e&#34;&gt;//Console.WriteLine(&amp;#34;peopleNumber欄位值為&amp;#34; + peopleNumber);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;           }

            &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;
            {
                &lt;span style=&#34;color:#75715e&#34;&gt;//回傳peopleNumber欄位值，你也可以在這進行計算 例如乘10或打折之類的。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; peopleNumber;
            }
       
        }

    }


	 &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
        {
            InitializeComponent();
            &lt;span style=&#34;color:#75715e&#34;&gt;//實體化Test類別成test物件。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            Test test = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Test();
           
            &lt;span style=&#34;color:#75715e&#34;&gt;//將10寫入PeopleNumber。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            test.PeopleNumber = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
          
            Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PeopleNumber屬性為:&amp;#34;&lt;/span&gt; + test.PeopleNumber);
        }


&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;執&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;行&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;結&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;果&lt;/span&gt;

	PeopleNumber屬性為:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading1&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/zh-tw/library/ms173118.aspx&#34;&gt;http://msdn.microsoft.com/zh-tw/library/ms173118.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://using-c-sharp.blogspot.tw/2010/09/c.html&#34;&gt;http://using-c-sharp.blogspot.tw/2010/09/c.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/zh-tw/library/cc433525(v=vs.71).aspx&#34;&gt;http://msdn.microsoft.com/zh-tw/library/cc433525(v=vs.71).aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kevintsengtw.blogspot.tw/2011/09/property-field.html#.U3XP7vmSxMc&#34;&gt;http://kevintsengtw.blogspot.tw/2011/09/property-field.html#.U3XP7vmSxMc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>物件導向系列菜單7-『 部分類別 ( Partial Class ) 』</title>
      <link>https://mark-lin.com/posts/20150822/</link>
      <pubDate>Sat, 22 Aug 2015 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20150822/</guid>
      <description>&lt;h2 id=&#34;--partial-class-&#34;&gt;部份類別 ( Partial Class )&lt;/h2&gt;
&lt;p&gt;部分類別使用時機大都在處理大型專案時，將類別分散至個別檔案，可讓多位程式設計師進行運作。&lt;/p&gt;
&lt;p&gt;程式碼說明建立部分類別的方法，就是加上關鍵子『partial』。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt; 	&lt;span style=&#34;color:#75715e&#34;&gt;//部分類別(Employee其中一個組件)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Employee&lt;/span&gt;
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; PracticeTime;
       
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; DoWork()
        {
        }
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;//部分類別(Employee其中一個組件)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Employee&lt;/span&gt;
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;   GoToDinner()
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GoToDinner&amp;#34;&lt;/span&gt; ;
        }
    }

 	
 	&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Page_Load(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
   	{
            Employee Employ = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Employee { PracticeTime = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt; 
            TextBox1.Text = Employ.GoToDinner();
            TextBox6.Text = Employ.PracticeTime;     
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;執行結果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	GoToDinner
	100
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;heading&#34;&gt;部分類別的特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;所有組件都必需在&lt;code&gt;相同&lt;/code&gt;的&lt;code&gt;命名空間(Namespace)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果有任何組件宣告為&lt;code&gt;abstract&lt;/code&gt;則被視為抽象，如果宣告為&lt;code&gt;Sealed&lt;/code&gt;則被視為密封，如果其中一繼承某基底類別，整個型別都會繼承&lt;/li&gt;
&lt;li&gt;任何組件都可以指定不同的基底介面，最後的型別會實作所有部份宣告的任何介面&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading1&#34;&gt;部份方法的特性&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;部分方法的簽章是在部分型別中的一部分定義，而其實作是在型別的另一部分中定義。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt; 		&lt;span style=&#34;color:#75715e&#34;&gt;//部份類別
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   		 &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Employee&lt;/span&gt;
    	{
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; PracticeTime;

        &lt;span style=&#34;color:#75715e&#34;&gt;//定義方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; DoWork();
       
       
    	}

    	&lt;span style=&#34;color:#75715e&#34;&gt;//部份類別
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Employee&lt;/span&gt;
    	{
       	 &lt;span style=&#34;color:#75715e&#34;&gt;//部分方法，實作。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;         	&lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; DoWork()
        	{
          	  Console .WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DoWork~~~&amp;#34;&lt;/span&gt; );
        	}


        	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;   GoToDinner()
        	{
          	  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GoToDinner&amp;#34;&lt;/span&gt; ;
        	}
    	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果其中一個部分型別改成&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 		partial void DoWork()
  	 	{
  	 	}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;編譯器會打斷他的腿。&lt;/p&gt;
&lt;h3 id=&#34;heading2&#34;&gt;部份方法其它特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;部分型別兩個部分中的簽章必須相符&lt;/li&gt;
&lt;li&gt;方法必預回傳&lt;code&gt;void&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;沒有存取修飾詞是被允許的&lt;/li&gt;
&lt;li&gt;如果沒有任何一個部分方法提供實作，則編譯器便會移除該方法和所有的呼叫。&lt;/li&gt;
&lt;li&gt;部份方法都是隱含&lt;code&gt;private&lt;/code&gt;，因此不能&lt;code&gt;virtual&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading3&#34;&gt;參考資料&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://msdn.microsoft.com/zh-tw/library/wa80x488.aspx&#34;&gt;http://msdn.microsoft.com/zh-tw/library/wa80x488.aspx&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>物件導向系列菜單 6-『 Interface 介面 』</title>
      <link>https://mark-lin.com/posts/20150821/</link>
      <pubDate>Fri, 21 Aug 2015 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20150821/</guid>
      <description>&lt;h2 id=&#34;interface&#34;&gt;Interface概念&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;介面(Interface)&lt;/code&gt;你可以將他想成是商品契約，所有要商品的交易，都要經過這個商品契約來決定，例如裡面說交易單位是XXX，就是XXX，裡面如果說要在那交易，就是在那交易，不然有人(編譯器)會打斷你的腿的…很恐怖的…&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Interface&lt;/code&gt;使用時機&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有時候，你必須根據物件能夠做什麼來將它們歸類。&lt;/li&gt;
&lt;li&gt;想要做到類似C++中的多重繼承功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;程式說明
建立&lt;code&gt;UnitityCar&lt;/code&gt;的類別，該類別為未來車的概念。它可以&lt;code&gt;飛(Fly)&lt;/code&gt;和&lt;code&gt;跑(Run)&lt;/code&gt;，但如果這時讓他繼承飛機類別讓他可以飛，有些飛機的屬性與方法不需用到，但如果在車類別新增飛的動作，但其它種車不會飛啊…。所以這時就需要用到&lt;code&gt;Interface&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;首先新增兩個&lt;code&gt;Interface&lt;/code&gt;分別為&lt;code&gt;ICanFly&lt;/code&gt; 與 &lt;code&gt;IDrive&lt;/code&gt;。&lt;code&gt;ICanFly&lt;/code&gt;定義飛的方法Fly() 與飛的速度&lt;code&gt;FlySpeed&lt;/code&gt;。&lt;code&gt;IRun&lt;/code&gt;定義跑的方法&lt;code&gt;Run()&lt;/code&gt;與跑的速度&lt;code&gt;RunSpeed&lt;/code&gt;
(註:新增IRun Interface只是要給各位官爺看多個Interface使用)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//宣告ICanFly介面
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; ICanFly
    {
         &lt;span style=&#34;color:#75715e&#34;&gt;//介面不可以包含『欄位』。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; flySpeed { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; ;}

        &lt;span style=&#34;color:#75715e&#34;&gt;//介面不存放資料，因為不能增加欄位
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;//string test = &amp;#34;Hello&amp;#34;;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
         &lt;span style=&#34;color:#75715e&#34;&gt;//任何實作該介面的類別必需具備一個接受Fly()的方法。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; fly();

    }

	&lt;span style=&#34;color:#75715e&#34;&gt;//宣告IDrive介面
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IDrive
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;//driveSpeed屬性，但介面不儲存資料，所以不會有欄位。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; driveSpeed { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
        
        &lt;span style=&#34;color:#75715e&#34;&gt;//任何實作此介面的類別，必需具備接受 drive() 方法。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; drive();
      
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;UnitityCar 繼承基底類別 Car，並實作 IDrive 與 IcanFly ，記得任何實作介面的類別都必需符合它的方法與屬性。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	 &lt;span style=&#34;color:#75715e&#34;&gt;//繼承基底類別Car
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//並實作IDrive與IcanFly Interface
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//假設UnitityCar在未來，他有兩個種類方法Drive與Fly。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UnitityCar&lt;/span&gt; :Car , IDrive, ICanFly
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;//由於在未來飛行速度(FlySpeed)，有限制100，
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//因此設立唯讀的FlySpeed，不給人修改。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//一定要有!!!不然有人會打斷你的腿。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; flySpeed
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt;; }
        }

        &lt;span style=&#34;color:#75715e&#34;&gt;//在未來UnitityCar還是可以開，而且無限制時速
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//所以設立 driveSpeed可自行控制。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//一定要有!!!不然有人會打斷你的腿。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; driveSpeed
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Speed; }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Speed ; }
        }

        &lt;span style=&#34;color:#75715e&#34;&gt;//一定要有!!!不然有人會打斷你的腿。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; drive()
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Drive~~&amp;#34;&lt;/span&gt; + DriveSpeed ;
        }

        &lt;span style=&#34;color:#75715e&#34;&gt;//一定要有!!!不然有人會打斷你的腿。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; fly()
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fly&amp;#34;&lt;/span&gt; + FlySpeed;
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;實體化UnitityCar為MyCar物件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	UnitityCar myCar = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UnitityCar { RunSpeed =&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50&amp;#34;&lt;/span&gt; };
    TextBox1.Text = myCar.drive();
    TextBox6.Text = myCar.fly();
	
	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;執&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;行&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;結&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;果&lt;/span&gt;
	Drive~~&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	Fly &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;interface-&#34;&gt;Interface 之特性&lt;/h2&gt;
&lt;h3 id=&#34;-1---new-&#34;&gt;特性 1 : 你不能將 NEW 關鍵字用在介面上。會發生編譯錯誤。&lt;/h3&gt;
&lt;p&gt;為什麼呢 ? 因為 interfacce 的方法與特性都沒有任何實作內容。假如你能夠從介面建立物件，該物件怎麼知道有什麼樣的行為呢???&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;    CanFly IFly = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ICanFly () ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;-2--interface&#34;&gt;特性 2 : Interface不存放資料&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;		 &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; ICanFly
    	{
         &lt;span style=&#34;color:#75715e&#34;&gt;//介面不可以包含『欄位』，然而，當你在類別中實作此唯讀特性時，
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;//對別的物件來說，看起來就象屬性。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; flySpeed { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; ;}

         &lt;span style=&#34;color:#75715e&#34;&gt;//介面不存放資料，因為不能增加欄位，會編譯錯誤喔!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; test = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt; ;

         &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; fly();
    	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;-3--&#34;&gt;特性 3 : 一個類別可以實作多個介面&lt;/h3&gt;
&lt;p&gt;這就是可以做到類別C++的多重繼承。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UnitityCar&lt;/span&gt; :Car , IDrive, ICanFly
    	{
       
    	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;-4--&#34;&gt;特性 4 : 你不能夠實體化一個介面，但可以參照它&lt;/h3&gt;
&lt;p&gt;假設你有一個&lt;code&gt;方法Fly()&lt;/code&gt;，你需要一個能夠執行&lt;code&gt;Fly()&lt;/code&gt;，任何實作&lt;code&gt;ICanFly介面&lt;/code&gt;的物件都可以。這正是介面參考(Interface reference)發揮作用的地方。iFly參照任何實作ICanFly的物件(MyCar)。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt; 		UnitityCar MyCar = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UnitityCar { RunSpeed =&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50&amp;#34;&lt;/span&gt; };
            &lt;span style=&#34;color:#75715e&#34;&gt;//即時物件能夠做很多事，但是，當你使用介面參考時，
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;//你只能存取到介面中所宣告的方法。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ICanFly iFly = MyCar;

             TextBox1.Text = iFly.fly();
            TextBox6.Text = iFly.flySpeed;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;-5--&#34;&gt;特性 5 : 介面能夠繼承其他介面&lt;/h3&gt;
&lt;p&gt;由於IBirdFly繼承Fly介面，因此也需要實作Fly()方法與FlySpeed屬性。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//實作IBirdFly，由於IBirdFly繼承Fly介面，
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    	&lt;span style=&#34;color:#75715e&#34;&gt;//因此也需要實作Fly的方法。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Bird&lt;/span&gt; : IBirdFly
    	{
        	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; fly_Bird()
        	{
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bird~~~Fly~~~~&amp;#34;&lt;/span&gt; ;
        	}

        	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; fly()
        	{
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fly&amp;#34;&lt;/span&gt; ;
        	}
        	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; flySpeed
        	{
            &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt;; }
        	}
    	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/zh-tw/library/ms173156.aspx&#34;&gt;http://msdn.microsoft.com/zh-tw/library/ms173156.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jimmy0222.pixnet.net/blog/post/37050866-%5Bc%23%5D-interface-%E4%BB%8B%E9%9D%A2%E3%80%81%E6%8E%A5%E5%8F%A3-(%E4%B8%80)&#34;&gt;http://jimmy0222.pixnet.net/blog/post/37050866-%5Bc%23%5D-interface-%E4%BB%8B%E9%9D%A2%E3%80%81%E6%8E%A5%E5%8F%A3-(%E4%B8%80)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/zh-tw/library/w86s7x04.aspx&#34;&gt;http://msdn.microsoft.com/zh-tw/library/w86s7x04.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>物件導向系列菜單 5 -『 物件導向特性-繼承 ( Inheritance ) 4 - abstract 』</title>
      <link>https://mark-lin.com/posts/20150820/</link>
      <pubDate>Thu, 20 Aug 2015 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20150820/</guid>
      <description>&lt;h2 id=&#34;abstract&#34;&gt;使用修飾詞abstract，限定類別只能被繼承&lt;/h2&gt;
&lt;p&gt;在Class Car 前增加&lt;code&gt;abstract&lt;/code&gt;，表是該類別只能繼承、不能實作，也被稱為抽象類別。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//父類別
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//增加『abstract』修飾詞，讓該類別只能繼承。不能實作。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Car&lt;/span&gt;
    {

        &lt;span style=&#34;color:#75715e&#34;&gt;//車子的速度
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Speed;
        &lt;span style=&#34;color:#75715e&#34;&gt;//車子的顏色
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Color;

        &lt;span style=&#34;color:#75715e&#34;&gt;// 定義建構子，預設Speed為50，Color為Blue
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;  Car()
        {
            Speed = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50&amp;#34;&lt;/span&gt;;
            Color = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blue&amp;#34;&lt;/span&gt;;
        }

        &lt;span style=&#34;color:#75715e&#34;&gt;//定義車子移動的方法。  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; DriveCar(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; a)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;正在開『&amp;#34;&lt;/span&gt; + Color + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』的車&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;時速『&amp;#34;&lt;/span&gt; + Speed + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』在移動&amp;#34;&lt;/span&gt; ;
        }

    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading&#34;&gt;抽像類別的特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;抽象類別不能實體化。&lt;/li&gt;
&lt;li&gt;抽象類別可能包含抽象方法與存取子。&lt;/li&gt;
&lt;li&gt;無法使用『Sealed』修飾詞，因為兩個意思完全相反。&lt;/li&gt;
&lt;li&gt;衍生自抽象類別的非抽象類別必須包含所有繼承抽象方法和存取子的實作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading1&#34;&gt;抽象方法的使用&lt;/h2&gt;
&lt;p&gt;抽象方法只能存在於抽象類別中。不然會出錯喔。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//父類別
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//增加『abstract』修飾詞，讓該類別只能繼承。不能實作。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Car&lt;/span&gt;
    {

        &lt;span style=&#34;color:#75715e&#34;&gt;//車子的速度
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Speed;
        &lt;span style=&#34;color:#75715e&#34;&gt;//車子的顏色
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Color;

        &lt;span style=&#34;color:#75715e&#34;&gt;// 定義建構子，預設Speed為50，Color為Blue
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;  Car()
        {
            Speed = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50&amp;#34;&lt;/span&gt;;
            Color = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blue&amp;#34;&lt;/span&gt;;
        }

        &lt;span style=&#34;color:#75715e&#34;&gt;//定義車子移動的方法。  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//抽象方法宣告，沒有提供實際的實作，因此並沒有方法主題。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//抽象方法只能存在於抽象類別中。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; DriveCar();

    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;子類別，使用Overried，來進行抽象類別覆寫。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 子類別繼承Car
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BMWCar&lt;/span&gt; :Car
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;//BMWCar類別建構子
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; BMWCar()
        {

            Speed = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BMW500&amp;#34;&lt;/span&gt;;
            Color = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BWM_Red&amp;#34;&lt;/span&gt;;
        }

        &lt;span style=&#34;color:#75715e&#34;&gt;//BMW的屬性引擎
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; BMWPower;

        &lt;span style=&#34;color:#75715e&#34;&gt;//定義車子移動的方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//使用存取修飾詞Overried，來進行抽象類別覆寫方法提供自已實作。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; DriveCar()
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;正在開『&amp;#34;&lt;/span&gt; + Color + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』的車&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;時速『&amp;#34;&lt;/span&gt; + Speed + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』在移動&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;『Override』&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;String--&amp;#34;&lt;/span&gt; ;
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;heading2&#34;&gt;抽象方法的特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;抽象方法隱含是一種虛擬方法(但他無法擁有Virtual修飾詞)。&lt;/li&gt;
&lt;li&gt;抽象方法宣告只允許在抽象類別裡。&lt;/li&gt;
&lt;li&gt;因為抽象方法宣告沒有提供實際的實作，因此並有沒方法主題，方法宣告僅以分號做結束。&lt;/li&gt;
&lt;li&gt;在抽象方法宣告『static』與『virtual』修飾詞會出錯。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading3&#34;&gt;參考資料&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://msdn.microsoft.com/zh-tw/library/sf985hc5.aspx&#34;&gt;http://msdn.microsoft.com/zh-tw/library/sf985hc5.aspx&lt;/a&gt;
&lt;a href=&#34;http://msdn.microsoft.com/zh-tw/library/ms173150.aspx&#34;&gt;http://msdn.microsoft.com/zh-tw/library/ms173150.aspx&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>物件導向系列菜單 4 -『 物件導向特性-繼承(Inheritance) 3 - Sealed 』</title>
      <link>https://mark-lin.com/posts/20150819/</link>
      <pubDate>Wed, 19 Aug 2015 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20150819/</guid>
      <description>&lt;h2 id=&#34;-1---sealed-&#34;&gt;特點 1 - 使用 Sealed 關鍵字使類別不能被繼承&lt;/h2&gt;
&lt;p&gt;下列為簡單的Sealed範例。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;父類別Class Car&lt;/code&gt; ，有兩個屬性分別為&lt;code&gt;Speed&lt;/code&gt;與&lt;code&gt;Color&lt;/code&gt;，並自行訂定建構子&lt;code&gt;Car()&lt;/code&gt; ，以及&lt;code&gt;DriveCar()&lt;/code&gt;方法，在這範例中我們將&lt;code&gt;Car類別&lt;/code&gt;，新增&lt;code&gt;Sealed修飾詞&lt;/code&gt;，主要目的為不然其它類別繼承。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 父類別
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Car&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;//增加Sealed
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {

        &lt;span style=&#34;color:#75715e&#34;&gt;//車子的速度
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Speed;
        &lt;span style=&#34;color:#75715e&#34;&gt;//車子的顏色
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Color;  
        &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/// 定義建構子，預設Speed為50，Color為Blue
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;  Car()
        {
            Speed = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50&amp;#34;&lt;/span&gt;;
            Color = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blue&amp;#34;&lt;/span&gt;;
        }

        &lt;span style=&#34;color:#75715e&#34;&gt;//定義車子移動的方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; DriveCar()
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;正在開『&amp;#34;&lt;/span&gt; + Color + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』的車&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;時速『&amp;#34;&lt;/span&gt; + Speed + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』在移動&amp;#34;&lt;/span&gt; ;
        }

    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;子類別BMWCar&lt;/code&gt; 繼承父類別Car，並有自行定義建構子BMWCar() ，以及BMWPower屬性。由於父類別Car有加Sealed因此無法被繼承。依下列程式碼，會找不到父類別的Speed與Color，而出現錯誤訊息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 子類別想繼承Car Class，但因為Car有加Sealed因此無法被繼承。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BMWCar&lt;/span&gt; :Car   
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;//BMWCar類別建構子
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; BMWCar()
        {
            Speed = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BMW500&amp;#34;&lt;/span&gt;;
            Color = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BWM_Red&amp;#34;&lt;/span&gt;;
        }

        &lt;span style=&#34;color:#75715e&#34;&gt;//BMW的屬性引擎
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; BMWPower;

    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;-2--&#34;&gt;特點 2 - 已覆寫完的方法不給衍生類別再覆寫&lt;/h2&gt;
&lt;p&gt;有時在使用時，我們不想讓已經覆寫過的方法要著麼做呢 ? 下列程式碼，有三個類別Car、BMWCar、IBMWCar。繼承關於為&lt;code&gt;Car → BMWCar → IBMWCar&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//父類別
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Car&lt;/span&gt;
    {

        &lt;span style=&#34;color:#75715e&#34;&gt;//定義車子移動的方法。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//在該方法加上Virtual，讓該方法可以被衍生類別覆寫。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; DriveCar( &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; a)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;正在開『&amp;#34;&lt;/span&gt; + Color + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』的車&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;時速『&amp;#34;&lt;/span&gt; + Speed + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』在移動&amp;#34;&lt;/span&gt; ;
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要讓BWMCar已覆寫過的DriveCar()不被IBMWCa覆寫，要在DriveCar前加上&lt;code&gt;sealed&lt;/code&gt;修飾詞。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	 &lt;span style=&#34;color:#75715e&#34;&gt;//BMWCar繼承Car Class
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BMWCar&lt;/span&gt;: Car
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;//定義車子移動的方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//使用存取修飾詞Overried，來進行覆寫
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//參數a 為 string
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; DriveCar(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; a)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;正在開『&amp;#34;&lt;/span&gt; + Color + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』的車&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;時速『&amp;#34;&lt;/span&gt; + Speed + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』在移動&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;『Override』&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;String--&amp;#34;&lt;/span&gt; + a;
        }
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;//測試可不覆寫DriveCar();
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//IBMWCar 繼承 BMWCar
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IBMWCar&lt;/span&gt; : BMWCar
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; DriveCar( &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; a)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ICar&amp;#34;&lt;/span&gt; ;
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這時就會發生下列錯誤，告知該方法無法在被覆寫。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/zh-tw/library/88c54tsw.aspx&#34;&gt;http://msdn.microsoft.com/zh-tw/library/88c54tsw.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dotblogs.com.tw/nobel12/archive/2011/07/22/31963.aspx&#34;&gt;http://www.dotblogs.com.tw/nobel12/archive/2011/07/22/31963.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pydoing.blogspot.tw/2013/07/Csharp-sealed-Class.html&#34;&gt;http://pydoing.blogspot.tw/2013/07/Csharp-sealed-Class.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>物件導向系列菜單 3 -『 物件導向特性-繼承 ( Inheritance ) 2- Virtual 與 Override 』</title>
      <link>https://mark-lin.com/posts/20150818/</link>
      <pubDate>Tue, 18 Aug 2015 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20150818/</guid>
      <description>&lt;h2 id=&#34;virtual-&#34;&gt;Virtual 修飾詞&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;子類別的方法名稱和父類別的方法名稱一樣，著麼辦呢 ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;virtual 關鍵字的用途是修改方法、屬性或事件宣告，以及&lt;code&gt;允許在衍生類別中給予覆寫&lt;/code&gt;。通常使用的時機是在未來預期該方法可能會被子類別覆寫(override)，則此方法必須宣告Virtual。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	 &lt;span style=&#34;color:#75715e&#34;&gt;//父類別
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Car&lt;/span&gt;
    {

        &lt;span style=&#34;color:#75715e&#34;&gt;//車子的速度
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Speed;
        &lt;span style=&#34;color:#75715e&#34;&gt;//車子的顏色
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Color;

        &lt;span style=&#34;color:#75715e&#34;&gt;// 定義建構子，預設Speed為50，Color為Blue
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;  Car()
        {
            Speed = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50&amp;#34;&lt;/span&gt;;
            Color = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blue&amp;#34;&lt;/span&gt;;
        }

        &lt;span style=&#34;color:#75715e&#34;&gt;//定義車子移動的方法。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//在該方法加上Virtual，讓子類別可以覆寫該方法。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; DriveCar()
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;正在開『&amp;#34;&lt;/span&gt; + Color + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』的車&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;時速『&amp;#34;&lt;/span&gt; + Speed + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』在移動&amp;#34;&lt;/span&gt; ;
        }

    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;override-&#34;&gt;Override 修飾詞&lt;/h2&gt;
&lt;p&gt;Overrride修飾詞為需要用來修改或擴充父類別的方法、屬性，則需要給予該方法或屬性進行宣告。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt; 	&lt;span style=&#34;color:#75715e&#34;&gt;// 子類別繼承Car
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BMWCar&lt;/span&gt; :Car
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;//BMWCar類別建構子
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; BMWCar()
        {
            Speed = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BMW500&amp;#34;&lt;/span&gt;;
            Color = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BWM_Red&amp;#34;&lt;/span&gt;;
        }

        &lt;span style=&#34;color:#75715e&#34;&gt;//BMW的屬性引擎
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; BMWPower;

        &lt;span style=&#34;color:#75715e&#34;&gt;//定義車子移動的方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//使用存取修飾詞Overried，來進行覆寫
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; DriveCar()
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;正在開『&amp;#34;&lt;/span&gt; + Color + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』的車&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;時速『&amp;#34;&lt;/span&gt; + Speed + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』在移動&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;『Override』&amp;#34;&lt;/span&gt; ;
        }

    }
    
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;執&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;行&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;結&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;果&lt;/span&gt;
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;正&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;在&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;開&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;『&lt;/span&gt;BMW_Red&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;』&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;的&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;車&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;時&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;速&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;『&lt;/span&gt;BWM500&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;』&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;在&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;移&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;動&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;『&lt;/span&gt;Override&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;』&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;override-1&#34;&gt;Override 修飾詞特性&lt;/h2&gt;
&lt;h3 id=&#34;-1&#34;&gt;注意 1&lt;/h3&gt;
&lt;p&gt;你不能覆寫&lt;code&gt;非虛擬&lt;/code&gt;或&lt;code&gt;靜態方法&lt;/code&gt;。被覆寫的父類別方法必須是&lt;code&gt;Virtual&lt;/code&gt;、&lt;code&gt;abstract&lt;/code&gt;、&lt;code&gt;Override&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;-2&#34;&gt;注意 2&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;override&lt;/code&gt; 方法和 &lt;code&gt;virtual&lt;/code&gt; 方法都必須有相同的存取層級修飾詞。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;//定義車子移動的方法。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;//在該方法加上Virtual，讓子類別可以覆寫該方法。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; DriveCar()
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;正在開『&amp;#34;&lt;/span&gt; + Color + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』的車&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;時速『&amp;#34;&lt;/span&gt; + Speed + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』在移動&amp;#34;&lt;/span&gt; ;
        }

       &lt;span style=&#34;color:#75715e&#34;&gt;//定義車子移動的方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//使用存取修飾詞Overried，來進行覆寫
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; DriveCar()
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;正在開『&amp;#34;&lt;/span&gt; + Color + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』的車&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;時速『&amp;#34;&lt;/span&gt; + Speed + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』在移動&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;『Override』&amp;#34;&lt;/span&gt; ;
        }

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;如&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;果&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;將&lt;/span&gt;BMWCar類別程式碼其的DriveCar()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;方&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;法&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;改&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;為&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;則&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;會&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;出&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;錯&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;-3&#34;&gt;注意 3&lt;/h3&gt;
&lt;p&gt;如果是覆寫『屬性』時，則以下有兩項條件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;覆寫屬性宣告必須指定和所繼承屬性完全相同的存取修飾詞、型別和名稱。&lt;/li&gt;
&lt;li&gt;且被覆寫的屬性必須是 virtual、abstract 或 override。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-4&#34;&gt;注意 4&lt;/h3&gt;
&lt;p&gt;如果方法是在類別指定，而在呼叫的類別有兩個方法相容，則C#編譯器會自動呼叫最適合的方法。&lt;/p&gt;
&lt;p&gt;我們將BMWCar 類別改為如下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 子類別繼承Car
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   	 &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BMWCar&lt;/span&gt; :Car
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;//BMWCar類別建構子
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; BMWCar()
        {
            Speed = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BMW500&amp;#34;&lt;/span&gt;;
            Color = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BWM_Red&amp;#34;&lt;/span&gt;;
        }

        &lt;span style=&#34;color:#75715e&#34;&gt;//BMW的屬性引擎
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; BMWPower;

        &lt;span style=&#34;color:#75715e&#34;&gt;//定義車子移動的方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//使用存取修飾詞Overried，來進行覆寫
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//參數a 為 string
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; DriveCar( &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; a)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;正在開『&amp;#34;&lt;/span&gt; + Color + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』的車&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;時速『&amp;#34;&lt;/span&gt; + Speed + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』在移動&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;『Override』&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;String--&amp;#34;&lt;/span&gt; + a;
        }

        &lt;span style=&#34;color:#75715e&#34;&gt;//參數a 為 int
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; DriveCar(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;正在開『&amp;#34;&lt;/span&gt; + Color + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』的車&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;時速『&amp;#34;&lt;/span&gt; + Speed + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』在移動&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;『Override』&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Int--&amp;#34;&lt;/span&gt; + a  ;
        }

    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後實體化並呼叫DriveCar方法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#75715e&#34;&gt;//string a = &amp;#34;Hello&amp;#34; ;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    BMWCar MyBMWCar = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BMWCar();
    TextBox1.Text = MyBMWCar.DriveCar(a) ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;則執行結果為如下，會自動呼叫&lt;code&gt;public override string DriveCar(int a)&lt;/code&gt;，
因為編輯器會自動幫我們選擇最適合的方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	正在開『BWM_Red』 的車時速『BWM500』在移動「Override』int--1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而如果實體化並呼叫DriveCar改為&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//int a = 1;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; a = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;;
    BMWCar MyBMWCar = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BMWCar();
    TextBox1.Text = MyBMWCar.DriveCar(a) ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;則執行結果為如下。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	正在開『BWM_Red』 的車時速『BWM500』在移動「Override』String--Hello
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;heading&#34;&gt;參考文章&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dotblogs.com.tw/skychang/archive/2012/05/10/72114.aspx?fid=60865&#34;&gt;http://www.dotblogs.com.tw/skychang/archive/2012/05/10/72114.aspx?fid=60865&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/zh-tw/library/6fawty39.aspx&#34;&gt;http://msdn.microsoft.com/zh-tw/library/6fawty39.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/zh-tw/library/ebca9ah3.aspx&#34;&gt;http://msdn.microsoft.com/zh-tw/library/ebca9ah3.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/zh-tw/library/9fkccyh4.aspx&#34;&gt;http://msdn.microsoft.com/zh-tw/library/9fkccyh4.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dotnetperls.com/virtual&#34;&gt;http://www.dotnetperls.com/virtual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>物件導向系列菜單 2-『 物件導向特性-繼承 ( Inheritance ) 1 』</title>
      <link>https://mark-lin.com/posts/20150817/</link>
      <pubDate>Mon, 17 Aug 2015 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20150817/</guid>
      <description>&lt;p&gt;&lt;code&gt;繼承&lt;/code&gt;為物件導向的&lt;code&gt;三大特性之一(封裝、多型)&lt;/code&gt;，你可以想像老爸與兒子的關係，兒子會繼承老爸所擁有的特徵(屬性)和)財產(方法)(現實上不一定，但請官爺們想簡單點)，兒子可能會有老爸的大鼻子或小嘴巴，並且可以開著老爸的車(財產)出去玩，這就是繼承。&lt;/p&gt;
&lt;p&gt;繼承父類別(基底類別 Base Class)的類別就被稱為子類別(衍生類別 Derived Class)，子類別繼承了父類別的屬性與方法。&lt;/p&gt;
&lt;h2 id=&#34;--&#34;&gt;繼承的傳遞 : 你也會繼承到你阿公的東西&lt;/h2&gt;
&lt;p&gt;繼承是可以傳遞，Class C 繼承至 Class B，而 Class B 繼承至 Class A，則 Class C 會繼承至 Class A、B
白話文就是，你也會繼承到你阿公的東西。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;以&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;下&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;為&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;繼&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;承&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;程&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;式&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;碼&lt;/span&gt;
  	&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 父類別
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Car&lt;/span&gt;
    {

        &lt;span style=&#34;color:#75715e&#34;&gt;//車子的速度
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Speed;
        &lt;span style=&#34;color:#75715e&#34;&gt;//車子的顏色
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Color;  
        &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/// 定義建構子，預設Speed為50，Color為Blue
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;   Car()
        {
            Speed = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50&amp;#34;&lt;/span&gt;;
            Color = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blue&amp;#34;&lt;/span&gt;;
        }


        &lt;span style=&#34;color:#75715e&#34;&gt;//定義車子移動的方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; DriveCar()
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;正在開『&amp;#34;&lt;/span&gt; + Color + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』的車&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;時速『&amp;#34;&lt;/span&gt; + Speed + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;』在移動&amp;#34;&lt;/span&gt; ;
        }

    }

    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 子類別繼承Car
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BMWCar&lt;/span&gt; :Car
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;//BMW的屬性引擎
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; BMWPower;

    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下紅色框框的部份就是從父類別Car繼承而來的屬性與方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://user-image.logdown.io/user/13878/blog/13097/post/291243/iCWBf6ATp6ixAC0PdCMT_%E6%9C%AA%E5%91%BD%E5%90%8D.png&#34; alt=&#34;未命名.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Equals、GetHashCode、GetType、ToString，就是剛剛提到的繼承會傳遞，以上幾個方法都是繼承至阿公(給人容易理解的名詞)類別Object，如下，在C#中只要是物件都會
繼承Object類別。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	  &lt;span style=&#34;color:#75715e&#34;&gt;// 摘要:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//     支援 .NET Framework 類別階層架構中的所有類別，提供衍生類別的低階服務。 這是 .NET Framework 中所有類別的超基底類別，是型別階層架構的根。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [Serializable]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;    [ClassInterface( ClassInterfaceType.AutoDual)]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;    [ComVisible( true)]&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Object&lt;/span&gt;
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;// 摘要:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//     初始化 System.Object 類別的新執行個體。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;        [ ReliabilityContract(Consistency .WillNotCorruptState, Cer.MayFail)]&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Object();

        &lt;span style=&#34;color:#75715e&#34;&gt;// 摘要:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//     判斷指定的 System.Object 和目前的 System.Object 是否相等。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 參數:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//   obj:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//     要與目前物件比較的物件。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 傳回:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//     如果指定的物件等於目前的物件，則為 true，否則為 false。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;        [ TargetedPatchingOptOut(&amp;#34;Performance critical to inline across NGen image boundaries&amp;#34; )]&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Equals( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; obj);
        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 摘要:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//     判斷指定的物件執行個體是否視為相等。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 參數:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//   objA:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//     要比較的第一個物件。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//   objB:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//     要比較的第二個物件。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 傳回:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//     如果物件被視為相等則為 true，否則為 false。 如果 objA 和 objB 都是 null，則這個方法會傳回 true。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;        [ TargetedPatchingOptOut(&amp;#34;Performance critical to inline across NGen image boundaries&amp;#34; )]&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Equals( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; objA, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; objB);
        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 摘要:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//     做為特定型別的雜湊函式。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 傳回:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//     目前 System.Object 的雜湊程式碼。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;        [ TargetedPatchingOptOut(&amp;#34;Performance critical to inline across NGen image boundaries&amp;#34; )]&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; GetHashCode();
        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 摘要:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//     取得目前執行個體的 System.Type。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 傳回:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//     目前執行個體的確實執行階段型別。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;        [ SecuritySafeCritical]&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Type GetType();
        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 摘要:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//     建立目前 System.Object 的淺層複本 (Shallow Copy)。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 傳回:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//     目前 System.Object 的淺層複本。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;        [ SecuritySafeCritical]&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; MemberwiseClone();
        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 摘要:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//     判斷指定的 System.Object 執行個體是否為相同的執行個體。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 參數:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//   objA:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//     要比較的第一個物件。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//   objB:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//     要比較的第二個物件。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 傳回:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//     如果 objA 與 objB 為相同的執行個體或兩者皆為 null 參考，則為 true，否則為 false。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;        [ ReliabilityContract(Consistency .WillNotCorruptState, Cer.Success)]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;        [ TargetedPatchingOptOut(&amp;#34;Performance critical to inline across NGen image boundaries&amp;#34; )]&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; ReferenceEquals( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; objA, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; objB);
        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 摘要:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//     傳回表示目前物件的字串。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 傳回:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//     表示目前物件的字串。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; ToString();
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading&#34;&gt;繼承特性&lt;/h2&gt;
&lt;p&gt;#繼承特性&lt;/p&gt;
&lt;p&gt;繼承它有一些特性(在C#中)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一個子類別只能繼承一個父類別 (C++可以繼承多類別)&lt;/li&gt;
&lt;li&gt;子類別一定會呼叫父類別的建構子&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;		BMWCar MyBMWCar = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BMWCar ();
		TextBox1.Text = MyBMWCar.DriveCar();
		(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;看&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;看&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;上&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;面&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;父&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;類&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;別&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;的&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;程&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;式&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;碼&lt;/span&gt;)
		
		&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;執&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;行&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;結&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;果&lt;/span&gt;
		&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;正&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;在&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;開&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;『&lt;/span&gt;Blue&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;』&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;的&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;車&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;時&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;速&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;『&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;』&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;在&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;移&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;動&lt;/span&gt;
		(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;上&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;面&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;正&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;是&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;父&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;類&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;別&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;的&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;執&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;行&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;結&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;果&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;但這時如果子類別有有一個建構子會著麼樣呢 ??&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先自訂子類別建構子如下，然後在執行，會發現結果為&lt;code&gt;會先執行父類別建構子再執行子類別建構子&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;	
 	&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 子類別繼承Car
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BMWCar&lt;/span&gt; :Car
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;//BMWCar類別建構子
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; BMWCar()
        {
            Speed = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BMW500&amp;#34;&lt;/span&gt;;
            Color = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BWM_Red&amp;#34;&lt;/span&gt;;
        }

        &lt;span style=&#34;color:#75715e&#34;&gt;//BMW的屬性引擎
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; BMWPower;

    }
    
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;執&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;行&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;結&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;果&lt;/span&gt;
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;正&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;在&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;開&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;『&lt;/span&gt;BMW_red&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;』&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;的&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;車&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;時&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;速&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;『&lt;/span&gt;BMW500&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;』&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;在&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;移&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;動&lt;/span&gt;
    (&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;會&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;先&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;執&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;行&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;父&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;類&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;別&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;建&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;構&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;子&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;再&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;執&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;行&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;子&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;類&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;別&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;建&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;構&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;子&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading1&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://zh.wikipedia.org/wiki/%E7%BB%A7%E6%89%BF%E6%80%A7&#34;&gt;http://zh.wikipedia.org/wiki/%E7%BB%A7%E6%89%BF%E6%80%A7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://programdoubledragon.blogspot.tw/2013/03/c7.html&#34;&gt;http://programdoubledragon.blogspot.tw/2013/03/c7.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/zh-tw/library/ms173149.aspx&#34;&gt;http://msdn.microsoft.com/zh-tw/library/ms173149.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>