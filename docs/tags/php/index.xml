<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>php on 拿鐵派的馬克 Blog</title>
    <link>https://mark-lin.com/tags/php/</link>
    <description>Recent content in php on 拿鐵派的馬克 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <managingEditor>h091237557@gmail.com (marklin)</managingEditor>
    <webMaster>h091237557@gmail.com (marklin)</webMaster>
    <lastBuildDate>Wed, 15 May 2019 19:51:35 +0800</lastBuildDate>
    
        <atom:link href="https://mark-lin.com/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PHP 的 Web 運行原理 ( 4 ) - Reactor 的實現之 Swoole</title>
      <link>https://mark-lin.com/posts/20190515/</link>
      <pubDate>Wed, 15 May 2019 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20190515/</guid>
      <description>&lt;p&gt;本篇文章，咱們將要在說明另一個在 php 實現 reactor 模式的東西&lt;code&gt;swoole&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;本篇文章分為以下幾個章節 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Swoole 的架構&lt;/li&gt;
&lt;li&gt;Swoole 非阻塞 I/O 的處理&lt;/li&gt;
&lt;li&gt;Swoole 的 Coroutine&lt;/li&gt;
&lt;li&gt;Swoole 實際使用的注意事項&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;swoole-&#34;&gt;swoole 的架構&lt;/h2&gt;
&lt;p&gt;swoole 官網寫到 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;event-driven asynchronous &amp;amp; coroutine-based concurrency networking communication engine with high performance written in C and C++ for PHP.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;swoole 它是一個用 c++ 所寫的 php extension，一個非常高效能的通訊引擎，而它能達到高效能的基礎在於以下幾個重點 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;event-drivent&lt;/li&gt;
&lt;li&gt;coroutine&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一句話來說他可以幹麻。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;它可以讓我們建立一個高效能的網路服務&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面就是它實現非阻塞 I/O 的架構圖。&lt;/p&gt;
&lt;p&gt;當它建立一個 http server 以後，你會看到產生出下圖這些 process 與 thread，基本上可以分為幾個部份 :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/swoole-20190517-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Master Process : 用來管理 reactor thread，主要就是當 client 發送一個 http 請求後，由它來決定那個 reactor thread 來接客。&lt;/li&gt;
&lt;li&gt;Reactor Thread : 每個 thead 中都有使用 I/O 多路復用的技術來監聽多個 socket，當有事件(讀或寫資料)進來時，會發送給某個 worker process 來處理。&lt;/li&gt;
&lt;li&gt;Manager Process : 用來管理 worker process，也是用來決定那個 worker process 來接客。&lt;/li&gt;
&lt;li&gt;Worker Process : 實際運行 php 代碼的地方，它這裡也有使用 I/O 多路復用技術來監聽 socket。這裡提供同步阻塞或是異步非阻塞操作。&lt;/li&gt;
&lt;li&gt;Task Process : 一樣 php 代碼運行的地方，它會接受由 worker 丟過來的任務(開發者自已撰寫)，通常都是一些 cpu 密集的運算。這裡只能同步阻塞操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面是主要的架構，然後我們來理一下所謂的阻塞 I/O 會在那幾個地方，而 swoole 又是如何解決。&lt;/p&gt;
&lt;h2 id=&#34;swoole--io-&#34;&gt;Swoole 非阻塞 I/O 的處理&lt;/h2&gt;
&lt;p&gt;這裡基本上可以分成兩個地方來看。&lt;/p&gt;
&lt;h3 id=&#34;heading&#34;&gt;高併發建立連線的地方&lt;/h3&gt;
&lt;p&gt;swoole 這裡是在 reactor thread 實作 reactor 模式來解決，而 reactor 最主要透過的技術為 I/O 多路復用技術來做到大量 socket I/O 監控，並且在將事情丟給 worker process 處理。&lt;/p&gt;
&lt;p&gt;順到說一下，與 nodejs 或 reactPHP 相比，swoole 這裡勝在它開啟多個 thread 來監控多條連線，理論上它這樣應該可以承受的比 nodejs 與 reactPHP 更多的併發量。&lt;/p&gt;
&lt;h3 id=&#34;worker-process--db--redis-&#34;&gt;Worker process 中大量的 db 或 redis 操作&lt;/h3&gt;
&lt;p&gt;swoole 有提供幾個機制可以給 worker process 實現非阻塞 I/O 操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reactor 模式 (網路 I/O)&lt;/li&gt;
&lt;li&gt;丟 task worker 處理 (網路、檔案 I/O)&lt;/li&gt;
&lt;li&gt;底層使用 aio 處理 (檔案 I/O)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;reactor---io&#34;&gt;reactor 模式 (網路 I/O)&lt;/h4&gt;
&lt;p&gt;首先第一個 reactor 模式就與 reactor thread 的機制一樣，都是會使用 I/O 多路復用來監聽 socket，當有事件進來時，就執行 handler (callback)。&lt;/p&gt;
&lt;p&gt;下面為範例，當在 worker 執行了這段程式碼以後，會將連 redis 的這條 socket 丟到 reactor 來進行監控，當有事件進來時，會執行 callback。&lt;/p&gt;
&lt;p&gt;而這就是所謂的&lt;code&gt;異步非阻塞&lt;/code&gt;。( 異步: callback 非阻塞: 不會卡住 process )&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

$client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;swoole_redis&lt;/span&gt;;
$client&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6379&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;swoole_redis&lt;/span&gt; $client, $result) {
    &lt;span style=&#34;color:#75715e&#34;&gt;// callback function
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($result &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;connect to redis server failed.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
    }
    $client&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;swoole&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;swoole_redis&lt;/span&gt; $client, $result) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;var_dump&lt;/span&gt;($result);
    });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而所謂的&lt;code&gt;同步阻塞&lt;/code&gt;的範例如下，假設你在 worker 中直接使用 predis 來操作 redis，那這就是所謂的同步阻塞。&lt;/p&gt;
&lt;p&gt;同步就是依順序走，而阻塞就是指會在 $cient-&amp;gt;get(&amp;ldquo;foo&amp;rdquo;) 那會卡住整個 process。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;php&lt;/span&gt;

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;client &lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Predis&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;client-&lt;/span&gt;&amp;gt;set(&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;);
$value = $client-&amp;gt;get(&amp;#39;foo&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;-task-worker---io&#34;&gt;丟 task worker 處理 (網路、檔案 I/O)&lt;/h4&gt;
&lt;p&gt;而下面為處理 file 的範例，但這裡要注意，這種處理檔案的方式受限於 task process 的數量，假設我們 task 的數量為二，那當如果開啟三個 task 來處理檔案時，第三個就會無法處理。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

$server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;swoole_http_server&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9501&lt;/span&gt;);

$server&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;worker_num&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;task_worker_num&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
));

$server&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ($request, $response) &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; ($server) {

    &lt;span style=&#34;color:#75715e&#34;&gt;// ----------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;var_dump&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wait...&amp;#39;&lt;/span&gt;);
    $server&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;task&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hi&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;var_dump&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;done !...&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#75715e&#34;&gt;// ----------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    $response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/html; charset=utf-8&amp;#34;&lt;/span&gt;);
    $response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;Hello Swoole. #&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9999&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;/h1&amp;gt;&amp;#34;&lt;/span&gt;);
});


$server&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;task&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;($server, $task_id, $from_id, $data){
    $request &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;file_get_contents&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file 位置&amp;#39;&lt;/span&gt;);
});

$server&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Finish&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;swoole_server&lt;/span&gt; $serv, $task_id, $data) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Task#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$task_id&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; finished, data_len=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;strlen&lt;/span&gt;($data)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PHP_EOL&lt;/span&gt;;
});

$server&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;-aio---io&#34;&gt;底層使用 aio 處理 (檔案 I/O)&lt;/h4&gt;
&lt;p&gt;這裡注意要將 runtime 的 coroutine 開啟，才能讓 file_get_contents 使用底層 aio 來完成同步非阻塞操作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Swoole\Runtime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;enableCoroutine&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;go&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
    $fp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;file_get_contents&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test.log&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;fclose&lt;/span&gt;($fp);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;qa--reactor--filesystem--&#34;&gt;Q&amp;amp;A 為什麼 Reactor 的機制無法處理 filesystem 的東西呢 ?&lt;/h4&gt;
&lt;p&gt;目前筆者只知道，如果你將檔案的 file descriptor 註冊到 I/O 多路復用(epoll) 中，會發生以下的錯誤:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;EPERM The target file fd does not support epoll.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這也是為什麼需要使用其它 process 來處理，而在 nodejs 中碰到這種檔案類型的操作，則是開啟 thread 來進行處理，詳細可看此篇文章。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://marklin-blog.logdown.com/posts/7827140-principle-of-operating-mechanism-of-nodejs&#34;&gt;Nodejs 之運行機制原理 - 馬克筆&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;swoole--coroutine&#34;&gt;Swoole 中的 Coroutine&lt;/h2&gt;
&lt;p&gt;swoole 中有提供一個 coroutine 的功能，那它是做什麼呢 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;它可以讓 worker 做到同步非阻塞的操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;剛剛上面有說 worker 可以提供以下兩種 I/O 操作型式 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步阻塞 ( 同步:程式碼順序走 阻塞: 會卡住整個 process )&lt;/li&gt;
&lt;li&gt;異步非阻塞 ( 異步: callback 機制 非阻塞: 不會卡住整個 process )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但實際上它還有提供第三種 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步非阻塞 ( 同步: 程式碼順序走 非阻塞: 不會卡住整個 process )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而實現的方法就是使用 coroutine 也就是協程。&lt;/p&gt;
&lt;p&gt;它系統內的運行流程如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20190515-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20190515-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;coroutine-&#34;&gt;coroutine 使用範例&lt;/h3&gt;
&lt;p&gt;使用情景如下程式碼，那在 go 裡面的這段程式碼就會開一個被稱為 coroutine 協程的東西來處理這一段，這樣就可以做到&lt;code&gt;同步非阻塞&lt;/code&gt;操作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;go&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
    $redis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Swoole\Coroutine\Redis&lt;/span&gt;();
    $redis&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6379&lt;/span&gt;);
    $val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $redis&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key&amp;#39;&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而如果沒有用 coroutine 的話，那就只能做到&lt;code&gt;異步非阻塞操作&lt;/code&gt;，如下程式碼，也就是一堆 callback。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

$client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;swoole_redis&lt;/span&gt;;
$client&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6379&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;swoole_redis&lt;/span&gt; $client, $result) {
    $client&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;swoole&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;swoole_redis&lt;/span&gt; $client, $result) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;var_dump&lt;/span&gt;($result);
    });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;qa--coroutine--io--&#34;&gt;Q&amp;amp;A - Coroutine 是實現非阻塞 I/O 的技術嗎 ?&lt;/h3&gt;
&lt;p&gt;不是。&lt;/p&gt;
&lt;p&gt;coroutine 很多人會說它是一個比 thread 還較更小單位的操作單位，所以就會想，那我每一個阻塞 I/O 就開一個協程來處理，那這樣不就可以實現非阻塞 I/O 操作了嗎 ? 就像 multi thread 原理一樣，而且我協程更省資源。&lt;/p&gt;
&lt;p&gt;NoNoNo ~&lt;/p&gt;
&lt;p&gt;process 為操作系統的最小資源管理單位，而 thread 為操作系統最小操作單位。&lt;/p&gt;
&lt;p&gt;而 coroutine 是一個比 thread 更小的操作單位，但是它的操作是&lt;code&gt;用戶 (application)&lt;/code&gt;所操作，而不是像 thread 一樣是操作系統所操作。&lt;/p&gt;
&lt;p&gt;而 I/O 的操作是指操作系統的操作，當一個阻塞 I/O 執行時，讓 process 阻塞的是操作系統，所以如果你在一個協程內開啟一個阻塞 I/O 它仍然會卡住整個 process。&lt;/p&gt;
&lt;p&gt;coroutine 嚴格來說只能幫你做到&lt;code&gt;同步非阻塞&lt;/code&gt;，非阻塞還是需要有 reactor 機制來實現。&lt;/p&gt;
&lt;p&gt;備註: go 語言的 coroutine 就比較特殊了，這之後會另開篇章討論。&lt;/p&gt;
&lt;h2 id=&#34;swoole-1&#34;&gt;Swoole 的實際使用注意&lt;/h2&gt;
&lt;p&gt;與 reactPHP 的範例一樣，我們一樣使用 swoole 來建立一個 http server。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

$server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;swoole_http_server&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9501&lt;/span&gt;);

$server&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;worker_num&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;task_worker_num&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
));

$server&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ($request, $response) {

    &lt;span style=&#34;color:#75715e&#34;&gt;// ----------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;var_dump&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wait...&amp;#39;&lt;/span&gt;);
    $request &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;file_get_contents&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://127.0.0.1:3000&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;var_dump&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;done !...&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#75715e&#34;&gt;// ----------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    $response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/html; charset=utf-8&amp;#34;&lt;/span&gt;);
    $response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;Hello Swoole. #&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9999&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;/h1&amp;gt;&amp;#34;&lt;/span&gt;);
});

$server&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;task&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;($server, $task_id, $from_id, $data){
});

$server&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;-http--&#34;&gt;如果這時發兩條 http 請求會如何呢 ?&lt;/h4&gt;
&lt;p&gt;答案: 1 次 wait ( 因為第一次就卡住 process )&lt;/p&gt;
&lt;p&gt;主要的原因基本上在於，你沒將這 I/O 操作丟到這個 worker 的 reactor 機制中，所以這個 I/O 操作仍然會是阻塞的。&lt;/p&gt;
&lt;p&gt;然後有些人在測試時可能會收到二次 wait，但是有一點你要注意，那就是&lt;code&gt;worker_num&lt;/code&gt;你設多少，如果你設&lt;code&gt;2&lt;/code&gt;，它當然可以收到二次，因為是由不同的 process 接受，但是接下來的第三次，你絕對收不到。&lt;/p&gt;
&lt;h4 id=&#34;heading1&#34;&gt;正確版&lt;/h4&gt;
&lt;p&gt;首先第一種是官方現在推薦使用 coroutine 的&lt;code&gt;同步非阻塞&lt;/code&gt;的寫法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

$server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;swoole_http_server&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9501&lt;/span&gt;);

$server&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;worker_num&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;task_worker_num&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
));

$server&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ($request, $response) {

    &lt;span style=&#34;color:#75715e&#34;&gt;// ----------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;var_dump&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wait...&amp;#39;&lt;/span&gt;);
    $client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Swoole\Coroutine\Http\Client&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;);
    $client&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; $client&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;var_dump&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;done !...&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#75715e&#34;&gt;// ----------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;});

$server&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;();

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而另一種就是使用 callback 的&lt;code&gt;異步非阻塞&lt;/code&gt;的寫法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

$server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;swoole_http_server&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9501&lt;/span&gt;);

$server&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;worker_num&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;task_worker_num&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
));

$server&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ($request, $response) {

    &lt;span style=&#34;color:#75715e&#34;&gt;// ----------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;var_dump&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wait...&amp;#39;&lt;/span&gt;);
    $client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;swoole_http_client&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;);
    $client&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ($client) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Length: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strlen&lt;/span&gt;($client&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; $client&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;;
    });
    &lt;span style=&#34;color:#a6e22e&#34;&gt;var_dump&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;done !...&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#75715e&#34;&gt;// ----------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;});

$server&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading2&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/u012999985/article/details/49520773&#34;&gt;深入理解进程和线程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.albert-chen.com/php-with-swoole/&#34;&gt;PHP 的性能猛獸 - Swoole&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linkeddestiny.gitbooks.io/easy-swoole/content/&#34;&gt;easy-swoole&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000007614502&#34;&gt;nginx、swoole高并发原理初探&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rango.swoole.com/archives/508&#34;&gt;swoole 作者 blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000002946586&#34;&gt;swoole教程第一节:进程管理模块(Process)-上&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000015976967#articleHeader0&#34;&gt;Swoole 源码分析——Reactor模块之ReactorBase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.itcodemonkey.com/article/4620.html&#34;&gt;漫画：什么是协程？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>PHP 的 Web 運行原理 ( 3 ) - Reactor 的實現之 reactPHP</title>
      <link>https://mark-lin.com/posts/20190514/</link>
      <pubDate>Tue, 14 May 2019 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20190514/</guid>
      <description>&lt;p&gt;上一篇文章&lt;a href=&#34;https://mark-lin.com/posts/20190513/&#34;&gt;PHP 的 Web 運行原理 ( 2 ) - 非阻塞 I/O 之 Reactor 模式&lt;/a&gt;我們理解到實現非阻塞 I/O 的 reactor 模式以後，接下來本篇文章我們將來要說明，在 php 中的 reactor 實現&lt;code&gt;reactPHP&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;本篇文章分為以下三個章節 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reactPHP 基本概念&lt;/li&gt;
&lt;li&gt;reactPHP 非阻塞 I/O 實現&lt;/li&gt;
&lt;li&gt;reactPHP 使用時注意事項&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reactphp-&#34;&gt;reactPHP 基本概念&lt;/h2&gt;
&lt;p&gt;reactPHP 官網寫這一段話 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Event-driven, non-blocking I/O with PHP&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;它是一個用 php 所寫的 libaray，可以幫助我們做以下的事情 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以建立一個非阻塞 I/O 的網路服務。&lt;/li&gt;
&lt;li&gt;可以建立一個定時排程服務。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http-server-&#34;&gt;http server 的範例&lt;/h3&gt;
&lt;p&gt;下面就是官網首頁的範例，我們可以用它簡單的建立一個非阻塞 I/O 的 http server，就如同 nodejs 一樣。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;$loop = React\EventLoop\Factory::create();

$server = new React\Http\Server(function (Psr\Http\Message\ServerRequestInterface $request) {
    return new React\Http\Response(
        200,
        array(&amp;#39;Content-Type&amp;#39; =&amp;gt; &amp;#39;text/plain&amp;#39;),
        &amp;#34;Hello World!\n&amp;#34;
    );
});

$socket = new React\Socket\Server(8080, $loop);
$server-&amp;gt;listen($socket);

echo &amp;#34;Server running at http://127.0.0.1:8080\n&amp;#34;;

$loop-&amp;gt;run();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;heading&#34;&gt;排程服務的範例&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;$loop = React\EventLoop\Factory::create();

// 5 秒後執行
$loop-&amp;gt;addPeriodicTimer(5, function () {
    echo &amp;#34;Hi Mark&amp;#34;;
});

$loop-&amp;gt;run();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reactphp--io-&#34;&gt;reactPHP 非阻塞 I/O 實現&lt;/h2&gt;
&lt;p&gt;那 reactPHP 它是如何實現非阻塞 I/O 模式呢 ?&lt;/p&gt;
&lt;p&gt;它就是如我們標題所說，它使用&lt;code&gt;reactor 模式&lt;/code&gt;來實現非阻塞 I/O 模式，並且它與 nodejs 一樣使用 single process 的 reactor 模式。&lt;/p&gt;
&lt;p&gt;備註: 為什麼 single process 可以做到非阻塞 I/O 請參考前一篇文章。&lt;/p&gt;
&lt;p&gt;架構圖如下，就是一個 reactor 機制，其中它的 process 裡面就有所謂的 I/O 多路復用技術。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20190513-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;而我們實際上的運行機制如下圖:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20190513-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接這我們來看看，如果是段 reactor 模式的程式碼，那麼它的運行原理流程會如下 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建立 event loop。&lt;/li&gt;
&lt;li&gt;將 addPeriodicTimer 5 秒後要執行的事件丟到 queue 中。&lt;/li&gt;
&lt;li&gt;執行 event loop。(也就是開始跑無窮迴圈)&lt;/li&gt;
&lt;li&gt;event loop 在 5 秒時，發現有個要執行的任務 callback function&lt;/li&gt;
&lt;li&gt;執行 echo &amp;ldquo;Hi Mark&amp;rdquo;。&lt;/li&gt;
&lt;li&gt;將立 http 請求，並將它丟到 queue 中。&lt;/li&gt;
&lt;li&gt;event loop 當發現 I/O 操作有回復時，則執行 callback function&lt;/li&gt;
&lt;li&gt;echo $chunk。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;(1) $loop = React\EventLoop\Factory::create();
    $client = new React\HttpClient\Client($loop);

    // 5 秒後執行
(2) $loop-&amp;gt;addPeriodicTimer(5, function () {
(4)   
(5)     echo &amp;#34;Hi Mark&amp;#34;;
(6)     $request = $client-&amp;gt;request(&amp;#39;GET&amp;#39;, &amp;#39;https://github.com/&amp;#39;);
        $request-&amp;gt;on(&amp;#39;response&amp;#39;, function ($response) {
            $response-&amp;gt;on(&amp;#39;data&amp;#39;, function ($chunk) {
(7)             echo $chunk;
            });
            $response-&amp;gt;on(&amp;#39;end&amp;#39;, function() {
                echo &amp;#39;DONE&amp;#39;;
            });
        });

(3)     $loop-&amp;gt;run();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading1&#34;&gt;使用時注意事項&lt;/h2&gt;
&lt;p&gt;reactPHP 理論上是 php 版的 nodejs 但實際使用要注意，不是。&lt;/p&gt;
&lt;p&gt;假設我們使用 reactPHP 然後來寫一個 http server。&lt;/p&gt;
&lt;p&gt;然後當 server 收到一個請求時，它會再使用&lt;code&gt;file_get_contents&lt;/code&gt;這個方法去打某個 api，這 api 需要一分鐘左右才能回應。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-PHP&#34; data-lang=&#34;PHP&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt; 

&lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__DIR__&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/vendor/autoload.php&amp;#39;&lt;/span&gt;;

$loop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;React\EventLoop\Factory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;();

$server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;React\Http\Server&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;Psr\Http\Message\ServerRequestInterface&lt;/span&gt; $request) &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; ($client) {

    &lt;span style=&#34;color:#75715e&#34;&gt;// ----------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;var_dump&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wait...&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#75715e&#34;&gt;// 假設這一段要執行一分鐘。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    $response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;file_get_contents&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://127.0.0.1:3000&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;var_dump&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;done !...&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#75715e&#34;&gt;// ----------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;React\Http\Response&lt;/span&gt;(
        &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,
        &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;),
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    );
});

$socket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;React\Socket\Server&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;, $loop);
$server&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;($socket);

&lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Server running at http://127.0.0.1:8080&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;

$loop&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;-reactphp--http-server-wait--&#34;&gt;假設往這個使用 reactPHP 寫的 http server，發送兩次請求，上面的 wait 會看到幾次呢 ?&lt;/h4&gt;
&lt;p&gt;答案是 : 1 次&lt;/p&gt;
&lt;p&gt;因為第一次請求時，就將整個 process 給阻塞住了，所以第二個請求完全無法處理。&lt;/p&gt;
&lt;p&gt;它不是說它有提供非阻塞 I/O 的功能嗎 ?&lt;/p&gt;
&lt;p&gt;嗯對的，它有提供，但是前提假設為，你要使用它。&lt;/p&gt;
&lt;p&gt;你在寫 nodejs 時，上面這個相似範例 process 就不會被阻塞住，因為它在給 v8 處理完 binding c++ 階段時，會將所有的 I/O 操作執行完並且丟到 event loop 機制中，所以在 nodejs 操作 I/O 時，你什麼都沒做，就會是非阻塞的 I/O 操作。&lt;/p&gt;
&lt;p&gt;而在 reactPHP 中，你要自已處理又或是使用它所提供的 http client 才能讓變成非阻塞 I/O 的操作。如下範例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt; 

&lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__DIR__&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/vendor/autoload.php&amp;#39;&lt;/span&gt;;

$loop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;React\EventLoop\Factory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;();

$client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;React\HttpClient\Client&lt;/span&gt;($loop);

$server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;React\Http\Server&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;Psr\Http\Message\ServerRequestInterface&lt;/span&gt; $request) &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; ($client) {

    &lt;span style=&#34;color:#75715e&#34;&gt;// ----------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;var_dump&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wait...&amp;#39;&lt;/span&gt;);
    $request &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $client&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://127.0.0.1:3000&amp;#39;&lt;/span&gt;);
    $request&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;response&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ($response) {
    $response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ($chunk) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; $chunk;
    });
    $response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DONE&amp;#39;&lt;/span&gt;;
    });
    
    &lt;span style=&#34;color:#a6e22e&#34;&gt;var_dump&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;done !...&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#75715e&#34;&gt;// ----------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;React\Http\Response&lt;/span&gt;(
        &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,
        &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;),
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    );
});

$socket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;React\Socket\Server&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;, $loop);
$server&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;($socket);

&lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Server running at http://127.0.0.1:8080&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;

$loop&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading2&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;本篇文章中我們學習了幾個重點:&lt;/p&gt;
&lt;h4 id=&#34;reactphp-1&#34;&gt;reactPHP 基本概念&lt;/h4&gt;
&lt;p&gt;就是這段話。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Event-driven, non-blocking I/O with PHP&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;reactphp--io-1&#34;&gt;reactPHP 非阻塞 I/O 實現&lt;/h4&gt;
&lt;p&gt;它使用&lt;code&gt;single process 的 reactor 模式&lt;/code&gt;來實現。&lt;/p&gt;
&lt;h4 id=&#34;heading3&#34;&gt;使用時注意事項&lt;/h4&gt;
&lt;p&gt;在使用它時注意，你要確保你所有的 I/O 操作，都有丟到 event loop 中，否則，它仍然是阻塞 I/O 操作，就如同範例一樣。&lt;/p&gt;
&lt;h2 id=&#34;heading4&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://reactphp.org/&#34;&gt;reactPHP 官方文件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>PHP 的 Web 運行原理 ( 2 ) - 非阻塞 I/O 之 Reactor 模式</title>
      <link>https://mark-lin.com/posts/20190513/</link>
      <pubDate>Mon, 13 May 2019 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20190513/</guid>
      <description>&lt;p&gt;前篇: &lt;a href=&#34;&#34;&gt;PHP 的 Web 運行原理 ( 1 )&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上面一篇文章中，我們有提到兩種 php 的 web 運行模式&lt;code&gt;moduel&lt;/code&gt;與&lt;code&gt;fast_cgi&lt;/code&gt;模式，它們在某種情況下，都會有些問題，而我們這篇文章就是要來理解是碰到什麼問題，然後又是如何解決呢 ?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reactor 模式想解決的問題&lt;/li&gt;
&lt;li&gt;Reactor 模式原理&lt;/li&gt;
&lt;li&gt;Reactor 的使用注意事項&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reactor-&#34;&gt;Reactor 模式想解決的問題&lt;/h2&gt;
&lt;p&gt;使用 moduel 與 fast_cgi 模式 的 web server 模式基本上會有兩個問題存在。&lt;/p&gt;
&lt;h4 id=&#34;1--&#34;&gt;1. 高併發請求，會爆 !&lt;/h4&gt;
&lt;p&gt;如下面這張圖一樣，它每一個 http 請求都需要使用一個 process 或是 thread 來進行處理，而每一台機器的 process 與 thread 的數量都有限制，且操作系統進行 process 或 thread 上文文切換時非常耗的資源。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/reactor-20190513-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2--io--&#34;&gt;2. 服務如果是大量 I/O 操作會很浪費資源 !&lt;/h4&gt;
&lt;p&gt;ex. 讀 db 或 redis 啥的&lt;/p&gt;
&lt;p&gt;主要耗資源的地方在於，每個 process 開啟後，大部份的時間者是在等待 I/O 的處理，而 CPU 都是閒在那。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/reactor-20190513-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;-&#34;&gt;上面兩個是看到的現象，而真正的問題點在於 :&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;為什麼每個請求都需要開啟一個 process 或 thread 來處理呢 ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主要的原因在於，在 linux 底層中，我們使用了阻塞 I/O 方法，來讀取 http 傳送過來的資料。如下範例程式碼。&lt;a href=&#34;https://my.oschina.net/lvsin/blog/383097&#34;&gt;socket网络编程中read与recv&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read(sockfd); &lt;span style=&#34;color:#75715e&#34;&gt;// 這裡會阻塞整個 process
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;handler(data);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它就會一直停在那一行 read 等待資料進來，也就是說整個 process 為了監聽 socket 有沒有資料，就卡在那了。&lt;/p&gt;
&lt;p&gt;這也是為什麼每一條 http(I/O) 請求，都需要啟一個 process 或 thread 來處理某條 socket 的原因。&lt;/p&gt;
&lt;p&gt;備註:
每一個 http 請求基本上就是會建立一條 socket，而 sockfd 又代表此 socket 的 File descriptor，不熟悉網路的友人可以用上面這幾個關鍵字來查詢。&lt;/p&gt;
&lt;h2 id=&#34;reactor-1&#34;&gt;Reactor 模式原理&lt;/h2&gt;
&lt;p&gt;基本上高併發 I/O 這個問題，目前比較常用的解法為 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reactor 模式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;reactor 模式可以幫助我們建立非阻塞 I/O 模式，也就是不需要開多個 thread 或 process 來處理 I/O 操作。&lt;/p&gt;
&lt;p&gt;它的概念如下圖 :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/reactor-20190513-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上圖架構中，最重要的就是 I/O 多路復用 (Multiplexing)這部份，基本上它是系統底層所提供的功能，它可以幫助我們監控所有有註冊的 socket，當它有事件進來以後，就會由指定的 handler 來進行處理。&lt;/p&gt;
&lt;p&gt;下面為 reactor 模式的概念碼。而事實上這就是 nodejs 中我們常聽到的 event loop 的機制。&lt;/p&gt;
&lt;p&gt;但這裡要注意，epoll_wait 本身是一個阻塞方法，也就是說執行它，整個 process 會被卡住。有寫過 nodejs 的人在這裡應該會有疑問，等等會解答。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(true){
    events &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; epoll_wait();  &lt;span style=&#34;color:#75715e&#34;&gt;// 這裡會取得到 I/O 讀取資料的事件資訊 ex. read
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; events.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;){
        handler(events[i]);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;備註 :
I/O 多路復用 (Multiplexing) 不同的平台有不同的實作，epoll(linux)、kqueue(Mac)、IOCP(Window)。&lt;/p&gt;
&lt;h4 id=&#34;multiplexing--handler--process----&#34;&gt;Multiplexing 與 Handler 是不同的 process 嗎 ? 還是相同的 ?&lt;/h4&gt;
&lt;p&gt;答案是都可以。&lt;/p&gt;
&lt;p&gt;像 nodejs 就是屬於 multiplexing 與 handler 都是在同一個 process 運行，而 php swoole 則是屬於 multiplexing 與 handler 在不同 process 運行。&lt;/p&gt;
&lt;h4 id=&#34;multiplexing--process--socket----nodejs--process--&#34;&gt;Multiplexing 不是需要一個 process 一直監聽所有 socket 嗎 ? 那為什麼 nodejs 可以單個 process 同時做到監聽與處理呢 ?&lt;/h4&gt;
&lt;p&gt;嗯之前我也有這個疑問。&lt;/p&gt;
&lt;p&gt;當初我的想法是如下概念碼一樣，它會在 epoll_wait 阻塞住整個 process 來監聽，然後在有事件時，丟給某個 thread 或其它 process 的 handler 來處理。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(true){
   events &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; epoll_wait(); &lt;span style=&#34;color:#75715e&#34;&gt;// 它會一直停在這裡，等某個 socket 有事件進來。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; socket.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;){
        handler(events[i])
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;epoll_wait 的確是阻塞 I/O 操作沒錯，但是它事實上有提供一個參數 timeout，也就是如果這段時間沒有資料，它就會回傳個 null 或啥 -1 的，反正就是和你說沒資料進來，而這時你就可以繼續往下處理。&lt;/p&gt;
&lt;p&gt;備註: 可以拉到最下看看 libvu 所提供的 timeout 計算方式。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(true){
   events &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; epoll_wait(timeout); &lt;span style=&#34;color:#75715e&#34;&gt;// 注意 timeout 。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; sockets.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;){
        handler(sockets[i])
   }

   &lt;span style=&#34;color:#75715e&#34;&gt;// 取出接下來 event queue 中要處理的工作。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   worker &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue.poll();
   handler(worker);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reactor-2&#34;&gt;Reactor 模式的使用注意&lt;/h2&gt;
&lt;p&gt;下面為 reactor 模式的概念碼。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(true){
    events &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; epoll_wait();  &lt;span style=&#34;color:#75715e&#34;&gt;// 這裡會取得到 I/O 讀取資料的事件資訊 ex. read
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; events.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;){
        handler(events[i]);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;-handler--cpu--&#34;&gt;假設我們在 handler 執行一段 cpu 密集工作的話會如何呢 ?&lt;/h4&gt;
&lt;p&gt;嗯就是會整個 process 卡住，也就是說除非計算完成，不然什麼事情都不能做。&lt;/p&gt;
&lt;p&gt;所以別忘了 reactor 的使用重點 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;reactor 是用來解決 I/O 密集的模式，但無法處理 CPU 密集的工作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以在基本上要先理解清除你的系統是大部份的工作才能決定要什麼模式來處理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU 密集處理 =&amp;gt; multi process 或 multi thread 模式。&lt;/li&gt;
&lt;li&gt;I/O 密集處理 =&amp;gt; reactor 模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;本篇文章中我們說到以下幾個重點:&lt;/p&gt;
&lt;h4 id=&#34;reactor-3&#34;&gt;Reactor 模式想解決的問題&lt;/h4&gt;
&lt;p&gt;大量 I/O 操作的情況，會導致傳統的 multi process web 模式倒站問題。&lt;/p&gt;
&lt;h4 id=&#34;reactor-4&#34;&gt;Reactor 架構&lt;/h4&gt;
&lt;p&gt;重點就是&lt;code&gt;I/O 多路復用&lt;/code&gt;有了它我們才能一個 process 監控多個 socket。&lt;/p&gt;
&lt;h4 id=&#34;reactor-5&#34;&gt;Reactor 的使用注意&lt;/h4&gt;
&lt;p&gt;在 reactor 模式的系統下，不要執行大量 cpu 運算的工作，會導致整個 process 卡住，大量 cpu 運算請另開 process 或 thread 來處理。&lt;/p&gt;
&lt;h2 id=&#34;heading1&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.im/entry/5abc896c6fb9a028c675c837&#34;&gt;Linux 的 IO 通信 以及 Reactor 线程模型浅析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5a5e03eef265da3e5033c5b9&#34;&gt;Node.js design pattern : Reactor (Event Loop)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/d224d0699a2b&#34;&gt;Reactor模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/24322387&#34;&gt;通俗地讲，Netty 能做什么？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000005173218&#34;&gt;nodejs 异步I/O和事件驱动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/doit8791/p/7461479.html&#34;&gt;高性能IO之Reactor模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5ba3845e6fb9a05cdd2d03c0&#34;&gt;Java NIO 系列文章之 浅析Reactor模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.gssxgss.me/non-blocking-io-and-reactor-pattern-1/&#34;&gt;非阻塞IO与reactor模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nosuchfield.com/2019/01/09/Multiplex-and-non-blocking-and-threading-and-coroutine/&#34;&gt;多路复用、非阻塞、线程与协程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;libuv--timeout-&#34;&gt;libuv 的 timeout 計算參考&lt;/h2&gt;
&lt;p&gt;下面為 libuv 的 timeout 計算的方法，&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/libuv/libuv/blob/v1.26.0/src/unix/core.c#L309&#34;&gt;libuv timeout 原始碼&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;uv_backend_timeout&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; uv_loop_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; loop) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (loop&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;stop_flag &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;uv__has_active_handles(loop) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;uv__has_active_reqs(loop))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;QUEUE_EMPTY(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;loop&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;idle_handles))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;QUEUE_EMPTY(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;loop&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;pending_queue))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (loop&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;closing_handles)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; uv__next_timeout(loop);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而下面為 uv__next_timeout 的源始碼。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;uv__next_timeout&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; uv_loop_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; loop) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;heap_node&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; heap_node;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; uv_timer_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; handle;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64_t&lt;/span&gt; diff;

  heap_node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; heap_min(timer_heap(loop));
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (heap_node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* block indefinitely */&lt;/span&gt;

  handle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; container_of(heap_node, uv_timer_t, heap_node);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (handle&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;timeout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loop&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;time)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

  diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; handle&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;timeout &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; loop&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;time;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (diff &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; INT_MAX)
    diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; INT_MAX;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) diff;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>PHP 的 Web 運行原理 ( 1 )  - 傳統型</title>
      <link>https://mark-lin.com/posts/20190131/</link>
      <pubDate>Thu, 31 Jan 2019 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20190131/</guid>
      <description>&lt;p&gt;這篇文章雖然主題為&lt;code&gt;PHP 的 Web 運行原理&lt;/code&gt;，但是比較白話文的說，事實上是想要理解這件事情 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一個 http 請求進來後，php 到底是如何運行呢 ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要理解這件事情，有個最基本的觀念要先理解，那就是下面這段指令，它到底是如何運行的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;php index.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然後接下來才能在理解 Web 是如何用 php 來處理。&lt;/p&gt;
&lt;p&gt;這篇文章將分為以下幾個章節 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;執行 php index.php 它是如何運行的呢 ?&lt;/li&gt;
&lt;li&gt;三種用 PHP 來處理 HTTP 的模式&lt;/li&gt;
&lt;li&gt;Web PHP 應用組合與問題&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-php-indexphp--&#34;&gt;執行 php index.php 它是如何運行的呢 ?&lt;/h2&gt;
&lt;p&gt;假設我們在 Terminal 執行了如下的指令。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;php index.php&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那實際上它的運行流程會如下圖，而這張圖也代表 PHP 的基本運行架構。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SAPI ( Server Application Programming Interface ) : 它就是一個&lt;code&gt;應用環境&lt;/code&gt;與&lt;code&gt;PHP 核心&lt;/code&gt;的一個 Interface，會有這層主要的原因在於，不同的應用環境，例如命令行環境(就是在 Terminal 執行 php) 或 Web 環境都需要不同的 PHP 環境配置，如果沒有這一層就代表 PHP 本身要針對不同的環境來考慮設計兼容，這也是為什麼會有 SAPI 的目的。&lt;/li&gt;
&lt;li&gt;main : 它是 php 所有操作的整合者。&lt;/li&gt;
&lt;li&gt;Zend 引擎 : 它就是將咱們編寫的 PHP 程式碼解釋成可以執行的 opcode 碼，其中 PHP7 與 PHP5 有速度上的飛升原因就在於此，PHP7 大幅度的優化了 Zend 引擎。&lt;/li&gt;
&lt;li&gt;Extension : 它是 PHP 內核所提供的一套擴充 PHP 功能的方式，大部份都是使用 C/C++ 所撰寫，基本上可以分為 PHP extension 與 Zend extension。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20190125-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;-php--http-&#34;&gt;三種用 PHP 來處理 HTTP 的模式&lt;/h2&gt;
&lt;p&gt;那如果改成 Web 情況下，上面那張圖會變成什麼樣子呢 ? 如下圖，就只是將 Terminal 那改成 Web Server。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20190125-5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然後 Web 模式基本上可分為三種模式 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;模組模式&lt;/li&gt;
&lt;li&gt;CGI 模式 (這只是過渡期，現在沒啥在用)&lt;/li&gt;
&lt;li&gt;Fast-CGI 模式&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;module-&#34;&gt;Module 模式&lt;/h3&gt;
&lt;p&gt;在早期開發 PHP 時，大部份的人應該都用過 LAMP 這東西，它就是 Linux + Apache + MySQL + PHP 這些東組合。&lt;/p&gt;
&lt;p&gt;然後在通常會在 Apache Web Server 上設置一段指令 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LoadModule php5(or 7)_module modules/mod_php5.so
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這一段就是讓 Apache 把 php 當成一個模塊來處理。&lt;/p&gt;
&lt;p&gt;在種情況下，一個 http 請求它是如何的運行呢 ?&lt;/p&gt;
&lt;p&gt;運行模式下圖 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;瀏覽器發送一個 http 請求到 Apache Web Server。&lt;/li&gt;
&lt;li&gt;Apache 收到以後，如果發現是 .php 的請求，則會使用 php5_module 來解析 php。&lt;/li&gt;
&lt;li&gt;php5_module 接下來會將 php 代碼丟到 sapi 來進行一些針對 Apache 的環境設定 然後最後在由 zedn 來處理這段程式碼。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20190125-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;但這裡有個問題。&lt;/p&gt;
&lt;h4 id=&#34;-apache---&#34;&gt;那假如我不用 Apache  呢 ?&lt;/h4&gt;
&lt;p&gt;這就是為什麼會有下面這個模式的原因。&lt;/p&gt;
&lt;h3 id=&#34;cgi-&#34;&gt;CGI 模式&lt;/h3&gt;
&lt;p&gt;雖然 LAMP 方案在當時很流行，但是並不是每個人都想使用 Apache，而且比較正確的說法，應該是說，不是所有的 Web Server 都有建立 PHP 模組，那這種情況下要怎麼辦呢 ?&lt;/p&gt;
&lt;p&gt;這時就有所謂的&lt;code&gt;CGI 協議&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CGI 定義了讓 Web Server 與請求處理程序(ex. php)溝通的標準。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;它的運行流程如下圖 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;瀏覽器發送一個 http 請求到 Web Server&lt;/li&gt;
&lt;li&gt;Web Server 產生出一個已實作 CGI 協議的 child process (ex. php-cgi)&lt;/li&gt;
&lt;li&gt;子進程解析 php.ini 進行初使化環境。&lt;/li&gt;
&lt;li&gt;處理 http 請求，並返回給 Web Server。&lt;/li&gt;
&lt;li&gt;關閉子進程。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20190125-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;heading&#34;&gt;這裡有幾點事情要注意一下&lt;/h4&gt;
&lt;p&gt;首先實作 CGI 協議的 child process，這裡，這句話事實上也代表了不限制任何語言，而 php-cgi 就只是一個使用 php 來實作 CGI 協議的程式，它可以用來解析從 Web Server 傳送過來的 CGI 請求，並且用 php 來處理。&lt;/p&gt;
&lt;h4 id=&#34;-&#34;&gt;這種模式有什麼缺點呢 ?&lt;/h4&gt;
&lt;p&gt;上面使用這種 CGI 模式的缺點就在於，它每一個 http 請求就需要 fork 一個 CGI 子進程來處理，然後大量的請求一定會倒。&lt;/p&gt;
&lt;p&gt;這也是為什麼之後會出現一個叫&lt;code&gt;Fast-CGI&lt;/code&gt;的協議。&lt;/p&gt;
&lt;h3 id=&#34;fastcgi&#34;&gt;Fast-CGI&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Fast-CGI&lt;/code&gt;它也是個協定，它運作的標準如下 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先產生一個 master 進程。&lt;/li&gt;
&lt;li&gt;解析 php.ini 來初使化環境。&lt;/li&gt;
&lt;li&gt;然後預先建立多個 worker 進程。&lt;/li&gt;
&lt;li&gt;當有一個請求時會分配給某個 worker 來處理。&lt;/li&gt;
&lt;li&gt;當 worker 不夠用時，master 會在建立 worker，而當 worker 閒置太多時，master 也會減少 worker。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而這裡就要提到一個新名詞&lt;code&gt;PHP-FPM&lt;/code&gt;，它就是根據 Fast-CGI 協議所實作進程管理器。&lt;/p&gt;
&lt;p&gt;所以當一個 http 請求進來時，使際上的運作會如下圖 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一個 http 請求從瀏覽器送到 Web Server。&lt;/li&gt;
&lt;li&gt;Web Server 會將此請求包含旁 Fast-CGI 協議標準，發送給 PHP-FPM 所管理的 Master 進程。&lt;/li&gt;
&lt;li&gt;接下來 Master 進程會將請求在發送給某個 worker 來處理。&lt;/li&gt;
&lt;li&gt;最後 worker 處理完後返回結果，然後在等待接客。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20190125-4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;web-php-&#34;&gt;Web PHP 應用組合與問題&lt;/h2&gt;
&lt;p&gt;根據咱們上述學的模式，基本上現今 PHP Web 的組合大至上可以分為以下兩種 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Apache + php module&lt;/li&gt;
&lt;li&gt;Nginx + php-fpm&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在早期的時後，基本上一定是選擇 Nginx + php-fpm 這種類型來開發 PHP Web 應用，主要的原因在於使用 moduel 模式的 PHP Web 它就只是單線程的應用，這也代表一定會有效能壓力，但是之後 Apache 提供了一個叫 MPM (Multi-Processing Module) 就解決了這個問題。&lt;/p&gt;
&lt;p&gt;或需有人認為 Nginx 一定比較快，因為它有 Event Loop 機制，可以不塞車，但是問題是處理 PHP 的地方是在另個 process 中和 Nginx Event Loop 也就沒啥過係。&lt;/p&gt;
&lt;p&gt;所以目前我也不敢保證說選那個比較好，這方面還需要更深入的探討。&lt;/p&gt;
&lt;h4 id=&#34;-1&#34;&gt;那這種二模式有什麼問題呢 ?&lt;/h4&gt;
&lt;p&gt;比較大的問題是 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;它每一個 worker 同時間只能處理一個 http 請求&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;雖然它已經比 CGI 模式下還可以處理更多的請求，但它還是有一定的瓶頸在。&lt;/p&gt;
&lt;p&gt;而這就是下一篇文章中要 Swoole 的原因。&lt;/p&gt;
&lt;h2 id=&#34;heading1&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wwxiong.com/2018/07/php-operation-mode/&#34;&gt;PHP核心PHP的运行模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000008114150&#34;&gt;5分钟PHP扩展开发快速入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.awaimai.com/371.html&#34;&gt;CGI、FastCGI和PHP-FPM关系图解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/littlespark/blog/issues/7&#34;&gt;SAPI,CGI,Fastcgi,php-fpm的一些知识(个人见解)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000014913877&#34;&gt;segament-PHP 运行模式与运行原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000014547406&#34;&gt;segmentfault-PHP 运行模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/q/1010000008356979&#34;&gt;php-cgi和php-fpm有什么关系?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://laravel-china.org/articles/9450/php-fpm-vs-swoole&#34;&gt;Laravel-china-PHP-FPM vs Swoole&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/64414628/answer/220973563&#34;&gt;php fpm 进程数和并发数是什么关系？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>PHP Laravel 的 Facade 的理解</title>
      <link>https://mark-lin.com/posts/20181228/</link>
      <pubDate>Fri, 28 Dec 2018 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20181228/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20181228-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;-laravel-facade-&#34;&gt;什麼是 Laravel Facade ?&lt;/h2&gt;
&lt;p&gt;在一般情況咱們如果要使用物件的某個方法可能會寫成如下 :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

$userService &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UserService&amp;#39;&lt;/span&gt;);
$userService&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createUser&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是有時後你會看到如下的程式碼 :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;UserService&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createUser&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而這就是 Laravel 所提供的 Facade 語法糖，而 Facade 實際上是一種設計模式。&lt;/p&gt;
&lt;h3 id=&#34;facade-&#34;&gt;Facade(外觀) 設計模式&lt;/h3&gt;
&lt;p&gt;Facade 設計模式基本的定義如下 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;定義一個高層級的接口，客戶端只能透過它來與子系統進行溝通。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;畫成概念圖大概長的如下，客戶端當要使用某個子系統所提供的功能時，不會直接去使用，而是會透過 Facade 來進行操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20181228-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;heading&#34;&gt;程式碼範例&lt;/h4&gt;
&lt;p&gt;假設咱們現在有個功能是用使用 LineSDK 來將訊息推送到 Line 取，然後咱們假設 sdk 的程式碼如下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IMessage&lt;/span&gt; 
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;();
}


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LineSDK&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IMessage&lt;/span&gt; 
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;var_dump&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;I push a message to line&amp;#39;&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後我們這裡會在寫一個 Facade 來讓我們的系統來使用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MessageFacade&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; $sdk; 

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __construct(&lt;span style=&#34;color:#a6e22e&#34;&gt;IMessage&lt;/span&gt; $sdk)
    {
        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sdk&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $sdk;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;()
    {
        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sdk&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最後這個時候客戶端想要使用時，就會透過 Facade 來進行發送訊息，如下程式碼。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// 備註，在 laravel 時這裡嚴格來說會寫成
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// $app-&amp;gt;make(&amp;#39;Imessage&amp;#39;)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 而不會看到 linesdk 這東西
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$sdk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MessageFacade&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LineSDK&lt;/span&gt;());
$sdk&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;-&#34;&gt;這樣有什麼好處 ?&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;當 sdk 進行修改時，你就不需要修改應用層的也方，只要修改 Facade 就好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但這樣還是要改啊 ? 只是換個地方改而以 ?&lt;/p&gt;
&lt;p&gt;那假設你有十個地方直接使用 SDK 呢 ? 那這樣不就代表你十個地方就要改，而如果使用 Facade 就只有一個地方要修改。&lt;/p&gt;
&lt;h3 id=&#34;laravel-facade--&#34;&gt;Laravel Facade 是如何實現的呢 ?&lt;/h3&gt;
&lt;p&gt;就單來說，它就如下圖所示，主要的核心就是在 Facade 這個抽象類別，它裡面會定義一個 php 的 &lt;code&gt;__callStatic&lt;/code&gt; 方法，它被執行到的時機為，這個類別中被呼叫靜態方法時，他就會被執行到。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20181228-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Facade&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __callStatic($method, $args)
    {
        $instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getFacadeAccessor&lt;/span&gt;();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $instance&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;$method(&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;$args);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MessageFacade&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Facade&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getFacadeAccessor&lt;/span&gt;(){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LineSDK&lt;/span&gt;(); 
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LineSDK&lt;/span&gt; 
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;var_dump&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;I push a message to line&amp;#39;&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Facades/MessageFacade.php&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#a6e22e&#34;&gt;MessageFacade&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;laravel-facade-&#34;&gt;Laravel Facade 的爭論&lt;/h2&gt;
&lt;p&gt;它們的爭論點就是 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是否要使用 Laravel Facade&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這裡大至上會分成兩派 :&lt;/p&gt;
&lt;h3 id=&#34;-laravel-facade&#34;&gt;使用 Laravel Facade&lt;/h3&gt;
&lt;p&gt;這一派的程式碼會寫的如下 :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Log&lt;/span&gt;
{
  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __construct()
    {
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;void&lt;/span&gt;
    {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;LogService&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;);
    }  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;-laravel-facade1&#34;&gt;不使用 Laravel Facade&lt;/h3&gt;
&lt;p&gt;而這一派的程式碼會寫的如下 :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Log&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ILogService&lt;/span&gt; $logService;
  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __construct(&lt;span style=&#34;color:#a6e22e&#34;&gt;ILogService&lt;/span&gt; $logService)
    {
      $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;logService&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $logService;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;void&lt;/span&gt;
    {
      $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;logService&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;);
    }  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;heading1&#34;&gt;支持與反對的看法&lt;/h3&gt;
&lt;p&gt;首先支持使用 Facade 這一派的他們提出以下使用後的優點 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;簡潔的程式碼。&lt;/li&gt;
&lt;li&gt;乾淨的建構子。&lt;/li&gt;
&lt;li&gt;更高的可測試性與彈性。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但相對的反對派提出了一下問題 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;相依了 Facade，這樣事實上就打破了當初建立 container 來想解決的事情。&lt;/li&gt;
&lt;li&gt;要知道這個類別中有使用那些外部套件，那就只能一個一個找。&lt;/li&gt;
&lt;li&gt;IDE 的不友好。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;順到說一下，就我各人的看法我比較偏向不使用 Laravel Facade，主要是因為我比較在意一個類別的相依性控制，而每當我需要知道這個類別有啥相依時，不用讓我一個一個去慢慢的找，對我來說有點浪費時間。&lt;/p&gt;
&lt;p&gt;順到說一下，在下面的參考資料裡包含了大部份吵架的文章，有興趣的人可以去看看。&lt;/p&gt;
&lt;h2 id=&#34;---laravel-facade-&#34;&gt;備註 : 關於使用 Laravel Facade 有更高的可測試性說明&lt;/h2&gt;
&lt;p&gt;在 Laravel Facade 中，如果你有一段程式碼直接的使用 Laravel Facade 如下 :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getIndex&lt;/span&gt;()
{
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Event&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fire&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Dayle&amp;#39;&lt;/span&gt;]);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;All done!&amp;#39;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後你這時要進行測試時，可以使用&lt;code&gt;shouldReceive&lt;/code&gt;的方法來模擬 Event :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testGetIndex&lt;/span&gt;()
{
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Event&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;shouldReceive&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fire&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;once&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;with&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Dayle&amp;#39;&lt;/span&gt;]);

    $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading2&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://programmingarehard.com/2014/01/11/stop-using-facades.html/&#34;&gt;Stop Using Facades&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/PHP/comments/3bmclk/why_experienced_developers_consider_laravel_as_a/&#34;&gt;Why experienced developers consider Laravel as a poorly designed framework?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.brandonsavage.net/lets-talk-about-facades/&#34;&gt;Let’s Talk About Facades&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitepoint.com/how-laravel-facades-work-and-how-to-use-them-elsewhere/&#34;&gt;How Laravel Facades Work and How to Use Them Elsewhere&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/35011364/using-dependency-injection-over-laravel-facades&#34;&gt;stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://carstenwindler.de/php/automated-bad-practice/&#34;&gt;Automated bad practice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>PHP Laravel 的 Service Provider 理解</title>
      <link>https://mark-lin.com/posts/20181214/</link>
      <pubDate>Fri, 14 Dec 2018 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20181214/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20181214-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;-laravel-service-provider-&#34;&gt;什麼是 Laravel Service Provider ?&lt;/h2&gt;
&lt;p&gt;上一篇文章『&lt;a href=&#34;https://mark-lin.com/posts/20181214/&#34;&gt;PHP Laravel 的 Container 理解&lt;/a&gt;』中咱們學習到了 Laravel 的 Container 是一種用來解決依賴與耦合的概念，它建立了一個容器並且在裡面定義好抽像與實際類別的對應，最後就可以自動的進行依賴性注入。如下偽程式碼。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
$containter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Container&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// 建立抽象與實體類別的對應
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$containter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ILogService&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;AWSLogServcie&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;);

$log &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $container&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Log&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;);

$log&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;log....&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中上面的&lt;code&gt;bind&lt;/code&gt;就是可以在這個容器內建立一個抽象類別舉實體類別的對應，也就是說如果後來要實體化有實作
ILogService 的類別，那他就會實體化 AWSLogServcie 出來。&lt;/p&gt;
&lt;h4 id=&#34;-service-provider--&#34;&gt;那 Service Provider 是什麼 ?&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;它就個註冊與管理 Container 內服務的地方。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面的程式碼為 Laravel 專案的  Service Provider，其中有兩個重要的方法&lt;code&gt;boot&lt;/code&gt;與&lt;code&gt;register&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;register : 它就是用來寫 bind 的地方。&lt;/li&gt;
&lt;li&gt;boot : 它就是當 register 結束以後會執行的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;App\Providers&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Illuminate\Support\ServiceProvider&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AppServiceProvider&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ServiceProvider&lt;/span&gt;
{
    &lt;span style=&#34;color:#e6db74&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * Bootstrap any application services.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @return void
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;boot&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }

    &lt;span style=&#34;color:#e6db74&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * Register any application services.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @return void
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;register&lt;/span&gt;()
    {
        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(
            &lt;span style=&#34;color:#a6e22e&#34;&gt;PostRepositoryInterface&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;,
            &lt;span style=&#34;color:#a6e22e&#34;&gt;PostRepository&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;
        );
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;-boot-&#34;&gt;那什麼時後會需要使用 boot ?&lt;/h4&gt;
&lt;p&gt;boot 這個方法的執行時機為 register 執行完以後，那它什麼時後要用到他呢 ? 我覺得比較好的定義如下 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在實際上使用這個 service 前，所需要做的前處理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如下面的 Laravel 官網授權章節所寫的範例，在要使用 AuthService 前它需要先將一些 policy 先註冊，這時就很適合寫在 boot 這個方法裡面。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://laravel.tw/docs/5.2/authorization&#34;&gt;Laravel-授權&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;App\Providers&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Illuminate\Contracts\Auth\Access\Gate&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GateContract&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Illuminate\Foundation\Support\Providers\AuthServiceProvider&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ServiceProvider&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AuthServiceProvider&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ServiceProvider&lt;/span&gt;
{
    &lt;span style=&#34;color:#e6db74&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * 註冊任何應用程式的認證或授權服務。
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @param  \Illuminate\Contracts\Auth\Access\Gate  $gate
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @return void
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;boot&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;GateContract&lt;/span&gt; $gate)
    {
        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;registerPolicies&lt;/span&gt;($gate);

        $gate&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;define&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;update-post&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ($user, $post) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $user&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; $post&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;user_id&lt;/span&gt;;
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DatabaseServiceProvider&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ServiceProvider&lt;/span&gt;
{
    &lt;span style=&#34;color:#e6db74&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * Bootstrap the application events.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @return void
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;boot&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;Model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setConnectionResolver&lt;/span&gt;($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;db&amp;#39;&lt;/span&gt;]);

        &lt;span style=&#34;color:#a6e22e&#34;&gt;Model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setEventDispatcher&lt;/span&gt;($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;events&amp;#39;&lt;/span&gt;]);
    }
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;register&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;Model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;clearBootedModels&lt;/span&gt;();
        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;registerConnectionServices&lt;/span&gt;();
        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;registerEloquentFactory&lt;/span&gt;();
        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;registerQueueableEntityResolver&lt;/span&gt;();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;-service-provider--1&#34;&gt;為什麼要使用 Service Provider 呢 ?&lt;/h2&gt;
&lt;p&gt;上面我們大概理解了 Service Provider 以後，那接下來我們就來思考一件事情。&lt;/p&gt;
&lt;p&gt;為什麼要使用 Service Provider 呢 ?&lt;/p&gt;
&lt;p&gt;我們先假設沒有 Service Provider，然後來看看程式碼會變成什麼樣子。&lt;/p&gt;
&lt;p&gt;假設我們已經產生了 container，就如下程式碼的 $app 。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;

$app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;require_once&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__DIR__&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/../bootstrap/app.php&amp;#39;&lt;/span&gt;;

$app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;IUserService&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;UserESrvice&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;);
$app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;IMessageService&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;MessageService&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;事實上現在這樣是還沒什麼問題，那如果是這樣呢 ?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;

$app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;require_once&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__DIR__&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/../bootstrap/app.php&amp;#39;&lt;/span&gt;;

$app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;IUserService&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;UserService&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;);
$app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;IMessageService&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;MessageService&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;);

$app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;singleton&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;redis&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ($app) {
     $config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;config&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;database.redis&amp;#39;&lt;/span&gt;, []);
     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RedisManager&lt;/span&gt;($app, &lt;span style=&#34;color:#a6e22e&#34;&gt;Arr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pull&lt;/span&gt;($config, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;client&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;predis&amp;#39;&lt;/span&gt;), $config);
});

$app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;redis.connection&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ($app) {
     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $app[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;redis&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;connection&lt;/span&gt;();
});

$app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;singleton&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cache&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ($app) {
     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CacheManager&lt;/span&gt;($app);
});

$app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;singleton&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cache.store&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ($app) {
     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $app[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cache&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;driver&lt;/span&gt;();
});

 
$this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;singleton&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;db&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ($app) {
     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DatabaseManager&lt;/span&gt;($app, $app[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;db.factory&amp;#39;&lt;/span&gt;]);
});
        
$this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;singleton&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;db.factory&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ($app) {
     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConnectionFactory&lt;/span&gt;($app);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以發現這個檔案已經開發有點腫大，而且這樣在多人開發時，你會發現一直的 merge conflict 。&lt;/p&gt;
&lt;p&gt;然後接下來，你可能在使用 db 前還需要設定一下東西，然後這個檔案變的如下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;

$app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;require_once&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__DIR__&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/../bootstrap/app.php&amp;#39;&lt;/span&gt;;

$app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;IUserService&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;UserService&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;);
$app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;IMessageService&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;MessageService&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;);

$app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;singleton&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;redis&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ($app) {
     $config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;config&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;database.redis&amp;#39;&lt;/span&gt;, []);
     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RedisManager&lt;/span&gt;($app, &lt;span style=&#34;color:#a6e22e&#34;&gt;Arr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pull&lt;/span&gt;($config, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;client&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;predis&amp;#39;&lt;/span&gt;), $config);
});

$app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;redis.connection&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ($app) {
     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $app[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;redis&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;connection&lt;/span&gt;();
});

$app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;singleton&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cache&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ($app) {
     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CacheManager&lt;/span&gt;($app);
});

$app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;singleton&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cache.store&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ($app) {
     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $app[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cache&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;driver&lt;/span&gt;();
});

$this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;singleton&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;db&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ($app) {
     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DatabaseManager&lt;/span&gt;($app, $app[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;db.factory&amp;#39;&lt;/span&gt;]);
});
        
$this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;singleton&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;db.factory&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ($app) {
     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConnectionFactory&lt;/span&gt;($app);
});

&lt;span style=&#34;color:#a6e22e&#34;&gt;Model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setConnectionResolver&lt;/span&gt;($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;db&amp;#39;&lt;/span&gt;]);
&lt;span style=&#34;color:#a6e22e&#34;&gt;Model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setEventDispatcher&lt;/span&gt;($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;events&amp;#39;&lt;/span&gt;]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這時你就會很明顯的注意到有幾項缺點 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這個檔案太腫大了，每個人都需要修改到他。&lt;/li&gt;
&lt;li&gt;這個檔案做太多事情了，要產生 container、要註冊服務、註冊服務的前處理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是因為這些原因，因此 Laravel 就產生了 Service Provider，並且它基本上是會根據模組來產生不同的 Provider，像以上面的範例就可以分拆成 db、cache、redis 等 provider。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;某些方面這就違反了 SRP（Single Responsibility Principle）單一責任原則&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;雖然上述的原則是用在類別或方法上，但是我覺得以概念上來看，也可以用在上面這種狀況。&lt;/p&gt;
&lt;h2 id=&#34;laravel-service-provider-&#34;&gt;Laravel Service Provider 流程原始碼分析&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20181214-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下來這章節我們要來理解一下 Laravel 是什麼時後註冊 Service provider，並且它內部是如何執行。&lt;/p&gt;
&lt;p&gt;在 Laravel 中所有一切的源頭就是創建 Container，所以就從這裡開始看。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;php artisan serve
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;首先產生完 containter ($app) 以後，接下來 Laravel 會在實體化 $kernel，它可以說是所有操作的核心模式，然後接下來 handler 它會執行所有 input 進來的東西，而這裡面就有用來處理 service provider 的地方。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;#!/usr/bin/env php
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;define&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LARAVEL_START&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;microtime&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;));

&lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__DIR__&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/vendor/autoload.php&amp;#39;&lt;/span&gt;;

$app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;require_once&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__DIR__&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/bootstrap/app.php&amp;#39;&lt;/span&gt;;

$kernel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Illuminate\Contracts\Console\Kernel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;);

$status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $kernel&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt;(
    $input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Symfony\Component\Console\Input\ArgvInput&lt;/span&gt;,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Symfony\Component\Console\Output\ConsoleOutput&lt;/span&gt;
);

$kernel&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;terminate&lt;/span&gt;($input, $status);

&lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;($status);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;kernel-&#34;&gt;Kernel 原始碼&lt;/h3&gt;
&lt;p&gt;這裡在執行 handler 裡面有個我們要注意的東西就是 bootstraps，這東東你可以想成它就是要完成一件事情所需要做的事情，其中我們要看的為 RegisterProviders 這個 bootstrap。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Illuminate\Foundation\Console&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Kernel&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KernelContract&lt;/span&gt;
{
   &lt;span style=&#34;color:#e6db74&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * The bootstrap classes for the application.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @var array
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; $bootstrappers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
        &lt;span style=&#34;color:#a6e22e&#34;&gt;\Illuminate\Foundation\Bootstrap\LoadEnvironmentVariables&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;\Illuminate\Foundation\Bootstrap\LoadConfiguration&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;\Illuminate\Foundation\Bootstrap\HandleExceptions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;\Illuminate\Foundation\Bootstrap\RegisterFacades&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;\Illuminate\Foundation\Bootstrap\SetRequestForConsole&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;\Illuminate\Foundation\Bootstrap\RegisterProviders&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;\Illuminate\Foundation\Bootstrap\BootProviders&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;,
    ];

   &lt;span style=&#34;color:#e6db74&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * Run the console application.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @param  \Symfony\Component\Console\Input\InputInterface  $input
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @param  \Symfony\Component\Console\Output\OutputInterface  $output
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @return int
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt;($input, $output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
            &lt;span style=&#34;color:#75715e&#34;&gt;// 執行每個 boostrap
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bootstrap&lt;/span&gt;();

            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getArtisan&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;($input, $output);
        } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; $e) {
            $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;reportException&lt;/span&gt;($e);

            $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;renderException&lt;/span&gt;($output, $e);

            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;Throwable&lt;/span&gt; $e) {
            $e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FatalThrowableError&lt;/span&gt;($e);

            $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;reportException&lt;/span&gt;($e);

            $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;renderException&lt;/span&gt;($output, $e);

            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        }
    }
    
       &lt;span style=&#34;color:#e6db74&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * Bootstrap the application for artisan commands.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @return void
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bootstrap&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt; $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hasBeenBootstrapped&lt;/span&gt;()) {
            $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bootstrapWith&lt;/span&gt;($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bootstrappers&lt;/span&gt;());
        }

        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;loadDeferredProviders&lt;/span&gt;();

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt; $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commandsLoaded&lt;/span&gt;) {
            $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commands&lt;/span&gt;();

            $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commandsLoaded&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;registerproviders-&#34;&gt;RegisterProviders 原始碼&lt;/h3&gt;
&lt;p&gt;RegisterProviders 就是一個定義好的 boostrap 類別，它主要就是呼叫 container 來註冊 service provider。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Illuminate\Foundation\Bootstrap&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Illuminate\Contracts\Foundation\Application&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RegisterProviders&lt;/span&gt;
{
    &lt;span style=&#34;color:#e6db74&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * Bootstrap the given application.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @param  \Illuminate\Contracts\Foundation\Application  $app
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @return void
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bootstrap&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Application&lt;/span&gt; $app)
    {
        $app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;registerConfiguredProviders&lt;/span&gt;();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;container-registerconfiguredproviders-&#34;&gt;Container registerConfiguredProviders 原始碼&lt;/h3&gt;
&lt;p&gt;這一段原始碼中，laravel 會先將在 config/app.php 裡面有的 provider 先組合出包含 namespace 的 service provider 陣列，然後最在在丟給 ProviderRepository 的 load 方法來進行讀取。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

    &lt;span style=&#34;color:#e6db74&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * Register all of the configured providers.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @return void
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;registerConfiguredProviders&lt;/span&gt;()
    {
        $providers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Collection&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;make&lt;/span&gt;($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;app.providers&amp;#39;&lt;/span&gt;])
                        &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;partition&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ($provider) {
                            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Str&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;startsWith&lt;/span&gt;($provider, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Illuminate\\&amp;#39;&lt;/span&gt;);
                        });

        &lt;span style=&#34;color:#75715e&#34;&gt;// 這裡看起來應該是去拿所有 packet 裡面的 provider
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        $providers&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;splice&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, [$this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;PackageManifest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;providers&lt;/span&gt;()]);

        (&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ProviderRepository&lt;/span&gt;($this, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Filesystem&lt;/span&gt;, $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getCachedServicesPath&lt;/span&gt;()))
                    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt;($providers&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;collapse&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toArray&lt;/span&gt;());
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;providerrepository-&#34;&gt;ProviderRepository 原始碼&lt;/h3&gt;
&lt;p&gt;這一段程式碼就是實際執行 service proivder 裡面方法的地方，它的執行流程如下。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;讀取 boostrap/cache/services.php。&lt;/li&gt;
&lt;li&gt;判斷是否重新產生 cache 檔。&lt;/li&gt;
&lt;li&gt;從 cache 檔中判斷每個 servcie provider 是那一類型，然後分別執行。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本上 cache 檔中 service provider 被分為三種類別，它們的特點如下 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when : 當某個事件被執行的時後，才會執行 service provider。&lt;/li&gt;
&lt;li&gt;eager : 直接執行 service provider。&lt;/li&gt;
&lt;li&gt;deferred : 等到要執行 make 前，才會執行 service provider。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
   &lt;span style=&#34;color:#e6db74&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * Register the application service providers.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @param  array  $providers
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @return void
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt; $providers)
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;// 讀取 boostrap/cache/services.php
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        $manifest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;loadManifest&lt;/span&gt;();

        &lt;span style=&#34;color:#75715e&#34;&gt;// 產生 boostrap/cache/services.php
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;shouldRecompile&lt;/span&gt;($manifest, $providers)) {
            $manifest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;compileManifest&lt;/span&gt;($providers);
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; ($manifest[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;when&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; $provider &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $events) {
            $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;registerLoadEvents&lt;/span&gt;($provider, $events);
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; ($manifest[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eager&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; $provider) {
            $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;register&lt;/span&gt;($provider);
        }

        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addDeferredServices&lt;/span&gt;($manifest[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;deferred&amp;#39;&lt;/span&gt;]);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading&#34;&gt;備註&lt;/h2&gt;
&lt;h3 id=&#34;-boostrapcacheservicesphp&#34;&gt;關於 boostrap/cache/services.php&lt;/h3&gt;
&lt;p&gt;這個檔案基本上組合如下圖，共有分為四個部份，它們的功用如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;provider : 包含所有 config/app.php 裡有註冊的 service providers，基本上它的功用就是用來判斷 cache 檔案要不要進行修。&lt;/li&gt;
&lt;li&gt;eager : service provider 類型，它會在 load 時執行 service provider。&lt;/li&gt;
&lt;li&gt;deferred : service provider 類型，它會在 make 時執行 service provider。&lt;/li&gt;
&lt;li&gt;when : service provider 類型，它會在收到某個事件時執行 service provider。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20181214-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;-servcie-provider--deferred--cache&#34;&gt;將 servcie provider 修改為 deferred 時記得砍 cache&lt;/h3&gt;
&lt;p&gt;Laravel 在判斷直接使用 cache 時有兩個必要條件 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有 cache 檔。&lt;/li&gt;
&lt;li&gt;cache 檔的 providers 於 config/app.php 的 providers 是相同的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以如果你這時修改了某個 provider 的 deferred 時，依然符合上述兩個條件，因為你只是改變 proivder 的屬性而不是名稱，因此還會繼續使用 cache 檔。&lt;/p&gt;
&lt;p&gt;所以這時記得要砍掉 cache 檔讓它進行重建。&lt;/p&gt;
&lt;h2 id=&#34;heading1&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://oomusou.io/laravel/laravel-service-provider/&#34;&gt;點燈房-深入探討Service Provider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://laravel.com/docs/5.7/container&#34;&gt;官網-Service Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://laravel-china.org/articles/6189/laravel-service-provider-detailed-concept?order_by=vote_count&amp;amp;&#34;&gt;Laravel Service Provider 概念详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://laravel.tw/docs/5.2/authorization&#34;&gt;官網-授權&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>PHP Laravel 的 Container 理解</title>
      <link>https://mark-lin.com/posts/20181030/</link>
      <pubDate>Tue, 30 Oct 2018 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20181030/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20181130-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;container--&#34;&gt;Container 是什麼 ?&lt;/h2&gt;
&lt;p&gt;Laravel Container 是什麼呢 ? 我們先來理解 Container 容器 是什麼。&lt;/p&gt;
&lt;p&gt;容器抽象一點概念是指用來裝東西的載體，向菜籃也算個容器，而在 Laravel 中所代表的意思就是指 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;裡面裝了一堆可以用的服務載體，就叫 Container。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;像我們每當要執行 Laravel 時，都會先執行下面這段程式碼，其中 $app 就是我們的 Container，然後接下來會使用 Container 來實體化一些物件，例如 $kernel。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;

$app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;require_once&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__DIR__&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/../bootstrap/app.php&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;|--------------------------------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;| Run The Application
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;|--------------------------------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;|
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;| Once we have the application, we can handle the incoming request
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;| through the kernel, and send the associated response back to
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;| the client&amp;#39;s browser allowing them to enjoy the creative
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;| and wonderful application we have prepared for them.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;|
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;

$kernel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Illuminate\Contracts\Http\Kernel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;);

$response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $kernel&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt;(
    $request &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Illuminate\Http\Request&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;capture&lt;/span&gt;()
);

$response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;();

$kernel&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;terminate&lt;/span&gt;($request, $response);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;-container-&#34;&gt;為什麼要使用 Container ?&lt;/h2&gt;
&lt;p&gt;上面我們理解 Container 是做什麼用以後，接下來我們要來想想一件事情。&lt;/p&gt;
&lt;p&gt;為什麼 Laravel 要使用 Container 呢，為什麼上面的要實體化 $knernel 時，不使用 new Knernel() 這種實體化的方式呢 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因為它想解決依賴與耦合。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這就是 Conainter 想解決的事情。&lt;/p&gt;
&lt;h3 id=&#34;heading&#34;&gt;(高)依賴與耦合&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;高依賴與耦合 : 程式碼中綁死了某個模組，如下面程式碼綁死了 Log Service。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假設有一段程式碼如下 :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Log&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;void&lt;/span&gt;
    {
      $awsLogService &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AWSLogService&lt;/span&gt;();
      $awsLogService&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;);
    }  
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AWSLogService&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;void&lt;/span&gt;
    {
       &lt;span style=&#34;color:#f92672&#34;&gt;....&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但假設今天我們要將 Log 改傳到 GCP ( Google 雲端 )，那我們程式碼要修改成如下 :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Log&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;void&lt;/span&gt;
    {
      &lt;span style=&#34;color:#75715e&#34;&gt;//$awsLogService = new AWSLogService();
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//$awsLogService-&amp;gt;send(log);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      
      $gcpLogService &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GCPLogService&lt;/span&gt;();
      $gcpLogService&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;);
    }  
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GCPLogService&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;void&lt;/span&gt;
    {
       &lt;span style=&#34;color:#f92672&#34;&gt;....&lt;/span&gt;
    }
}

&lt;span style=&#34;color:#75715e&#34;&gt;// 使用
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
$log &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Log&lt;/span&gt;();
$log&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;log.....&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;從上面程式碼中，我們可以注意到我們沒當要換個服務時，都需要修改程式碼，並且這裡還有一個缺點，你要如何做單元測試 ? 程式碼裡面完全的綁死了 AWSLogService 或是 GCPLogService，沒有地方可以給我們進行替換，沒辦法替換就代表我們在做測試時，只能真的將資料丟到 AWS 或 GCP。&lt;/p&gt;
&lt;h3 id=&#34;-&#34;&gt;(低) 依賴與耦合&lt;/h3&gt;
&lt;p&gt;然後由於有上面說的缺點，因此會將程式碼改成如下。基本上就是將 LogService 改成由使用這個物件時來決定是用選擇 AWS 還是 GCP，並且這兩個 service 都實作同一個 ILogService 的 interface。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Log&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ILogService&lt;/span&gt; $logService;
  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __construct(&lt;span style=&#34;color:#a6e22e&#34;&gt;ILogService&lt;/span&gt; $logService)
    {
      $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;logService&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $logService;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;void&lt;/span&gt;
    {
      $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;logService&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;);
    }  
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GCPLogService&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ILogService&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;void&lt;/span&gt;
    {
       &lt;span style=&#34;color:#f92672&#34;&gt;....&lt;/span&gt;
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AWSLogService&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ILogService&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;void&lt;/span&gt;
    {
       &lt;span style=&#34;color:#f92672&#34;&gt;....&lt;/span&gt;
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ILogService&lt;/span&gt; 
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;();
}

&lt;span style=&#34;color:#75715e&#34;&gt;// 使用
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$log &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Log&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AWSLogServcie&lt;/span&gt;());
$log&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;log......&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;好接下來在拉回主題。&lt;/p&gt;
&lt;h3 id=&#34;-laravel-container-&#34;&gt;為什麼要使用 Laravel Container ?&lt;/h3&gt;
&lt;p&gt;上面我們的範例程式碼最後要執行時，會如下 :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

$log &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Log&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AWSLogServcie&lt;/span&gt;());
$log&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;log......&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣事實上沒什麼問題。&lt;/p&gt;
&lt;p&gt;但是如果這一段程式碼有很多地方使用怎麼辦 ? 有沒有可能系統中統一都要使用 AWS 的，但是其中一個地方忘了改，而不小心使用到 GCP ? 嗯這是有可能發生的。&lt;/p&gt;
&lt;p&gt;還有另一個問題，這一段程式碼本身就依賴了&lt;code&gt;Log&lt;/code&gt;這個類別，這樣事實上還是沒有解決依賴的問題。&lt;/p&gt;
&lt;p&gt;因此 Laravel 建立了 Container，並且會在開啟服務時，先行註冊好，例如下面偽代碼。只要在這個 conatiner 內部的 class 都會根據它註冊好的東西來進行處理。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

$containter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Container&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// 它會在這一段先將 ILogService 綁定好，如果 construct 中有使用到它的，將會將它實體化為 // AWSLogServcie。 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$containter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ILogService&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;AWSLogServcie&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// 實體化 Log 類別。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$log &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $container&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Log&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;);

$log&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;log....&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;-1&#34;&gt;那有兩個類別，它們內部有使用相同抽像類別，但這時它們實際上要使用不同的類別要怎麼處理呢 ?&lt;/h4&gt;
&lt;p&gt;Laravel 官網有給個範例如下，Photo 與 Video 都有使用到 Filesystem 這個抽象類別，但它們實際上要使用不一樣的類別，則可以使用如下的方法來進行指定。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

$this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;when&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;PhotoController&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;)
          &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;needs&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Filesystem&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;)
          &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;give&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
              &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Storage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;disk&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;local&amp;#39;&lt;/span&gt;);
          });

$this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;when&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;VideoController&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;)
          &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;needs&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Filesystem&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;)
          &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;give&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
              &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Storage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;disk&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s3&amp;#39;&lt;/span&gt;);
          });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://laravel-china.org/docs/laravel/5.5/container/1289#contextual-binding&#34;&gt;Contextual Bindings (上下文绑定)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;laravel--container-&#34;&gt;Laravel 如何建立 Container ?&lt;/h2&gt;
&lt;p&gt;這裡我們就要開始來研究一下 Laravel Container 的原始碼。&lt;/p&gt;
&lt;p&gt;首先最一開始是這裡，它會實體化一個 $app conatiner。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

$app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Illuminate\Foundation\Application&lt;/span&gt;(
    $_ENV[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;APP_BASE_PATH&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;??&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dirname&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__DIR__&lt;/span&gt;)
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下來我們來看一下 Illuminate\Foundation\Application 的程式碼。這裡可以知道 Application 繼承了 Container 這個類別。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Container&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ApplicationContract&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;HttpKernelInterface&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __construct($basePath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($basePath) {
            $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setBasePath&lt;/span&gt;($basePath);
        }
        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;registerBaseBindings&lt;/span&gt;();
        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;registerBaseServiceProviders&lt;/span&gt;();
        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;registerCoreContainerAliases&lt;/span&gt;();
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/laravel/framework/blob/5.7/src/Illuminate/Container/Container.php&#34;&gt;laravel5.7-container&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然後 Container 類別中，有兩個方法是重點那就是&lt;code&gt;bind&lt;/code&gt;與&lt;code&gt;make&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;bind&#34;&gt;bind&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;建立抽象與實體的綁定表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20181130-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;bind-&#34;&gt;bind 使用方式&lt;/h4&gt;
&lt;p&gt;基本上分為以下四種 :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// 1. 類別綁定 clouse
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;App&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UserRepository&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AWSUserRepository&lt;/span&gt;;
});

&lt;span style=&#34;color:#75715e&#34;&gt;// 2. 抽像類別綁定實際類別
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;App&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UserRepositoryInterface&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DbUserRepository&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// 3. 實際類別綁定
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;APP&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UserRepository&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;// 4. singleton 綁定
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;App&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;singleton&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UserRepository&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AWSUserRepository&lt;/span&gt;;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;heading1&#34;&gt;原始碼解析&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/laravel/framework/blob/5.7/src/Illuminate/Container/Container.php#L222&#34;&gt;laravel5.7-container-bind&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * Register a binding with the container.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @param  string  $abstract
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @param  \Closure|string|null  $concrete
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @param  bool  $shared
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @return void
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;($abstract, $concrete &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, $shared &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;)
    {
        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dropStaleInstances&lt;/span&gt;($abstract);
       
        &lt;span style=&#34;color:#75715e&#34;&gt;// 例如這種 APP::bind(&amp;#39;UserRepository&amp;#39;) 的註冊，就會執行這一段。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;is_null&lt;/span&gt;($concrete)) {
            $concrete &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $abstract;
        }
        
        &lt;span style=&#34;color:#75715e&#34;&gt;// 如果是上面那種情況或是沒有 Closure，就直接產生一個 Closure。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt; $concrete &lt;span style=&#34;color:#a6e22e&#34;&gt;instanceof&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Closure&lt;/span&gt;) {
            $concrete &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getClosure&lt;/span&gt;($abstract, $concrete);
        }

        &lt;span style=&#34;color:#75715e&#34;&gt;// 綁定，就是用一個 HashTable 來建立綁定對應。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bindings&lt;/span&gt;[$abstract] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compact&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;concrete&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shared&amp;#39;&lt;/span&gt;);
        
        &lt;span style=&#34;color:#75715e&#34;&gt;// 如果此類別已被 resolve 則進行 rebound。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;resolved&lt;/span&gt;($abstract)) {
            $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rebound&lt;/span&gt;($abstract);
        }
    }
    
        &lt;span style=&#34;color:#e6db74&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * Get the Closure to be used when building a type.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @param  string  $abstract
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @param  string  $concrete
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @return \Closure
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getClosure&lt;/span&gt;($abstract, $concrete)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ($container, $parameters &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []) &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; ($abstract, $concrete) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($abstract &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; $concrete) {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $container&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;($concrete);
            }

            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $container&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;make&lt;/span&gt;($concrete, $parameters);
        };
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;make&#34;&gt;make&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;產生實際的實體物件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20181130-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;heading2&#34;&gt;使用方法&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

$app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UserRepository&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;heading3&#34;&gt;原始碼解析&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/laravel/framework/blob/5.7/src/Illuminate/Container/Container.php#L607&#34;&gt;laravel5.7-container-make&lt;/a&gt;
&lt;a href=&#34;https://github.com/laravel/framework/blob/5.7/src/Illuminate/Container/Container.php#L635&#34;&gt;laravel5.7-containier-resolve&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

 &lt;span style=&#34;color:#e6db74&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * Resolve the given type from the container.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @param  string  $abstract
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @param  array  $parameters
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @return mixed
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;make&lt;/span&gt;($abstract, &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt; $parameters &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [])
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;resolve&lt;/span&gt;($abstract, $parameters);
    }


 &lt;span style=&#34;color:#e6db74&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * Resolve the given type from the container.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @param  string  $abstract
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @param  array  $parameters
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @return mixed
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resolve&lt;/span&gt;($abstract, $parameters &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [])
    {
        $abstract &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getAlias&lt;/span&gt;($abstract);

        $needsContextualBuild &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;empty&lt;/span&gt;($parameters) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_null&lt;/span&gt;(
            $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getContextualConcrete&lt;/span&gt;($abstract)
        );


        &lt;span style=&#34;color:#75715e&#34;&gt;// 如果此抽象類別已經實體化了，且 construct 沒使用其它外部注入，則回傳此物件。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;instances&lt;/span&gt;[$abstract]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt; $needsContextualBuild)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;instances&lt;/span&gt;[$abstract];
        }

        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;with&lt;/span&gt;[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $parameters;

        &lt;span style=&#34;color:#75715e&#34;&gt;// 這個地方有兩種情況
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 1. 從抽象類別的建構式取出有使用的類別，並回傳。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 2. 如果沒有，則從 bindings 中找出對應的實體類別。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        $concrete &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getConcrete&lt;/span&gt;($abstract);
        
        &lt;span style=&#34;color:#75715e&#34;&gt;// isBuildable =&amp;gt; true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 1. $concrete 與 $abstract 為相同 (也就直接使用類別來綁定)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// isBuildable =&amp;gt; false
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 1. 直接使用介面。 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 2. $abstract 本身內部還有依賴的外部套件。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isBuildable&lt;/span&gt;($concrete, $abstract)) {
            $object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;($concrete);
        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
            $object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;make&lt;/span&gt;($concrete);
        }
        
        &lt;span style=&#34;color:#75715e&#34;&gt;// 不太懂
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; ($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtenders&lt;/span&gt;($abstract) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; $extender) {
            $object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $extender($object, $this);
        }

        &lt;span style=&#34;color:#75715e&#34;&gt;// 註冊的類別如果被指定為 singleton 就要 cache 它。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isShared&lt;/span&gt;($abstract) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt; $needsContextualBuild) {
            $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;instances&lt;/span&gt;[$abstract] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $object;
        }

        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fireResolvingCallbacks&lt;/span&gt;($abstract, $object);

        &lt;span style=&#34;color:#75715e&#34;&gt;// 記錄那個類別已經被 resolve
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;resolved&lt;/span&gt;[$abstract] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;。&lt;/span&gt;;

        &lt;span style=&#34;color:#a6e22e&#34;&gt;array_pop&lt;/span&gt;($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;with&lt;/span&gt;);

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $object;
    }

    &lt;span style=&#34;color:#e6db74&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * Determine if the given concrete is buildable.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @param  mixed   $concrete
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @param  string  $abstract
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @return bool
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isBuildable&lt;/span&gt;($concrete, $abstract)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $concrete &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; $abstract &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; $concrete &lt;span style=&#34;color:#a6e22e&#34;&gt;instanceof&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Closure&lt;/span&gt;;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading4&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.turn.tw/?p=3347&#34;&gt;讀 SOURCE CODE 研究 LARAVEL IOC CONTAINER 實作的一點心得&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://laravel.tw/docs/4.2/ioc&#34;&gt;IoC 容器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://laravel-china.org/articles/6158/laravel-container-container-understand-below&#34;&gt;Laravel Container (容器) 深入理解 (下)
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>