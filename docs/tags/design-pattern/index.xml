<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>design pattern on 拿鐵派的馬克 Blog</title>
    <link>https://mark-lin.com/tags/design-pattern/</link>
    <description>Recent content in design pattern on 拿鐵派的馬克 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <managingEditor>h091237557@gmail.com (marklin)</managingEditor>
    <webMaster>h091237557@gmail.com (marklin)</webMaster>
    <lastBuildDate>Sun, 11 Jun 2017 19:51:35 +0800</lastBuildDate>
    
        <atom:link href="https://mark-lin.com/tags/design-pattern/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Node設計模式之命令模式 ( Command )</title>
      <link>https://mark-lin.com/posts/20170611/</link>
      <pubDate>Sun, 11 Jun 2017 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20170611/</guid>
      <description>&lt;p&gt;本文中我們將會知道兩件事件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;為什麼要使用命令模式呢 ? 
什麼是命令模式呢?
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;-&#34;&gt;為什麼要使用命令模式呢 ?&lt;/h2&gt;
&lt;p&gt;我們先來想想，假設我們要做一個簡單的計算機的功能，然後他有提供以下方法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;加&lt;/li&gt;
&lt;li&gt;減&lt;/li&gt;
&lt;li&gt;乘&lt;/li&gt;
&lt;li&gt;除&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然後實際上執行大概會長這樣 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;add(5) =&amp;gt; current = 5
sub(3) =&amp;gt; current = 2
mul(3) =&amp;gt; current = 6
div(3) =&amp;gt; current = 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這樣我們大概會寫個最簡單的程式碼，大概會長成下面這樣:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Calculator&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;(){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sub&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;mul&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;getCurrent&lt;/span&gt;(){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;;
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Calculator&lt;/span&gt;();
&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sub&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;mul&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getCurrent&lt;/span&gt;());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;-1&#34;&gt;這有啥問題呢 ?&lt;/h3&gt;
&lt;p&gt;如果我們這時要增加一個&lt;code&gt;undo&lt;/code&gt;的功能呢 ? 上面的程式碼的結構就無法做這種功能了，因為它的&lt;code&gt;緊偶合&lt;/code&gt;了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;緊耦合白話文就是你們(模組和類別)關係太好囉 ~ 要修理 A 的話 B 也要先打一頓才行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而我們上面範例關係太好的兩位可以定義為『行為請求者』與『行為實現者』，行為請求就是指我們外面指接&lt;code&gt;client.add(5)&lt;/code&gt;，而行為實現者則為&lt;code&gt;add&lt;/code&gt;方法裡面的實作。&lt;/p&gt;
&lt;p&gt;也因為上面這種狀況，所以我們無法做&lt;code&gt;undo&lt;/code&gt;功能，如果我們想要奇耙一點在這案例做排程或是記錄請求日誌的話，也都很難實現。&lt;/p&gt;
&lt;p&gt;所以解法就是 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;將『行為請求者』與『行為實現者』的解耦合，也就是所謂的『命令模式』。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;heading&#34;&gt;什麼是命令模式呢?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;就是將『行為請求者』與『行為實現者』分開模式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下圖中，我們會在請求者與實現者的中間增加一個東西，叫作&lt;code&gt;呼叫者&lt;/code&gt;，你也可以稱為&lt;code&gt;Invoker&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;這張圖的概念你可以簡單的想成，你去一間餐館食飯，然後你就是『請求者』，負責接受點菜的服務生就是『呼叫者』，而最後實際做飯的就是『實現者』。&lt;/p&gt;
&lt;p&gt;那為什麼這叫命令模式呢 ? 因為我們會將所有的請求，都封成一個『命令 command 』物件，接下來的服務生，會將這此命令寫在紙上，然後再由他來決定什麼時後要丟給廚師，而客戶如果要取消命令時，也都會由服務生這裡來經手。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20180228-01-command.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;heading1&#34;&gt;程式碼實作&lt;/h3&gt;
&lt;p&gt;接下來我們要將上面的程式碼來進行修改，首先我們會多增加上面那張圖中的&lt;code&gt;Invoker&lt;/code&gt;類別，記好他就是服務生，用來叫廚師做飯的。&lt;/p&gt;
&lt;p&gt;這段程式碼中，&lt;code&gt;execute&lt;/code&gt;就是用來實際叫廚師做飯的方法，而&lt;code&gt;undo&lt;/code&gt;就是用來執行取消這命令的方法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Invoker&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;commands&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [];
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;commands&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;);

        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Execute command : &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; , and result : &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;undo&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;commands&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;undo&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;);

        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Execute undo and result : &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;getCurrent&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後下面是我們每一個命令，這裡每一個都是廚師，然後裡面都有定義好這個命令實際要做的事情與取消時要做的事情，由於我是用 JS 這種語言來撰寫範例，所以沒有個抽象類別或 介面，不然每一個命令應該都會繼承一個叫 Command 的類別或介面。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AddCommand&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Add&amp;#34;&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;undo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SubCommand&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sub&amp;#34;&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;undo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MulCommand&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mul&amp;#34;&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;undo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DivCommand&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Div&amp;#34;&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;undo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最後執行時，我們會麻煩 invoker (服務生)，叫實際執行者 (廚師) 進行工作，並且服務生那裡都有記住我們要點的菜，如果臨時想取消，就很簡單囉。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;invoker&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Invoker&lt;/span&gt;();
&lt;span style=&#34;color:#a6e22e&#34;&gt;invoker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AddCommand&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)); &lt;span style=&#34;color:#75715e&#34;&gt;// current =&amp;gt; 5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;invoker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SubCommand&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)); &lt;span style=&#34;color:#75715e&#34;&gt;// current =&amp;gt; 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;invoker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MulCommand&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)); &lt;span style=&#34;color:#75715e&#34;&gt;// current =&amp;gt; 6
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;invoker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DivCommand&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)); &lt;span style=&#34;color:#75715e&#34;&gt;// current =&amp;gt; 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;invoker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;undo&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;// current =&amp;gt; 6
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;invoker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getCurrent&lt;/span&gt;());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading2&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;今天我們學習了『命令模式』，它主要的功能與目的如下 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;就是將『行為請求者』與『行為實現者』分開的模式，為了更彈性操作命令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你只要記得餐廳的概念就可以理解命令模式的實作了。&lt;/p&gt;
&lt;p&gt;再來我們談談它的優缺點。&lt;/p&gt;
&lt;p&gt;它最主要的優點是，可讓我們將『行為要求者』與『行為執行者』分開，使得我們可以做更多的運用，例如取消、寫日誌、交易事務 (就是要麻所有命令都執行要麻不要執行)。&lt;/p&gt;
&lt;p&gt;但缺點呢 ?
不能否認程式碼的複雜度增加與變長，這也代表，不是所有類似這種命令的功能都需要用到這種模式，在設計一個系統時最怕『過度設計』，所以如果你們確定你的系統是需要『對命令進行特殊的動作時(ex: undo)』時，才需要使用到這種模式。&lt;/p&gt;
&lt;p&gt;像我剛剛的計算機範例，如果不需要&lt;code&gt;undo&lt;/code&gt;，那用最一開始的範例就夠了 ~~&lt;/p&gt;
&lt;h2 id=&#34;heading3&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;大話設計模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;Node.js設計模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.jikexueyuan.com/project/java-design-pattern/command-pattern.html&#34;&gt;極客學院-命令模式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Node設計模式之策略模式 ( Stratgey )</title>
      <link>https://mark-lin.com/posts/20170610/</link>
      <pubDate>Sat, 10 Jun 2017 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20170610/</guid>
      <description>&lt;p&gt;本篇文章中，我們想要知道以下兩件事情 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;為什麼要使用它呢 ?&lt;/li&gt;
&lt;li&gt;什麼是策略模式呢 ?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;-&#34;&gt;為什麼要使用策略模式呢 ?&lt;/h2&gt;
&lt;p&gt;我們簡單的寫一下，一個多需要用不同方法的登入方法，它可以選擇使用&lt;code&gt;google&lt;/code&gt;、&lt;code&gt;facebook&lt;/code&gt;的方法，來進行登入。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google&amp;#34;&lt;/span&gt;) {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;doGoogleLoginSomething&lt;/span&gt;();
            &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google login process&amp;#34;&lt;/span&gt;);
        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;facebook&amp;#34;&lt;/span&gt;) {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;doFbLoginSomething&lt;/span&gt;();
            &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;facebook login process&amp;#34;&lt;/span&gt;);
        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;doSomething&lt;/span&gt;();
            &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;custom login process&amp;#34;&lt;/span&gt;);
        }
    }
}


&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那上面這段程式碼中，有那些缺點呢 ?&lt;/p&gt;
&lt;p&gt;首先第一個，它包含了很多的 if else 判斷，這樣反而增加了該函數的邏輯分支。&lt;/p&gt;
&lt;p&gt;第二個為該函數缺泛彈性，如果你想增加&lt;code&gt;twitter&lt;/code&gt;的登入，那就必須修改這函數的內部實作，這樣違反了&lt;code&gt;開放封閉原則&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;開放封閉原則 : 白話文就是當你增加新功能時，盡量不修改原有的程式碼。&lt;/p&gt;
&lt;p&gt;好處 : &lt;code&gt;較好維護&lt;/code&gt;、&lt;code&gt;較好測試&lt;/code&gt;、&lt;code&gt;可重複使用&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以說，當碰到這種情況時，就可以使用策略模式囉 ~&lt;/p&gt;
&lt;p&gt;策略模式簡單的來說，就是為了處理以下的情況 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;當使用者有相同的行為，但不同的場景時，有不同的方法。&lt;/p&gt;
&lt;p&gt;例如 : 使用者想要進行登入，但我們可以使用&lt;code&gt;google&lt;/code&gt;、&lt;code&gt;facebook&lt;/code&gt;等不同的方法來登入。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在白話文一點就是 : 當你有大量的&lt;code&gt;if else&lt;/code&gt;或&lt;code&gt;switch&lt;/code&gt;就可以使用策略模式了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;-1&#34;&gt;策略模式是什麼 ?&lt;/h2&gt;
&lt;p&gt;接下來我們就要使用策略模式來修改上面的程式碼，但在開始前，我們要先知道策略模式是什麼。&lt;/p&gt;
&lt;p&gt;簡單的說，它的定義如下 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;定義一系列的演算法，把它們一個個封裝起來，並且可以相互替換。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以我們上面登入的範例來看，&lt;code&gt;login&lt;/code&gt;裡面的每一種登入方法就是一種演算法，但他都丟在裡面，所以我們策略模式就是要將他，一個一個封裝起來，並且可以相互的替換。&lt;/p&gt;
&lt;p&gt;如下面的程式碼，我們將每一個登入的演算法都封裝起來，然後在需要那個的時後，就使用那個。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;stragtegy&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;stragtegy&lt;/span&gt;();
    }
}


&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;loginStrategy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;fb&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){
        &lt;span style=&#34;color:#a6e22e&#34;&gt;doFbLoginSomething&lt;/span&gt;();
    },
    &lt;span style=&#34;color:#a6e22e&#34;&gt;google&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){
        &lt;span style=&#34;color:#a6e22e&#34;&gt;doGoogleLoginSomething&lt;/span&gt;();
    },
    &lt;span style=&#34;color:#a6e22e&#34;&gt;custom&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){
        &lt;span style=&#34;color:#a6e22e&#34;&gt;doSomething&lt;/span&gt;();
    }
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;loginStrategy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fb&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先我們先來看看&lt;code&gt;可維護性&lt;/code&gt;，上面的程式碼中，我們假設要新增一個&lt;code&gt;twitter&lt;/code&gt;，那你只需要在&lt;code&gt;loginStrategy&lt;/code&gt;裡新增一個&lt;code&gt;twitter&lt;/code&gt;的策略，這樣就不會動到主題的&lt;code&gt;login&lt;/code&gt;函數，以防止，當你修改了&lt;code&gt;login&lt;/code&gt;會影響到其它登入方法的問題。&lt;/p&gt;
&lt;p&gt;再來來看看&lt;code&gt;可測試性&lt;/code&gt;，我們只需要&lt;code&gt;mock&lt;/code&gt;你要測試的策略，然後在將他丟到&lt;code&gt;login&lt;/code&gt;裡面，進行測試，非常的簡單，如果是沒用策略模式的程式碼，我還真的要動腦想一下著麼寫&lt;code&gt;單元測試&lt;/code&gt;了。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;上面我們簡單的用登入系統的例子，來說明策略模式，在 node 中，有一個叫&lt;code&gt;passport js&lt;/code&gt;的東西，就是使用策略模式，來實作登入系統的實例，筆上之前就有寫過一篇關於 passport 的文章，可參考參考。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mark-lin.com/posts/20170609/&#34;&gt;Passport.js 之 Hello 你好嗎 ~&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading1&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dickeylth.github.io/2013/10/30/JavaScriptDesignPatterns-StrategyPattern/&#34;&gt;JavaScript中的设计模式(4)——策略模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;Nodejs設計模式-Mario Casciaro 著&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Node 設計模式之代理器 ( Proxy )</title>
      <link>https://mark-lin.com/posts/20170603/</link>
      <pubDate>Sat, 03 Jun 2017 19:51:35 +0800</pubDate>
      <author>h091237557@gmail.com (marklin)</author>
      <guid>https://mark-lin.com/posts/20170603/</guid>
      <description>&lt;p&gt;本篇文章中我們將要解決以下的問答。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;什麼是代理器模式 ?&lt;/li&gt;
&lt;li&gt;我們為什麼要使用它 ?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中本篇文章還會介紹&lt;code&gt;ES6&lt;/code&gt;所提供的&lt;code&gt;Proxy&lt;/code&gt;使用方法。&lt;/p&gt;
&lt;h2 id=&#34;-&#34;&gt;什麼是代理器模式呢 ?&lt;/h2&gt;
&lt;p&gt;首先我們先來看一張下面這張圖，這張圖基本就說明了代理器模式的概念，無論如何，&lt;code&gt;client&lt;/code&gt;和&lt;code&gt;Real Object&lt;/code&gt;之間一定會由&lt;code&gt;Proxy&lt;/code&gt;來進行溝通。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://yixiang8780.com/outImg/20170628_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我們還可以用下面這句非常白話文的文字來表達代理器模式的精華。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我的時間很忙的，除非真的要用到我，不然請直接找我的代理人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我們簡單來寫個範例來說明一下，代理器的實際上使用，首先我們先寫一個登入的程式。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserService&lt;/span&gt;{
	&lt;span style=&#34;color:#a6e22e&#34;&gt;construct&lt;/span&gt; () {
	
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;GetUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;){
	    ......
	    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後通常我們要使用的時後會執行下面程式碼。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userService&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserService&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userService&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetUser&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mark&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123456789&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣看起來是沒什麼問題，東西是都還可以執行，然後我們來改寫成代理器的模式，我們會先建立一個&lt;code&gt;UserServiceProxy&lt;/code&gt;，我們外面要使用&lt;code&gt;UserService&lt;/code&gt;時，都只能透過這個&lt;code&gt;Proxy&lt;/code&gt;進行溝通 (想找明星，只能想找他的代理人)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意 : 這只是其中一種寫法，代理器還有很多的方法可實現。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserServiceProxy&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;construct&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;real&lt;/span&gt;){
      &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Real&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;real&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;GetUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;passowrd&lt;/span&gt;){
       &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;real&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Real&lt;/span&gt;(); 
       &lt;span style=&#34;color:#a6e22e&#34;&gt;real&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;);
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userServiceProxy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserServiceProxy&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;UserService&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userServiceProxy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetUser&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mark&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123456789&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;-proxy--&#34;&gt;為啥要用 Proxy 呢 ?&lt;/h2&gt;
&lt;p&gt;嗯 ? 那這樣有啥用處 ? 為要這樣寫 ? 上面的程式碼當然還看不出來代理器的優點，我們在將&lt;code&gt;UserService&lt;/code&gt;裡的&lt;code&gt;GetUser&lt;/code&gt;在增加幾行程式碼功能。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserService&lt;/span&gt;{
    &lt;span style=&#34;color:#a6e22e&#34;&gt;construct&lt;/span&gt;(){
       ... &lt;span style=&#34;color:#a6e22e&#34;&gt;為了使用getUserFromDB所需耗費的資源處理&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;假設&lt;/span&gt;)
    
    }
	
	&lt;span style=&#34;color:#a6e22e&#34;&gt;GetUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;){
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;saveLog&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get user&amp;#34;&lt;/span&gt;);
	    
	    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;paaword&lt;/span&gt;){
	      &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;;
	    }
	    
		 &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;chached&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;)){
		   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;;
		 }
	    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getUserFromDB&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;);
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;saveCache&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;);
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;saveLog&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get user success&amp;#34;&lt;/span&gt;);
	    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在&lt;code&gt;GetUser&lt;/code&gt;這個程式碼，我們需要寫&lt;code&gt;log&lt;/code&gt;，然後我們還要驗證使用者有沒有輸入帳號和密碼，接下來我們還要確認有沒有&lt;code&gt;cache&lt;/code&gt;，如果有的話就直接從&lt;code&gt;cache&lt;/code&gt;裡取出使用者，如果沒有就要使用帳號和密碼去取得該名使用者，最後還要在將它存放到&lt;code&gt;cache&lt;/code&gt;中和再寫個&lt;code&gt;log&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;雖然上面的程式碼可以執行，但事實上有三個問題。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;違反了&lt;code&gt;單一職責原則&lt;/code&gt;，&lt;code&gt;GetUser&lt;/code&gt;裡面做了太多的事，會變的不好測試與修改。&lt;/li&gt;
&lt;li&gt;上面的建構子有假設，他在實體化時，事實上需要做一些耗費資源的事情，這也表示我們的核心是&lt;code&gt;getUserFromDB&lt;/code&gt;除非確定要使用到他，不然請全部找他的代理人處理(Proxy)。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以為了改善以上兩個問題我們將程式碼修改成下面這樣。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserService&lt;/span&gt;{
    &lt;span style=&#34;color:#a6e22e&#34;&gt;construct&lt;/span&gt;(){
       ...&lt;span style=&#34;color:#a6e22e&#34;&gt;conect&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.
       ...&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cached&lt;/span&gt;.
       ... &lt;span style=&#34;color:#a6e22e&#34;&gt;耗費很大的資源的東西&lt;/span&gt;
    
    }
	
	&lt;span style=&#34;color:#a6e22e&#34;&gt;GetUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;){
	    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getUserFromDB&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;);
	    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;;
	}
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;Class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserServiceProxy&lt;/span&gt;{
    &lt;span style=&#34;color:#a6e22e&#34;&gt;construct&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;real&lt;/span&gt;){
      &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Real&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;real&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;GetUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;passowrd&lt;/span&gt;){
       &lt;span style=&#34;color:#a6e22e&#34;&gt;saveLog&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get User&amp;#34;&lt;/span&gt;);
       &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;paaword&lt;/span&gt;){
	      &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;;
	    }
	    
		 &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;chached&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;)){
		   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;;
		 }
       &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;real&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Real&lt;/span&gt;(); 
       &lt;span style=&#34;color:#a6e22e&#34;&gt;real&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;);
       &lt;span style=&#34;color:#a6e22e&#34;&gt;saveCache&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;);
       &lt;span style=&#34;color:#a6e22e&#34;&gt;saveLog&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get user success&amp;#34;&lt;/span&gt;);
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userServiceProxy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserServiceProxy&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;UserService&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userServiceProxy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetUser&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mark&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123456789&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面這種程式碼解決了上面說提到的兩個問題，首先我們將和不屬於&lt;code&gt;getUser&lt;/code&gt;這個業務的東西完全的拉出來，他就變成單純的取得使用者，而致於第二個問題，實體化時會耗費資源這點也因為修改成上面這類型，我們只有在&lt;code&gt;必要&lt;/code&gt;時才能需用真的用到&lt;code&gt;Real Obj&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;上面這種寫法還有一個好處，假設我們&lt;code&gt;UserService&lt;/code&gt;要修改成&lt;code&gt;UserFBService&lt;/code&gt;的話我們只要確定&lt;code&gt;UserFBService&lt;/code&gt;有實作&lt;code&gt;GetUser&lt;/code&gt;，就幾乎可以不用修改程式碼直接進行使用。
不在這事實上是&lt;code&gt;DI(Dependency Injection )&lt;/code&gt;的運用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserFBService&lt;/span&gt;{
    &lt;span style=&#34;color:#a6e22e&#34;&gt;construct&lt;/span&gt;(){
       ...&lt;span style=&#34;color:#a6e22e&#34;&gt;conect&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.
       ...&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cached&lt;/span&gt;.
       ... &lt;span style=&#34;color:#a6e22e&#34;&gt;耗費很大的資源的東西&lt;/span&gt;
       ...&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fb&lt;/span&gt;...
    }
	
	&lt;span style=&#34;color:#a6e22e&#34;&gt;GetUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;){
	    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getUserFromDB&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;);
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;saveCache&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;);
	    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;;
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userServiceProxy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserServiceProxy&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;UserFBService&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userServiceProxy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetUser&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mark&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123456789&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面只是簡單的用程式碼來表達代理器可以做什麼事，但我們可以歸納出一句話，來說明為什麼要用代理器。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;代理器就是為了保護實體而存在。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然後我們還可以將上面那句話，在簡單用三點功能來說明。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;攔截和監視外部進來的東西。&lt;/li&gt;
&lt;li&gt;降低實體物件的複雜性。&lt;/li&gt;
&lt;li&gt;在進行耗費資源的操作前，先進行管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;es6--proxy&#34;&gt;ES6 的 Proxy&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;es6&lt;/code&gt;時，他有推出一個功能，那就是&lt;code&gt;Proxy&lt;/code&gt;，它的核心功能事實上就和我們上面說的一樣，這邊在複習一次。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Proxy 就是為了保護實體而存在。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我們直接來看使用的方法。&lt;/p&gt;
&lt;h3 id=&#34;heading&#34;&gt;資料設定的驗證&lt;/h3&gt;
&lt;p&gt;這邊我們將要來簡單的實作資料驗證的功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假設我們有一個物件&lt;code&gt;obj&lt;/code&gt;，每當要為他設置欄位時，我們都要先驗證欄位該值不能為&lt;code&gt;數字&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {};
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input_data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Proxy(&lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt;,{
    &lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt;){
    	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;number&amp;#39;&lt;/span&gt;){
    	   &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; Error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;不能是數值喔&amp;#34;&lt;/span&gt;)
    	}
    	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Reflect&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt;);
    }
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;執行的結果如下，上面程式碼中，&lt;code&gt;set&lt;/code&gt;就是代表如果該實際物件被被設置欄位時，會先在這個&lt;code&gt;proxy&lt;/code&gt;的&lt;code&gt;set&lt;/code&gt;裡面先進行處理，其中&lt;code&gt;target&lt;/code&gt;就是我們的&lt;code&gt;obj&lt;/code&gt;實際物件，&lt;code&gt;key&lt;/code&gt;就是我們要新增的欄位，以下範例來看就是&lt;code&gt;title&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;input_data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// Error !!!!!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;input_data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bababab&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// OK !!!!!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;-log-&#34;&gt;使用的 log 撰寫&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;假設我們有一個物件&lt;code&gt;obj&lt;/code&gt;並且它有一個方法&lt;code&gt;getData&lt;/code&gt;，然後我們每次在呼叫該方法時，會自動寫 log 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;getData&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; () =&amp;gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mark&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,
    }
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Proxy(&lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt;,{
	&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt;){
	  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;];
	  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (...&lt;span style=&#34;color:#a6e22e&#34;&gt;arguments&lt;/span&gt;) =&amp;gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log ~~~~ &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fucntion :&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;)
	  		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Reflect&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;arguments&lt;/span&gt;);
	  }
	}
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;執行結果如下程式碼。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getData&lt;/span&gt;();

&lt;span style=&#34;color:#75715e&#34;&gt;// log ~~~~ fucntion :getData
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;{
   &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mark&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading1&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;最後我們來簡單的為最上面問的兩個問題做些結論。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;什麼是代理器模式 ?&lt;/li&gt;
&lt;li&gt;我們為什麼要使用它 ?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;代理器模式就是一個實際物件，只能透過代理器物件來連絡他。&lt;/li&gt;
&lt;li&gt;而我們為什麼要使用他呢 ? 主要原因就是&lt;code&gt;為了保護實際物件&lt;/code&gt;，不要讓他做太多的事，已經避免三不五十的都時用他，只有在真的會用到他時才使用。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;heading2&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&#34;&gt;developer.mozilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3cplus.com/javascript/use-cases-for-es6-proxies.html&#34;&gt;实例解析ES6 Proxy使用场景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;Node.js設計模式 (書) &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;Javascript設計模式與開發實踐 (書) &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;javascript設計模式(o&#39;reilly)(書)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;深入淺出設計模式 (o&#39;reilly)(書)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>