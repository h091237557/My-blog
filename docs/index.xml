<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>拿鐵派的馬克 Blog</title>
    <link>https://mark-lin.com/</link>
    <description>Recent content on 拿鐵派的馬克 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy;Your Name 2019</copyright>
    <lastBuildDate>Sun, 29 Sep 2019 20:16:57 +0800</lastBuildDate>
    
	<atom:link href="https://mark-lin.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>30-14 之資料庫層的優化 - 表的設計</title>
      <link>https://mark-lin.com/posts/20190929/</link>
      <pubDate>Sun, 29 Sep 2019 20:16:57 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20190929/</guid>
      <description>正文開始 本篇文章中咱們將要從『 表 』的角度來儘可能的優化性能。 表設計的幾個小建議 正規與非正規的小戰爭 表設計的幾個小建議 這個章節會給一些建立表時</description>
    </item>
    
    <item>
      <title>30-13 之資料庫層的優化 - 索引設計與雷區</title>
      <link>https://mark-lin.com/posts/20190928/</link>
      <pubDate>Sat, 28 Sep 2019 20:12:39 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20190928/</guid>
      <description>正文開始 前面兩篇文章中，咱們已經學習完索引的核心觀念以後，接下來咱們學學在使用時有那些的優質的方法與注意事項。 30-11 之資料庫層的核心 - 索引結構演</description>
    </item>
    
    <item>
      <title>30-12 之資料庫層的核心 - MySQL 的索引實現</title>
      <link>https://mark-lin.com/posts/20190927/</link>
      <pubDate>Fri, 27 Sep 2019 20:11:06 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20190927/</guid>
      <description>正文開始 上一篇文章中，我們理解了 innoDB 索引的基本原理 b+ 樹的，也理解了為什麼 innoDB 要選擇 b+ 樹的原因後，那接下來，我們要來理解，在 innoDB 中『 實際上 』是如何使</description>
    </item>
    
    <item>
      <title>30-11 之資料庫層的核心 - 索引結構演化論 B&#43;樹</title>
      <link>https://mark-lin.com/posts/20190926/</link>
      <pubDate>Thu, 26 Sep 2019 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20190926/</guid>
      <description>正文開始 接下來咱們要來理解資料庫系統中最核心的問題 : 要如何儲放資料，才能更快速的找到資料呢 ? 而這個東西的技術就是所謂的 : 索引 而在 mysql 中決定如何</description>
    </item>
    
    <item>
      <title>30-30之寫給想入門影音直播開發的 Junior 工程師攻略本</title>
      <link>https://mark-lin.com/posts/20180930/</link>
      <pubDate>Sun, 30 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180930/</guid>
      <description>前言 這辛苦的三十天總於結束了，當初原本只是想要理解直播相關協議的東西一下，但是卻發現越來越多奇怪的名詞跑了出來，就算大概的知道 HLS 是要做什麼，</description>
    </item>
    
    <item>
      <title>30-29之 WebRTC 的 P2P 打洞術 ( ICE )</title>
      <link>https://mark-lin.com/posts/20180929/</link>
      <pubDate>Sat, 29 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180929/</guid>
      <description>正文開始 上一篇文章中，咱們已經理解了為什麼 P2P 連線如此的困難，接下來這篇文章咱們將要學習： WebRTC 是如何進行打洞與連線呢 ? WebRTC 的打洞流程 ICE WebRTC 它主要使用</description>
    </item>
    
    <item>
      <title>30-28之 WebRTC 連線前傳 - 為什麼 P2P 連線很麻煩 ? ( NAT )</title>
      <link>https://mark-lin.com/posts/20180928/</link>
      <pubDate>Fri, 28 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180928/</guid>
      <description>正文開始 在開始說明 WebRTC 如何建立 P2P 連線前，咱們要先理解一件事情，那就是 WebRTC 要使用非常多的 P2P 連線技術，那位啥它需要使用如此多的技術呢 ? 那就是本篇文章</description>
    </item>
    
    <item>
      <title>30-27之 WebRTC 的 Signaling Server</title>
      <link>https://mark-lin.com/posts/20180927/</link>
      <pubDate>Thu, 27 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180927/</guid>
      <description>正文開始 上一篇文章中，咱們已經學習完了 WebRTC 的一些基本知識，接下來咱們要針對 Signaling Server 這東東來做做一些比較深的的探討。 Signaling Server 要做的事情。 WebRTC 與 SDP。 Signaling S</description>
    </item>
    
    <item>
      <title>30-26之 WebRTC 的 P2P 即時通信與小範例</title>
      <link>https://mark-lin.com/posts/20180926/</link>
      <pubDate>Wed, 26 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180926/</guid>
      <description>正文開始 在很前面的文章中，咱們有簡單的介紹如何使用 WebRTC 來採集聲音與影像，但那時只是很簡單的介紹一下而以，所以接下來的幾篇文章，咱們將要來深入的</description>
    </item>
    
    <item>
      <title>30-25之直播連麥的挑戰與方案 ( P2P )</title>
      <link>https://mark-lin.com/posts/20180925/</link>
      <pubDate>Tue, 25 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180925/</guid>
      <description>正文開始 現今大部份的直播咱們要可以與漂亮的直播主姐姐或硬漢大叔進行互動，基本上咱們只能使用文字，也就是所謂的聊天室，而這篇文章咱們將要介紹另</description>
    </item>
    
    <item>
      <title>30-24之直播與點播可動版的改良 ( 正式版 )</title>
      <link>https://mark-lin.com/posts/20180924/</link>
      <pubDate>Mon, 24 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180924/</guid>
      <description>正文開始 上一篇文章中咱們學習完了 CDN 的相關知識以後，接下來這篇文章，我們將要將上一篇所學的來改善咱們以下兩篇文章可動版的架構。 使用 CDN 來調整可動</description>
    </item>
    
    <item>
      <title>30-23之 CDN 的說話島 ( AWS CloudFront  CDN 實作 )</title>
      <link>https://mark-lin.com/posts/20180923/</link>
      <pubDate>Sun, 23 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180923/</guid>
      <description>正文開始 上一篇文章中，咱們有提到點播與直播可動版本的一些問題，如下所列。 人多時連線數限制問題。 人多時頻寬問題。 人多時效能消耗問題。 遠距離看片</description>
    </item>
    
    <item>
      <title>30-22之點播與直播可動版問題探討</title>
      <link>https://mark-lin.com/posts/20180922/</link>
      <pubDate>Sat, 22 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180922/</guid>
      <description>正文開始 前面文章中咱們簡單了可以動的點播 ( like KKTV )與直播 ( like 17 )的功能，那接下來這篇文章主題要探討的目問題為： 這兩篇文章實際上應用會有什麼問題</description>
    </item>
    
    <item>
      <title>30-21之如何建立的像 17 一樣的直播功能呢 ?</title>
      <link>https://mark-lin.com/posts/20180921/</link>
      <pubDate>Fri, 21 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180921/</guid>
      <description>正文開始 上一篇文章中，咱們已經學習了如何建立點播這種類型的網站應用，接下咱們要來學學如何建立直播應用。 在筆者的30-09之別人要如何聽到我的</description>
    </item>
    
    <item>
      <title>30-20之如何建立像 KKTV 一樣的點播功能呢 ? </title>
      <link>https://mark-lin.com/posts/20180920/</link>
      <pubDate>Thu, 20 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180920/</guid>
      <description>正文開始 前面聲音與影像的基本原理都學習完後，咱們接下來要來實作一些東西。 在筆者的30-09之別人要如何聽到我的聲音呢 ?有提到三種影音的傳遞方</description>
    </item>
    
    <item>
      <title>30-19 之收到聲音後要如何的播出呢 ?  ( FFMpeg )</title>
      <link>https://mark-lin.com/posts/20180919/</link>
      <pubDate>Wed, 19 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180919/</guid>
      <description>正文開始 在前面的文章中，咱們咱們已經會了如何將聲音傳送給對方，而接下來這篇文章咱們就要來學習 收到了聲音已後，要如何的播出呢 ? 咱們收到聲音以後</description>
    </item>
    
    <item>
      <title>30-18 之影音傳輸協議總整理</title>
      <link>https://mark-lin.com/posts/20180918/</link>
      <pubDate>Tue, 18 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180918/</guid>
      <description>正文開始 30-12之 RTP/RTCP 傳輸協議 30-13之 RTSP 傳輸協議 30-14之 RTMP 傳輸協議 30-15之 HLS 傳輸協議 30-16之 HTTP-FLV 傳輸協議) 30-17之 MPEG-DASH 傳輸協</description>
    </item>
    
    <item>
      <title>30-17之 MPEG-DASH 傳輸協議</title>
      <link>https://mark-lin.com/posts/20180917/</link>
      <pubDate>Mon, 17 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180917/</guid>
      <description>正文開始 接下來咱們要來介紹 MPEG-DASH協議。 MPEG-DASH 協議 本篇文章將會分成幾個章節來理解 MPEG-DASH 協議： MPEG-DASH 協議是要用來完成什麼事情呢 ? MPEG-DASH 協議如何完成它</description>
    </item>
    
    <item>
      <title>30-16之 HTTP-FLV 傳輸協議</title>
      <link>https://mark-lin.com/posts/20180916/</link>
      <pubDate>Sun, 16 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180916/</guid>
      <description>正文開始 接下來咱們要來介紹 HTTP-FLV 協議。 HTTP-FLV 協議 本篇文章將會分成幾個章節來理解 HTTP-FLV 協議： HTTP-FLV 協議是要用來完成什麼事情呢 ? HTTP-FLV 協議如何完成它想做的事情呢 ? 建</description>
    </item>
    
    <item>
      <title>30-15之 HLS 傳輸協議</title>
      <link>https://mark-lin.com/posts/20180915/</link>
      <pubDate>Sat, 15 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180915/</guid>
      <description>正文開始 接下來咱們要來介紹 HLS 協議。 HLS 協議 本篇文章將會分成幾個章節來理解 HLS 協議： HLS 協議是要用來完成什麼事情呢 ? HLS 協議如何完成它想做的事情呢 ? 建</description>
    </item>
    
    <item>
      <title>30-14之 RTMP 傳輸協議</title>
      <link>https://mark-lin.com/posts/20180914/</link>
      <pubDate>Fri, 14 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180914/</guid>
      <description>正文開始 接下來咱們要來介紹 RTMP 協議。 RTMP 協議 本篇文章將會分成幾個章節來理解 RTMP 協議： RTMP 協議是要用來完成什麼事情呢 ? RTMP 協議如何完成它想做的事情呢 ? 建</description>
    </item>
    
    <item>
      <title>30-13之 RTSP 傳輸協議</title>
      <link>https://mark-lin.com/posts/20180913/</link>
      <pubDate>Thu, 13 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180913/</guid>
      <description>正文開始 本篇文章咱們將要開始介紹第一個應用層的流通訊協議 RTSP，別忘了上一篇介紹的 RTP 是傳輸層。 RTSP 協議 本篇文章將會分成幾個章節來理解 RTSP 協議：</description>
    </item>
    
    <item>
      <title>30-12之 RTP/RTCP 傳輸協議</title>
      <link>https://mark-lin.com/posts/20180912/</link>
      <pubDate>Wed, 12 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180912/</guid>
      <description>正文開始 在前一篇學習完了 TCP 與 UDP 協議以後，咱們要介紹另一個傳輸層協議： RTP 協議 (RTCP 後來會提到) 本篇文章將會分成幾個章節來理解 RTP 協議： RTP 協議是要用來</description>
    </item>
    
    <item>
      <title>30-11之 TCP 與 UDP 協議</title>
      <link>https://mark-lin.com/posts/20180911/</link>
      <pubDate>Tue, 11 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180911/</guid>
      <description>正文開始 上一文章中咱們理解了每一層通訊協議大約是在做什麼事情以後，咱們這篇文章中將專門來說明，在傳輸層的兩個協議TCP與UDP。 為什麼會選這</description>
    </item>
    
    <item>
      <title>30-10之通訊協議的基本常識</title>
      <link>https://mark-lin.com/posts/20180910/</link>
      <pubDate>Mon, 10 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180910/</guid>
      <description>正文開始 在開始進行流媒體通訊協議前，咱們要先來學習什麼是通訊協議，這個東西沒有學習好，雖然你還是可以幹出一個直播服務器，但就只是做出來，但是</description>
    </item>
    
    <item>
      <title>30-09之別人要如何聽到我的聲音呢 ?</title>
      <link>https://mark-lin.com/posts/20180909/</link>
      <pubDate>Sun, 09 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180909/</guid>
      <description>正文開始 之前的八篇文章中，我們已經理解完聲音與影像的採集與編碼原理，並且也簡單的進行 Web 方面的採集實作，接下來咱們就要開始進入網路的部份，而這</description>
    </item>
    
    <item>
      <title>30-08之 WebRTC 採集的詳細說明與聲音的加工</title>
      <link>https://mark-lin.com/posts/20180908/</link>
      <pubDate>Sat, 08 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180908/</guid>
      <description>正文開始 前一篇文章『30-07 Web 如何進行語音與影像採集 ?』咱們已經學習到如何使用 WebRTC 來進行聲音與影像的採集，並且將採集的結果儲放成一個 stre</description>
    </item>
    
    <item>
      <title>30-07之Web 如何進行語音與影像採集 ?</title>
      <link>https://mark-lin.com/posts/20180907/</link>
      <pubDate>Fri, 07 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180907/</guid>
      <description>正文開始 前面幾篇咱們已經學習了聲音與影像的採集相關知識，那接下咱們來學習一下如何在 Web 上進行聲音與影像的採集。 如何在 Web 上進行聲音與影像的採集 ?</description>
    </item>
    
    <item>
      <title>30-06之聲音與影像的封裝</title>
      <link>https://mark-lin.com/posts/20180906/</link>
      <pubDate>Thu, 06 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180906/</guid>
      <description>正文開始 前面的文章咱們已經學習到麥克風或攝影機如何的將聲音與影像進行採集，並且也學會了將這些 raw data 進行編碼為了讓它們儘量小點兒，好讓咱們傳輸時</description>
    </item>
    
    <item>
      <title>30-05之影像的編碼與壓縮</title>
      <link>https://mark-lin.com/posts/20180905/</link>
      <pubDate>Wed, 05 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180905/</guid>
      <description>正文開始 本篇文章中我們將要學習以下的主題: 影像編碼 接下來我們會分以下三個章節來進行學習: 什麼是影像編碼呢 ? 如何進行壓縮呢 ? 常用的編碼 什麼是影</description>
    </item>
    
    <item>
      <title>30-04之影像的採集與原理</title>
      <link>https://mark-lin.com/posts/20180904/</link>
      <pubDate>Tue, 04 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180904/</guid>
      <description>圖片來源:馬克 正文開始 影像的產生與採集 在聲音的採集與編碼後，咱們要開始學習影像採集的部份，在開始採集之前咱們要先理解圖片，接下來我們還要學習</description>
    </item>
    
    <item>
      <title>30-03之聲音的編碼與壓縮</title>
      <link>https://mark-lin.com/posts/20180903/</link>
      <pubDate>Mon, 03 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180903/</guid>
      <description>圖片來源 : 馬克 正文開始 在上一篇文章中，在咱們理解了麥克風幫我們將聲音進行採集，並且透過 PCM 方法轉化成電腦看的懂的東東後，接下來咱們要來學習以下</description>
    </item>
    
    <item>
      <title>30-02之聲音的採集與原理</title>
      <link>https://mark-lin.com/posts/20180902/</link>
      <pubDate>Sun, 02 Sep 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180902/</guid>
      <description>圖片來源:馬克 正文開始 首先最一開始的文章，咱們要來討論聲音的採集這個主題，但是我覺得比較準備的說法是下面這種說明: 要如何採集聲音到電腦中呢 ?</description>
    </item>
    
    <item>
      <title>一個基於 AWS Elasticsearch 的用戶行為 log 系統建立 ( 加強版 )</title>
      <link>https://mark-lin.com/posts/20180809/</link>
      <pubDate>Thu, 09 Aug 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180809/</guid>
      <description>在之前筆者的這篇文章中： 一個基於 AWS Elasticsearch 的用戶行為 log 系統建立 在們學習了如何使用 AWS 的相關工具來建立一個用戶行為的 LOG 分析系統。 但是這篇文章中所提到的</description>
    </item>
    
    <item>
      <title>Elasticearch 與 kibana 之日期的愛恨情仇</title>
      <link>https://mark-lin.com/posts/20180808/</link>
      <pubDate>Wed, 08 Aug 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180808/</guid>
      <description>我相信有使用過 Elasticsearch 的人都應該是會被他的日期時區的問題搞到很火。 在開始搞前先說說我的簡單需求: 馬克大希望可以使用 ISO 標準來進行範圍搜尋，例如201</description>
    </item>
    
    <item>
      <title>一個基於 AWS Elasticsearch 的用戶行為 log 系統建立</title>
      <link>https://mark-lin.com/posts/20180629/</link>
      <pubDate>Fri, 29 Jun 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180629/</guid>
      <description>本篇文章中，我們要說明的主題為 : 如何使用 AWS Elasticsearch 來建立一個用戶行為 log 系統。 本篇文章中，我們將分成以下的主題: Log 系統的架構說明 AWS 的工具申請 (Ela</description>
    </item>
    
    <item>
      <title>如何使用 AWS Athena 去尋找 S3 的資料 (plus kinesis 丟到 S3 的坑)</title>
      <link>https://mark-lin.com/posts/20180704/</link>
      <pubDate>Fri, 29 Jun 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180704/</guid>
      <description>在筆者的一個基於 AWS Elasticsearch 的用戶行為 log 系統建立中，我們建立了一個使用者行為分析的 log 系統，文章中有提到，我們會將比較舊的 log 放置到 S3 中，所以本篇文章我</description>
    </item>
    
    <item>
      <title>要如何定期的清除 Elasticsearch 文件 ?</title>
      <link>https://mark-lin.com/posts/20180702/</link>
      <pubDate>Fri, 29 Jun 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180702/</guid>
      <description>上一篇文章『一個基於 AWS Elasticsearch 的用戶行為 log 系統建立』中我們說明了，如何使用 AWS Elasticsaerch 來建立收集 log 的系統，而 log 系統通常也有一種需求，那就是需要定期的清除舊</description>
    </item>
    
    <item>
      <title>Elasticsearch 的 Document 建立原理</title>
      <link>https://mark-lin.com/posts/20180411/</link>
      <pubDate>Sun, 01 Apr 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180411/</guid>
      <description>在這一篇文章中，我們將要理解兩個問題 : 在新增一個 document 時，會建立 json 實體與索引，那這兩個東東會存放到那兒去 ? 而在建立索引時，它又存放了什麼東東 ? 在</description>
    </item>
    
    <item>
      <title>Elasticserach 的操作新手村</title>
      <link>https://mark-lin.com/posts/20180401/</link>
      <pubDate>Sun, 01 Apr 2018 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20180401/</guid>
      <description>本篇文章中，我們將要很快速的學習以下幾個重點: elasticsearch 的基本觀念。 使用 docker 建立 elastisearch 服務。 新增 document。 取得 document。 修改 documen</description>
    </item>
    
    <item>
      <title>為什麼伊斯蘭教會分裂呢 ?</title>
      <link>https://mark-lin.com/posts/20171231/</link>
      <pubDate>Sun, 31 Dec 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20171231/</guid>
      <description>在現今伊斯蘭的世界中，我們常常會聽到遜尼派與什葉派這兩個派別，那這兩個派別有什麼不同嗎 ? 而且為什麼會又分這兩個派別呢 ? 這兩個派別又對現在的世</description>
    </item>
    
    <item>
      <title>如何使用 Prometheus 來優雅的監控 Node Http Server 呢</title>
      <link>https://mark-lin.com/posts/20171001/</link>
      <pubDate>Sun, 01 Oct 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20171001/</guid>
      <description>本篇文章中我們將會學習到以下幾個重點 什麼是 Prometheus 呢 ? 要如何監控 node http server 呢 ? 我想從 Prometheus 監控自訂的資訊，要如何做呢 ? 什麼是 Prometheus 呢 ? 在我們平常開發完系統時，</description>
    </item>
    
    <item>
      <title>Socket.io 原始碼分析之建立連線</title>
      <link>https://mark-lin.com/posts/20170915/</link>
      <pubDate>Fri, 15 Sep 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170915/</guid>
      <description>首先我們先來看看最一開始時，要建立連線會那些事情，假設我們的 server 已經開啟 : var io = require(&amp;#39;socket.io&amp;#39;).listen(8080); io.sockets.on(&amp;#39;connection&amp;#39;, function (socket) { console.log(&amp;#34;Hello xxxx client&amp;#34;); }); 接下來我們要從前端開始追蹤它做了那些事情。 Client</description>
    </item>
    
    <item>
      <title>Socket.io 的說話島</title>
      <link>https://mark-lin.com/posts/20170914/</link>
      <pubDate>Thu, 14 Sep 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170914/</guid>
      <description>socket io 是 nodejs 所提供的套件，它主要可以做的事情就是推播功能。 你想想，假設你要做個股票報價網站，然後當你後端收到新的股價時，你要如何的送到前端 ? 在傳</description>
    </item>
    
    <item>
      <title>Socket.io 的架構</title>
      <link>https://mark-lin.com/posts/20170913/</link>
      <pubDate>Wed, 13 Sep 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170913/</guid>
      <description>socket.io 是 node js 的一個 framework，它可以幫助我們建立聊天室這種推播功能的系統，這篇文章我們不會說明它如何使用，而是要理解 socket.io 這個套件的架構組成</description>
    </item>
    
    <item>
      <title>聊天『室』的設計 ~ 安安你好，要打龍嗎? ~</title>
      <link>https://mark-lin.com/posts/20170912/</link>
      <pubDate>Tue, 12 Sep 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170912/</guid>
      <description>在上一篇文章中，我們說明了如何的設計像 line 的聊天群的架構設計，而這一篇我們要來說明聊天室的架構設計，這東西和上一篇有什麼差別 ? 通常聊天群是會由</description>
    </item>
    
    <item>
      <title>一個像 Line 的聊天群設計 ~ 安安你好 ~</title>
      <link>https://mark-lin.com/posts/20170911/</link>
      <pubDate>Mon, 11 Sep 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170911/</guid>
      <description>本篇文章中，我們講要說明，如何開發一個簡單的聊天群系統，這個東東雖然我們很常見到，到和我們平常開發的一些 WEB 有很大的差別。 差別在那呢 ? 假設我們</description>
    </item>
    
    <item>
      <title>Socket 的哩哩扣扣</title>
      <link>https://mark-lin.com/posts/20170910/</link>
      <pubDate>Sun, 10 Sep 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170910/</guid>
      <description>在前面的幾篇有說到，不同的 process 間可以使用 IPC 通信來進行溝通，但如果是不同電腦呢 ? 要如何溝通呢 ? 我們這時就可以使用 socket 來進行溝通。 在開始說明 socket 前，我</description>
    </item>
    
    <item>
      <title>Node設計模式之命令模式 ( Command )</title>
      <link>https://mark-lin.com/posts/20170611/</link>
      <pubDate>Sun, 11 Jun 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170611/</guid>
      <description>本文中我們將會知道兩件事件 為什麼要使用命令模式呢 ? 什麼是命令模式呢? 為什麼要使用命令模式呢 ? 我們先來想想，假設我們要做一個簡單的計算機的功能</description>
    </item>
    
    <item>
      <title>Node設計模式之策略模式 ( Stratgey )</title>
      <link>https://mark-lin.com/posts/20170610/</link>
      <pubDate>Sat, 10 Jun 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170610/</guid>
      <description>本篇文章中，我們想要知道以下兩件事情 : 為什麼要使用它呢 ? 什麼是策略模式呢 ? 為什麼要使用策略模式呢 ? 我們簡單的寫一下，一個多需要用不同方法的登</description>
    </item>
    
    <item>
      <title>Node之可擴展性 --- 訊息佇列 Message queue (RabbitMQ)</title>
      <link>https://mark-lin.com/posts/20170607/</link>
      <pubDate>Wed, 07 Jun 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170607/</guid>
      <description>在前幾篇文章中，我們說明了如何將系統進行擴展，而接下來呢，我們將要說明如何使用訊息佇列來進行整合，事實上之前的每篇文章中都要提到一個名稱IP</description>
    </item>
    
    <item>
      <title>Node之可擴展性 --- 訊息佇列 Message queue (ZeroMQ)</title>
      <link>https://mark-lin.com/posts/20170608/</link>
      <pubDate>Wed, 07 Jun 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170608/</guid>
      <description>上一章節中我們有提到rabbitmq，它是用來建立中介式架構的broker，但這種架構有什麼問題呢 ? 那就是分散式架構的頭號公敵單點失效(si</description>
    </item>
    
    <item>
      <title>Passport.js 之 Hello 你好嗎 ~ </title>
      <link>https://mark-lin.com/posts/20170609/</link>
      <pubDate>Wed, 07 Jun 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170609/</guid>
      <description>本篇文章中，我們想要知道以下的重點 : passport 是啥鬼 ? 要如何使用它呢 ? 要如何使用一個 passport 的登入系統呢 ? passport 是啥 ? passport.js是 node 中的一段登入驗</description>
    </item>
    
    <item>
      <title>Node之可擴展性 --- Nginx反向代理建立</title>
      <link>https://mark-lin.com/posts/20170606/</link>
      <pubDate>Tue, 06 Jun 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170606/</guid>
      <description>在上一篇文章中，我們使用cluster來建立多process的應用，這個方法是我們上一篇所提到X軸擴展的複制的方法之一。 而這一篇文章，我們一</description>
    </item>
    
    <item>
      <title>Node之可擴展性 --- Node的Cluster</title>
      <link>https://mark-lin.com/posts/20170605/</link>
      <pubDate>Mon, 05 Jun 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170605/</guid>
      <description>本篇文章中將要說明，要如何的擴展 node 應用，從上一篇文章中我們知道， node 它很適合高 I/O 的任務，而不適合高 cpu 的任務，最主要的原因在於它的架構，它是單執</description>
    </item>
    
    <item>
      <title>Node之CPU吃重的任務要如何處理 ? </title>
      <link>https://mark-lin.com/posts/20170604/</link>
      <pubDate>Sun, 04 Jun 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170604/</guid>
      <description>這篇文章中，我們希望學習到 : 在開發nodejs時，如果遇到cpu密集型的任務時，要如何處理 ? 首先我們先來複習一下nodejs的機制一下。 我們</description>
    </item>
    
    <item>
      <title>Node 設計模式之代理器 ( Proxy )</title>
      <link>https://mark-lin.com/posts/20170603/</link>
      <pubDate>Sat, 03 Jun 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170603/</guid>
      <description>本篇文章中我們將要解決以下的問答。 什麼是代理器模式 ? 我們為什麼要使用它 ? 其中本篇文章還會介紹ES6所提供的Proxy使用方法。 什麼是代理器模</description>
    </item>
    
    <item>
      <title>Node.js 的串流之旅之雙工串流與管道</title>
      <link>https://mark-lin.com/posts/20170602/</link>
      <pubDate>Fri, 02 Jun 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170602/</guid>
      <description>在node js 中雙工串流主要有以下兩種，這兩種直接用白話文來講就是同時有read與write的功能。 Tranform Stream Duplex Stream 那這兩者有什麼差別呢，差別在於du</description>
    </item>
    
    <item>
      <title>Node.js 的串流之旅之基本概念</title>
      <link>https://mark-lin.com/posts/20170601/</link>
      <pubDate>Thu, 01 Jun 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170601/</guid>
      <description>串流是啥，事實上這個東東，我們每天都有使用，簡單的說，它是一種傳送內容的技術，在沒有使用串流技術時，我們想要在網路上看影片，需要將它下載下來</description>
    </item>
    
    <item>
      <title>排序之桶子排序法(Bucket Sort)</title>
      <link>https://mark-lin.com/posts/20170427/</link>
      <pubDate>Thu, 27 Apr 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170427/</guid>
      <description>比較排序法與非比較排序法 桶子排序法原理 桶子排序法使用時機 桶子排序法複雜度 javascript 演算法實作 比較排序法與非比較排序法 前面幾篇我們學的排序演算法都被歸</description>
    </item>
    
    <item>
      <title>排序之合併排序法(Merge Sort)</title>
      <link>https://mark-lin.com/posts/20170426/</link>
      <pubDate>Wed, 26 Apr 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170426/</guid>
      <description>合併排序法的原理 合併排序法的速度效能 合併排序法的空間效能 javascript 演算法實作 合併排序法原理 合併排序法，它也是與上一篇提到的快速排序法一樣，使用分治法</description>
    </item>
    
    <item>
      <title>排序之快速排序法(Quick Sort)</title>
      <link>https://mark-lin.com/posts/20170425/</link>
      <pubDate>Tue, 25 Apr 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170425/</guid>
      <description>快速排序法的原理 快速排序法的速度效能 快速排序法的空間效能 基準點的選擇 javascript 演算法實作 快速排序法的原理 快速排序法，又稱為分割排序法(partioi</description>
    </item>
    
    <item>
      <title>排序之堆積排序法(Heap Sort)</title>
      <link>https://mark-lin.com/posts/20170424/</link>
      <pubDate>Mon, 24 Apr 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170424/</guid>
      <description>本篇文章分成以下幾個章節 : 堆積樹(Heap tree)。 堆積排序法的原理。 堆積排序法的執行效能。 javascript 演算法實作。 堆積樹 Heap Tree 再說明堆積排序排序前，</description>
    </item>
    
    <item>
      <title>排序之選擇排序法(Selection Sort)</title>
      <link>https://mark-lin.com/posts/20170423/</link>
      <pubDate>Sun, 23 Apr 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170423/</guid>
      <description>選擇排序法的原理 插入排序法的執行效能 javascript演算法實作 選擇排序法的原理 選擇排序法，它基本的觀念為 : 將資料分成已排序與未排序，然後</description>
    </item>
    
    <item>
      <title>排序之插入排序法 ( Insertion Sort )</title>
      <link>https://mark-lin.com/posts/20170422/</link>
      <pubDate>Sat, 22 Apr 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170422/</guid>
      <description>插入排序法是我們第一個學習到的排序方法，我們本篇會針對它來詳細的介紹一下。 插入排序法的原理 插入排序法的執行效能 javascript演算法實作</description>
    </item>
    
    <item>
      <title>搜尋之二元搜尋法 Binary search</title>
      <link>https://mark-lin.com/posts/20170421/</link>
      <pubDate>Fri, 21 Apr 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170421/</guid>
      <description>基本上如果我們要在陣列中搜尋一個元素，最簡單的方法就是跑個迴圈一個一個跑，它有個專有名詞叫線性搜尋，這在未排序的資料中，效果還算可以，但是如</description>
    </item>
    
    <item>
      <title>演算法策略---動態規畫法</title>
      <link>https://mark-lin.com/posts/20170325/</link>
      <pubDate>Sat, 25 Mar 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170325/</guid>
      <description>動態規劃法 Dynamic programming ; DP，它與分治法很像，都是將大問題分割成小問題，而它和分治法不同的地方在於，它會將處理過的子問題解答，將它記憶起來，為了避免</description>
    </item>
    
    <item>
      <title>演算法策略---分治法</title>
      <link>https://mark-lin.com/posts/20170324/</link>
      <pubDate>Fri, 24 Mar 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170324/</guid>
      <description>在解決一個問題時，有一種很常見的方法，那就是將這個問題，分成很多個小問題，然後將所以小問題全部解決，最後可以合成一個解答。這種將問題分割變小</description>
    </item>
    
    <item>
      <title>演算法之策略---貪心法</title>
      <link>https://mark-lin.com/posts/20170323/</link>
      <pubDate>Thu, 23 Mar 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170323/</guid>
      <description>通常當我們遇到一個演算法的問題時，通常都有一些策略可以使用，本篇文章中我們將會說明貪心法這種策略。 基本概念 實作問題 基本概念 貪心法在解決問題</description>
    </item>
    
    <item>
      <title>鄂圖曼帝國掰掰後，中東變成什麼樣 ? </title>
      <link>https://mark-lin.com/posts/20170318/</link>
      <pubDate>Sat, 18 Mar 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170318/</guid>
      <description>鄂圖曼帝國是一個曾經強到在歐、亞、非都有領士的伊斯蘭帝國(1299~1922)，在世紀帝國二中，有一個國家上到城堡時代就可以建立土耳其火槍兵</description>
    </item>
    
    <item>
      <title>蘇聯的誕生與結束</title>
      <link>https://mark-lin.com/posts/20170317/</link>
      <pubDate>Fri, 17 Mar 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170317/</guid>
      <description>蘇聯 (Soviet Union)歷史上的超級強國Hyperpower 之一，在 60 年代時，與美國分庭抗禮，同時是社會主義的代表，但『可惜』這個大國在1991年</description>
    </item>
    
    <item>
      <title>資料結構---堆積 Heap</title>
      <link>https://mark-lin.com/posts/20170314/</link>
      <pubDate>Tue, 14 Mar 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170314/</guid>
      <description>這篇文章中，我們將要來說明堆積(heap)這種資料結構，但在說明這個資料結構前，讀者需要先了解二元樹這種資料結構，如果不了解的話，可以看看筆</description>
    </item>
    
    <item>
      <title>資料結構---圖形結構</title>
      <link>https://mark-lin.com/posts/20170311/</link>
      <pubDate>Sat, 11 Mar 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170311/</guid>
      <description>圖學理論(graph theory)它源於1736年的數學家 LeonHard Euler ，它為了解決Koenigsberg bridge問題而發展出來的理論，雖然Koe</description>
    </item>
    
    <item>
      <title>樹狀結構的遍歷 Traversal ( Iteration )</title>
      <link>https://mark-lin.com/posts/20170310/</link>
      <pubDate>Fri, 10 Mar 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170310/</guid>
      <description>在筆者的『基礎資料結構 3 &amp;mdash; 樹狀結構與二元樹』的這篇文章中，我們介紹了樹的基本概念，也學習了如何遍歷樹的方法，在之前的文章中，我們有說到，如果</description>
    </item>
    
    <item>
      <title>資料結構---樹狀結構與二元樹</title>
      <link>https://mark-lin.com/posts/20170309/</link>
      <pubDate>Thu, 09 Mar 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170309/</guid>
      <description>在這篇文章中，我們將要仔細的來說明樹(Tree)這個資料結構，它在計算機科學中非常的重要，有很多演算法都一定會運用到這種資料結構。接下來我們</description>
    </item>
    
    <item>
      <title>資料結構---串列 Linked List</title>
      <link>https://mark-lin.com/posts/20170213/</link>
      <pubDate>Mon, 13 Feb 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170213/</guid>
      <description>前篇文章中，我們說明三種資料結構、陣列、堆疊、佇列，在開始今天的文章前，我們先簡單的複習一下這三個東西是啥。 array : 最常用使用到的資料結構，它是</description>
    </item>
    
    <item>
      <title>資料結構---陣列(Array)、堆疊(Stack)、佇列(Queue)</title>
      <link>https://mark-lin.com/posts/20170211/</link>
      <pubDate>Sat, 11 Feb 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170211/</guid>
      <description>接下來的幾篇文章，我們將要簡單的說明幾個基礎的資料結構，那麼資料結構又是什麼呢? 根據 wiki 的解答。 資料結構是電腦中儲存、組織資料的方式。 也就是說</description>
    </item>
    
    <item>
      <title>VIM的五四三---vim &#43; syntastic &#43; eslint &#43; react的配置</title>
      <link>https://mark-lin.com/posts/20170201/</link>
      <pubDate>Wed, 01 Feb 2017 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20170201/</guid>
      <description>本篇文章中，我們將要和讀者說明，在使用vim開發javascript應用時，如何可以在每一次儲存時，自動的檢查我們js是否有問題，讓我們在開</description>
    </item>
    
    <item>
      <title>30-30之MongoDB三十天的學習之旅</title>
      <link>https://mark-lin.com/posts/20160930/</link>
      <pubDate>Fri, 30 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160930/</guid>
      <description>不知不覺~漫長的鐵人賽就進入了尾聲，當初會參加鐵人賽也只是因為，沒參加過 ~ 來試試看，而且也剛好我今年的時間比較多點兒，話說回來，為什麼我會選</description>
    </item>
    
    <item>
      <title>30-29之MongoDB--- 事務操作的空虛感</title>
      <link>https://mark-lin.com/posts/20160929/</link>
      <pubDate>Thu, 29 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160929/</guid>
      <description>本篇文章是用來補充一下，前面忘了講的觀念，記得在第一篇時，我們有提過下面這句話。 MongoDB 不支持事務操作 但事實上這段話有很多觀念要來說明說明，不然很</description>
    </item>
    
    <item>
      <title>30-28之MongoDB運用研究---股價應用模擬(3)</title>
      <link>https://mark-lin.com/posts/20160928/</link>
      <pubDate>Wed, 28 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160928/</guid>
      <description>上一篇研究簡單的說明完，股價分析的運用操作後，接下來我們這篇文章將要說明一些程式交易的東西，不過雖然說是程式交易，但事實上也只是簡單的計算出</description>
    </item>
    
    <item>
      <title>30-27之MongoDB運用研究---股價應用模擬(2)</title>
      <link>https://mark-lin.com/posts/20160927/</link>
      <pubDate>Tue, 27 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160927/</guid>
      <description>上一篇文章中，我們已經說明完基本的架構以及索引和分片的選擇，接下來我們就要實際的來使用資料來進行一些分析，能用搜尋時就用搜尋，不能用搜尋時就</description>
    </item>
    
    <item>
      <title>30-26之MongoDB運用研究---股價應用模擬(1)</title>
      <link>https://mark-lin.com/posts/20160926/</link>
      <pubDate>Mon, 26 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160926/</guid>
      <description>前面幾篇文章我們說明完了分片的運用後，我們接下來，就來實際的模擬個情景，我們來學習要如何的一步一步完成，咱們選擇的模擬情境為股價應用，現在F</description>
    </item>
    
    <item>
      <title>30-25之MongoDB分片Sharding(3)---片鍵的選擇</title>
      <link>https://mark-lin.com/posts/20160925/</link>
      <pubDate>Sun, 25 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160925/</guid>
      <description>上一篇文章我們詳細的說明完分片的機制後，接下來我們就要來詳細的說明片鍵的選擇，片鍵的選擇關係到你的分片執行速度與效能，並且一但建立後，要再修</description>
    </item>
    
    <item>
      <title>30-24之MongoDB分片Sharding(2)---Chunk的札事</title>
      <link>https://mark-lin.com/posts/20160924/</link>
      <pubDate>Sat, 24 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160924/</guid>
      <description>在上一篇文章中說明完基本的分片概念後，我們本章節要更深的了解分片內的chunk， 它是每個分片組成的東西，我們這篇將要說明它的拆分與分配機制。</description>
    </item>
    
    <item>
      <title>30-23之MongoDB分片Sharding---Hello Sharding</title>
      <link>https://mark-lin.com/posts/20160923/</link>
      <pubDate>Fri, 23 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160923/</guid>
      <description>本篇文章將要說明 mongodb 的分片`，上一章節說明了如何將資料同步到其它台節點上，而本篇文章是將要說明，如何將資料分割到其它台節點，讓我們可以更快速、</description>
    </item>
    
    <item>
      <title>30-22之MongoDB的副本集 replica set(2)---使用Docker建立MongoDB Cluster</title>
      <link>https://mark-lin.com/posts/20160922/</link>
      <pubDate>Thu, 22 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160922/</guid>
      <description>上篇文章我們已經說明完，如何在本機上建立 mongodb 副本集，而本篇文章，我們將要實際的使用docker來建立有三個節點的副本集，也就是所謂 cluster 。 開始前的</description>
    </item>
    
    <item>
      <title>30-21之MongoDB的副本集 replica set(1)</title>
      <link>https://mark-lin.com/posts/20160921/</link>
      <pubDate>Wed, 21 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160921/</guid>
      <description>本篇文章將要說明， mongodb 的副本集。嗯~想想一個情況，現在咱們只使用一台 server 來存放資料，我們現在只是測試和開發， GG 囉也只是啊一聲，但如果是正式上線環</description>
    </item>
    
    <item>
      <title>30-20之MongoDB運用研究---PO文情境模擬(3)</title>
      <link>https://mark-lin.com/posts/20160920/</link>
      <pubDate>Tue, 20 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160920/</guid>
      <description>上篇文章中，基本上已經把po文的方法，大部份都完成了，也建立好了索引，並且也將po文常見的搜尋給實作出來，接下來本篇文章，我們將要站在資料分</description>
    </item>
    
    <item>
      <title>30-19之MongoDB運用研究---PO文模擬情境(2)</title>
      <link>https://mark-lin.com/posts/20160919/</link>
      <pubDate>Mon, 19 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160919/</guid>
      <description>上篇文章中，咱們已經將資料都建立好了，也完成了第一個需求，使用者可以進行PO文，並且我們建立出了模擬資料共一百萬筆，大約1gb的大小，接下來</description>
    </item>
    
    <item>
      <title>30-18之MongoDB運用研究---PO文模擬情境(1)</title>
      <link>https://mark-lin.com/posts/20160918/</link>
      <pubDate>Sun, 18 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160918/</guid>
      <description>咱們來細數一下，我們在前面的幾篇學了那些東西~ mongodb 的新增、刪除、更新、搜尋。 mongodb 的索引運用。 mongodb 的資料分析工具 Aggregate 聚合。 mongodb 的設計。 是的~雖然看起來很</description>
    </item>
    
    <item>
      <title>30-17之MongoDB的設計---正規與反正規化的戰爭</title>
      <link>https://mark-lin.com/posts/20160917/</link>
      <pubDate>Sat, 17 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160917/</guid>
      <description>本篇文章將說要說如何設計mongodb的架構，讓你可以更快速的使用mongodb。 資料庫的正規化(文鄒鄒)。 mongodb正規化與反正規化。</description>
    </item>
    
    <item>
      <title>30-16之MongoDB聚合(3)---潮潮的MapReduce</title>
      <link>https://mark-lin.com/posts/20160916/</link>
      <pubDate>Fri, 16 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160916/</guid>
      <description>前兩篇說明完 mongodb 所提供的第一種聚合工作 aggregate framework ，本篇文章將要說明 mongodb 所提供的第二種聚合工作， MapReduce` 嗯…只要有微微研究過大數據，應該都有聽個這個潮潮的名詞</description>
    </item>
    
    <item>
      <title>30-15之MongoDB聚合(2)---Pipeline武器庫</title>
      <link>https://mark-lin.com/posts/20160915/</link>
      <pubDate>Thu, 15 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160915/</guid>
      <description>在上一篇文章中說明了 pipeline 操作符號，接下來我們這篇要說明在操作符號內使用的 pipeline 表達式，它讓我們可以在pipeline 內進行計算、比較、字串修改等分</description>
    </item>
    
    <item>
      <title>30-14之MongoDB聚合(1)---Aggregate Framework的哩哩扣扣</title>
      <link>https://mark-lin.com/posts/20160914/</link>
      <pubDate>Wed, 14 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160914/</guid>
      <description>在前面幾篇都是說明如何尋找到你想要的東西，而在接下來的聚合章節中，我們將說來學習到如何使用聚合工具，來幫助我們分析更多資料，以下為本篇要說明</description>
    </item>
    
    <item>
      <title>30-13之MongoDB索引(3)---比較特別的索引使用</title>
      <link>https://mark-lin.com/posts/20160913/</link>
      <pubDate>Tue, 13 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160913/</guid>
      <description>本篇文章將要說明幾個比較特別索引使用的方法。 索引陣列欄位 索引子欄位 全文索引 P.S 快要一半囉~~+u^13 ~ 索引陣列欄位 ~ 假設你有下列資料，但發現</description>
    </item>
    
    <item>
      <title>30-12之MongoDB索引(2)---複合索引的坑</title>
      <link>https://mark-lin.com/posts/20160912/</link>
      <pubDate>Mon, 12 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160912/</guid>
      <description>本文將會說明以下幾點。 複合索引是啥~ 複合索引的運用與坑坑坑~ ~ 複合索引是啥 ~ 假設有下列資料。 { &amp;#34;name&amp;#34; : &amp;#34;mark&amp;#34; , &amp;#34;age&amp;#34; : 20} { &amp;#34;name&amp;#34; : &amp;#34;mark&amp;#34; , &amp;#34;age&amp;#34; : 25} { &amp;#34;name&amp;#34; : &amp;#34;steven&amp;#34; , &amp;#34;age&amp;#34; : 30}</description>
    </item>
    
    <item>
      <title>30-11之MongoDB索引(1)的哩哩扣扣</title>
      <link>https://mark-lin.com/posts/20160911/</link>
      <pubDate>Sun, 11 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160911/</guid>
      <description>本篇文章將會說明以下幾點。 什麼是索引? 索引的優點與缺點 索引的建立 索引與非索引搜尋比較 不要使用索引的時機 P.S +u^11鐵人們 ~ 事實上我已快gg了</description>
    </item>
    
    <item>
      <title>30-10之MongoDB新手村CRUD---搜尋之Cursor運用與搜尋原理</title>
      <link>https://mark-lin.com/posts/20160910/</link>
      <pubDate>Sat, 10 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160910/</guid>
      <description>本篇文章將要說明cursor的用法以及一些curosr的方法，可以搜尋後用來限制或排序結果的功能，以及說明一下在不考慮索引情況下find的搜</description>
    </item>
    
    <item>
      <title>30-9之MongoDB新手村CRUD---搜尋之陣列欄位與regex</title>
      <link>https://mark-lin.com/posts/20160909/</link>
      <pubDate>Fri, 09 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160909/</guid>
      <description>本篇文章將要說明其它幾個搜尋方法，包含如何搜尋document中的陣列欄位的值以及運用正規表達式regex 來進行搜尋。 搜尋陣列內容 正規表達式</description>
    </item>
    
    <item>
      <title>30-8之MongoDB新手村CRUD---搜尋之find與搜尋操作符號</title>
      <link>https://mark-lin.com/posts/20160908/</link>
      <pubDate>Thu, 08 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160908/</guid>
      <description>前面幾篇已經說明完了新增、修改、刪除，最後咱們新手村之旅的尾巴將要說明搜尋，這個功能應該是我們最常會使用到的，請好好的學習。 find方法基本</description>
    </item>
    
    <item>
      <title>30-7之MongoDB新手村CRUD---刪除</title>
      <link>https://mark-lin.com/posts/20160907/</link>
      <pubDate>Wed, 07 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160907/</guid>
      <description>本篇文章將要來說明MongoDB的刪除方法，rmoeve、deleteOne、deleteMany、bulk，並且簡單的比較一下速有有何差別</description>
    </item>
    
    <item>
      <title>30-6之MongoDB新手村CRUD---更新之陣列欄位攻略</title>
      <link>https://mark-lin.com/posts/20160906/</link>
      <pubDate>Tue, 06 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160906/</guid>
      <description>本篇文章將要說明陣列修改器 push，主要就是針對 document 中的陣列進行修改，同時他也可以搭配 each、slice、ne、addToSet、pop、p</description>
    </item>
    
    <item>
      <title>30-5之MongoDB新手村CRUD---更新</title>
      <link>https://mark-lin.com/posts/20160905/</link>
      <pubDate>Mon, 05 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160905/</guid>
      <description>本篇將要來說明MongoDB中更新文檔的方法，並且也同時會說明更新修改器的功能，它能幫助我們進行更有效率的更新。 基本更新方法Update。 更</description>
    </item>
    
    <item>
      <title>30-4之MongoDB新手村CRUD---新增之Bulk與新增效能測試</title>
      <link>https://mark-lin.com/posts/20160904/</link>
      <pubDate>Sun, 04 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160904/</guid>
      <description>本篇文章會運用上一篇提到的二種新增方法insert、insertMany，以及另一種新增方法Bulk來做執行速度比較 ; 由於insertMan</description>
    </item>
    
    <item>
      <title> 30-3之MongoDB新手村CRUD---新增</title>
      <link>https://mark-lin.com/posts/20160903/</link>
      <pubDate>Sat, 03 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160903/</guid>
      <description>安裝好MongoDB後，接下來本篇主要說明如何新增資料至MongoDB中，而用更精確的詞彙來說是，如何新增document至collecti</description>
    </item>
    
    <item>
      <title>30-1 之 MongoDB 基礎知識</title>
      <link>https://mark-lin.com/posts/20160901/</link>
      <pubDate>Thu, 01 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160901/</guid>
      <description>Hello ~ 大家好 ~ 接下來的30天的文章，小的我將要說明如何從0 → 1開始來學習MongoDB，咱們這30天的文章結構大至上會如下。 首先，先來個十篇的</description>
    </item>
    
    <item>
      <title>30-2之使用 Docker 來建構 MongoDB</title>
      <link>https://mark-lin.com/posts/20160902/</link>
      <pubDate>Thu, 01 Sep 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160902/</guid>
      <description>由於網站上已經有很多mongodb的安裝方法，所以本篇將說明，如何使用Docker來建立可使用mongodb的環境，這也代表你的電腦只要有安</description>
    </item>
    
    <item>
      <title>Cordova-Cordova Chrome Debug</title>
      <link>https://mark-lin.com/posts/20160210/</link>
      <pubDate>Wed, 10 Feb 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160210/</guid>
      <description>在寫網頁時，最常使用到Chrome來進行Debug，對開發非常的有幫助，但如果是在Cordova上呢?這篇文章就是要介紹如何時用Chrome</description>
    </item>
    
    <item>
      <title>CSS-Box Model 觀念</title>
      <link>https://mark-lin.com/posts/20160201/</link>
      <pubDate>Mon, 01 Feb 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160201/</guid>
      <description>Css Box Model 規定了Element處理元素Content、Padding、border、margin的方式 。 Box Model基本概念 這張圖就是在說明一個</description>
    </item>
    
    <item>
      <title>CSS-Position 觀念</title>
      <link>https://mark-lin.com/posts/20160202/</link>
      <pubDate>Mon, 01 Feb 2016 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20160202/</guid>
      <description>在上一篇Css Box Model討論完Element的大小問題，接來下來談談Element的位置(Position)問題，Css中可以對Eleme</description>
    </item>
    
    <item>
      <title>HTML5 之走在平行時空的 Web Worker</title>
      <link>https://mark-lin.com/posts/20151001/</link>
      <pubDate>Thu, 01 Oct 2015 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20151001/</guid>
      <description>什麼是Web Worker？，它就是個運行在後台的Javascript，獨立於其它Script，並且不會影響效能，但它不能影響Dom、並不能訪</description>
    </item>
    
    <item>
      <title>Jquery 的 Promise 之 when 與 then ( pipe )</title>
      <link>https://mark-lin.com/posts/20150909/</link>
      <pubDate>Wed, 09 Sep 2015 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20150909/</guid>
      <description>在這篇文章中，我們將來說明一下when與then(pipe)的用法，這兩個方法都算是promise衍伸技術。 deferred.when 在實務上很常有這種要求，任務</description>
    </item>
    
    <item>
      <title>Javascript非同步編程的方法 - Promise</title>
      <link>https://mark-lin.com/posts/20150908/</link>
      <pubDate>Tue, 08 Sep 2015 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20150908/</guid>
      <description>在上一篇介紹 PubSub 的方法後，發現該方法不適合處理一次性事件，而Promise就是用來解決該問題的手法。那什麼是Promise呢?，他是一種非同步</description>
    </item>
    
    <item>
      <title>Javascript非同步編程的方法 - Pub/Sub</title>
      <link>https://mark-lin.com/posts/20150907/</link>
      <pubDate>Mon, 07 Sep 2015 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20150907/</guid>
      <description>發布與訂閱模式Pub/Sub它主要的概念為 : 定義一對多的關係，當一件事情發布時會同時通知所有的訂閱者 在 Javascript 與 Jquery 非常容易看到該模式的使用。例如 J</description>
    </item>
    
    <item>
      <title>Javascript 非同步編程的方法 - setTimeout</title>
      <link>https://mark-lin.com/posts/20150906/</link>
      <pubDate>Sun, 06 Sep 2015 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20150906/</guid>
      <description>在Javascript單線程與Javascript之Event Driven這兩篇文章中，我們大概了解了單線程與非同步事件的工作原理，在這篇中</description>
    </item>
    
    <item>
      <title>Javascript 之 Event Driven</title>
      <link>https://mark-lin.com/posts/20150905/</link>
      <pubDate>Sat, 05 Sep 2015 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20150905/</guid>
      <description>在Javascript單線程該篇文章中有提到，大部份這種單線程但可以處理非同步的語言都有共同的特性那就是事件驅動(Event Driven)，</description>
    </item>
    
    <item>
      <title>Javascript 之單線程</title>
      <link>https://mark-lin.com/posts/20150904/</link>
      <pubDate>Fri, 04 Sep 2015 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20150904/</guid>
      <description>首先看看下面的程式碼，會發現永遠跑不出So sad，因為Javascript為單線程，雖然設定１秒過後isEnd為false，然後應該就直接跑</description>
    </item>
    
    <item>
      <title>物件導向系列菜單 11-『 泛型 ( Generics ) 』</title>
      <link>https://mark-lin.com/posts/20150826/</link>
      <pubDate>Wed, 26 Aug 2015 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20150826/</guid>
      <description>什麼是泛型呢 什麼是泛型呢~? 這個東西有看過吧，你有時後會在程式碼裡看到List這種寫法， 這代表List串列中，你可以存放『T』型別，例如Li</description>
    </item>
    
    <item>
      <title>物件導向系列菜單 10 -『 委派 ( Delegate ) 』</title>
      <link>https://mark-lin.com/posts/20150825/</link>
      <pubDate>Tue, 25 Aug 2015 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20150825/</guid>
      <description>什麼是委派 委派是以特定參數清單和傳回型別表示對方法的參考型別。 當您具現化委派時您可以使其執行個體具有相容簽章和傳回型別的所有方法。(MSDN</description>
    </item>
    
    <item>
      <title>物件導向系列菜單 9-『 物件導向特性-封裝 ( Encapsulation ) 』</title>
      <link>https://mark-lin.com/posts/20150824/</link>
      <pubDate>Mon, 24 Aug 2015 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20150824/</guid>
      <description>存取修飾詞 存取修飾詞 說明 public 無任何存取限制。 internal 只能在自已類別與專案(組件)中其它類別進行存取。(不包含其它專案)。 protected 只能在自已類別和子類別中存</description>
    </item>
    
    <item>
      <title>物件導向系列菜單 8-『 屬性 ( Properties ) 與欄位 ( Field ) 和存取子 ( accessor ) 』</title>
      <link>https://mark-lin.com/posts/20150823/</link>
      <pubDate>Sun, 23 Aug 2015 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20150823/</guid>
      <description>區別何謂屬性與何謂欄位 先來說說欄位，欄位(Field)是一個任意型別(Type)的變數，直接在類別(Class)與結構(struct)中宣告</description>
    </item>
    
    <item>
      <title>物件導向系列菜單7-『 部分類別 ( Partial Class ) 』</title>
      <link>https://mark-lin.com/posts/20150822/</link>
      <pubDate>Sat, 22 Aug 2015 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20150822/</guid>
      <description>部份類別 ( Partial Class ) 部分類別使用時機大都在處理大型專案時，將類別分散至個別檔案，可讓多位程式設計師進行運作。 程式碼說明建立部分類別的方法，就是加</description>
    </item>
    
    <item>
      <title>物件導向系列菜單 6-『 Interface 介面 』</title>
      <link>https://mark-lin.com/posts/20150821/</link>
      <pubDate>Fri, 21 Aug 2015 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20150821/</guid>
      <description>Interface概念 介面(Interface)你可以將他想成是商品契約，所有要商品的交易，都要經過這個商品契約來決定，例如裡面說交易單位是</description>
    </item>
    
    <item>
      <title>物件導向系列菜單 5 -『 物件導向特性-繼承 ( Inheritance ) 4 - abstract 』</title>
      <link>https://mark-lin.com/posts/20150820/</link>
      <pubDate>Thu, 20 Aug 2015 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20150820/</guid>
      <description>使用修飾詞abstract，限定類別只能被繼承 在Class Car 前增加abstract，表是該類別只能繼承、不能實作，也被稱為抽象類別。 //父類</description>
    </item>
    
    <item>
      <title>物件導向系列菜單 4 -『 物件導向特性-繼承(Inheritance) 3 - Sealed 』</title>
      <link>https://mark-lin.com/posts/20150819/</link>
      <pubDate>Wed, 19 Aug 2015 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20150819/</guid>
      <description>特點 1 - 使用 Sealed 關鍵字使類別不能被繼承 下列為簡單的Sealed範例。 父類別Class Car ，有兩個屬性分別為Speed與Color，並自行訂定建構</description>
    </item>
    
    <item>
      <title>物件導向系列菜單 3 -『 物件導向特性-繼承 ( Inheritance ) 2- Virtual 與 Override 』</title>
      <link>https://mark-lin.com/posts/20150818/</link>
      <pubDate>Tue, 18 Aug 2015 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20150818/</guid>
      <description>Virtual 修飾詞 子類別的方法名稱和父類別的方法名稱一樣，著麼辦呢 ? virtual 關鍵字的用途是修改方法、屬性或事件宣告，以及允許在衍生類別中給予覆寫。通常使用的</description>
    </item>
    
    <item>
      <title>物件導向系列菜單 2-『 物件導向特性-繼承 ( Inheritance ) 1 』</title>
      <link>https://mark-lin.com/posts/20150817/</link>
      <pubDate>Mon, 17 Aug 2015 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20150817/</guid>
      <description>繼承為物件導向的三大特性之一(封裝、多型)，你可以想像老爸與兒子的關係，兒子會繼承老爸所擁有的特徵(屬性)和)財產(方法)(現實上不一定，但</description>
    </item>
    
    <item>
      <title>物件導向系列菜單 1-『 基本概念 』</title>
      <link>https://mark-lin.com/posts/20150816/</link>
      <pubDate>Sun, 16 Aug 2015 19:51:35 +0800</pubDate>
      
      <guid>https://mark-lin.com/posts/20150816/</guid>
      <description>物件導向基本概念為『類別』與『物件』 基本上保哥這篇文章已經寫的很清楚了保哥 (保哥)，但知識的學習還是要經過自已的腦袋與手加眼睛，所以小弟我也</description>
    </item>
    
  </channel>
</rss>